{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome to the API Section | Simple Shader Inspectors Documentation",
    "keywords": "Welcome to the API Section Here you will find the documentation of each publicly available classes within the API."
  },
  "api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.CreateLocalizationArrayFromNames.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.CreateLocalizationArrayFromNames.html",
    "title": "Method CreateLocalizationArrayFromNames | Simple Shader Inspectors Documentation",
    "keywords": "Method CreateLocalizationArrayFromNames CreateLocalizationArrayFromNames(String[]) Creates an AdditionalLocalization array from an array of names. Declaration public static AdditionalLocalization[] CreateLocalizationArrayFromNames(string[] contentNames) Parameters Type Name Description String [] contentNames Array of names. Returns Type Description AdditionalLocalization [] An array of AdditionalLocalization objects. Remarks Functionally is the same as InitializeLocalizationWithNames(IAdditionalLocalization, String[]) , but instead of automatically assigning the resulting AdditionalLocalization array to the calling object, it returns the generated array, so that more things can be done with it later. A possible example is generating 2 sets of contents, and then exposing a combination of the 2 dynamically based on some conditional logic."
  },
  "api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.html",
    "title": "Class AdditionalContentExtensions | Simple Shader Inspectors Documentation",
    "keywords": "Class AdditionalContentExtensions Static class containing extension methods that manipulate AdditionalLocalization or AdditionalLocalization objects or arrays. Inheritance Object AdditionalContentExtensions Namespace : VRLabs.SimpleShaderInspectors Syntax public static class AdditionalContentExtensions Methods Name Description CreateLocalizationArrayFromNames(String[]) Creates an AdditionalLocalization array from an array of names. InitializeLocalizationWithNames(IAdditionalLocalization, String[]) Initialize the AdditionalLocalization array of an IAdditionalLocalization object with the provided array of names."
  },
  "api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.InitializeLocalizationWithNames.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.InitializeLocalizationWithNames.html",
    "title": "Method InitializeLocalizationWithNames | Simple Shader Inspectors Documentation",
    "keywords": "Method InitializeLocalizationWithNames InitializeLocalizationWithNames(IAdditionalLocalization, String[]) Initialize the AdditionalLocalization array of an IAdditionalLocalization object with the provided array of names. Declaration public static void InitializeLocalizationWithNames(this IAdditionalLocalization obj, string[] contentNames) Parameters Type Name Description IAdditionalLocalization obj IAdditionalLocalization Object to use. String [] contentNames Array of names. Remarks Sometimes there's a need of a lot of localized content, but having to manually declare each item of the array manually can bloat the control's constructor fairly quick, and it becomes even worse when multiple constructors are needed. It's instead easier to declare an array of strings in a private field, and call this method instead."
  },
  "api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Content.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Content.html",
    "title": "Property Content | Simple Shader Inspectors Documentation",
    "keywords": "Property Content Content GUIContent containing the localized content. Declaration public GUIContent Content { get; set; } Property Value Type Description GUIContent"
  },
  "api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.html",
    "title": "Class AdditionalLocalization | Simple Shader Inspectors Documentation",
    "keywords": "Class AdditionalLocalization This class is a simple class containing a Name used for finding the localization content and a GUIContent object containing said content. Inheritance Object AdditionalLocalization Namespace : VRLabs.SimpleShaderInspectors Syntax public class AdditionalLocalization Properties Name Description Content GUIContent containing the localized content. Name Name of the additional localized content."
  },
  "api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Name.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Name.html",
    "title": "Property Name | Simple Shader Inspectors Documentation",
    "keywords": "Property Name Name Name of the additional localized content. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api/VRLabs.SimpleShaderInspectors.AdditionalProperty.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.AdditionalProperty.-ctor.html",
    "title": "Constructor AdditionalProperty | Simple Shader Inspectors Documentation",
    "keywords": "Constructor AdditionalProperty AdditionalProperty(String) Default constructor of AdditionalProperty. Declaration public AdditionalProperty(string propertyName) Parameters Type Name Description String propertyName Name of the materialProperty to fetch."
  },
  "api/VRLabs.SimpleShaderInspectors.AdditionalProperty.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.AdditionalProperty.html",
    "title": "Class AdditionalProperty | Simple Shader Inspectors Documentation",
    "keywords": "Class AdditionalProperty This class defines an additional property. Inheritance Object AdditionalProperty Namespace : VRLabs.SimpleShaderInspectors Syntax public class AdditionalProperty Constructors Name Description AdditionalProperty(String) Default constructor of AdditionalProperty. Properties Name Description Property MaterialProperty containing the additional property needed by the control. PropertyName String containing the additional property name."
  },
  "api/VRLabs.SimpleShaderInspectors.AdditionalProperty.Property.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.AdditionalProperty.Property.html",
    "title": "Property Property | Simple Shader Inspectors Documentation",
    "keywords": "Property Property Property MaterialProperty containing the additional property needed by the control. Declaration public MaterialProperty Property { get; } Property Value Type Description MaterialProperty"
  },
  "api/VRLabs.SimpleShaderInspectors.AdditionalProperty.PropertyName.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.AdditionalProperty.PropertyName.html",
    "title": "Property PropertyName | Simple Shader Inspectors Documentation",
    "keywords": "Property PropertyName PropertyName String containing the additional property name. Declaration public string PropertyName { get; } Property Value Type Description String"
  },
  "api/VRLabs.SimpleShaderInspectors.ChainableAttribute.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.ChainableAttribute.-ctor.html",
    "title": "Constructor ChainableAttribute | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ChainableAttribute ChainableAttribute() Declaration public ChainableAttribute()"
  },
  "api/VRLabs.SimpleShaderInspectors.ChainableAttribute.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.ChainableAttribute.html",
    "title": "Class ChainableAttribute | Simple Shader Inspectors Documentation",
    "keywords": "Class ChainableAttribute Attribute for properties that is used when generating chainables. Inheritance Object Attribute ChainableAttribute Implements _Attribute Namespace : VRLabs.SimpleShaderInspectors Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class ChainableAttribute : Attribute, _Attribute Remarks The attribute by itself does nothing, but it is used by the chainables generator tool to generate extension methods for properties that have it Constructors Name Description ChainableAttribute()"
  },
  "api/VRLabs.SimpleShaderInspectors.Chainables.AddPropertyControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Chainables.AddPropertyControl.html",
    "title": "Method AddPropertyControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddPropertyControl AddPropertyControl(IControlContainer, String) Declaration public static PropertyControl AddPropertyControl(this IControlContainer container, string propertyName) Parameters Type Name Description IControlContainer container String propertyName Returns Type Description PropertyControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Chainables.Alias.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Chainables.Alias.html",
    "title": "Method Alias | Simple Shader Inspectors Documentation",
    "keywords": "Method Alias Alias<T>(T, String) Set a custom alias for control localization. Declaration public static T Alias<T>(this T control, string alias) where T : SimpleControl Parameters Type Name Description T control The control this extension method is used on. String alias Name used for localization. Returns Type Description T The control modified. Type Parameters Name Description T Type of the control. Has to be child of SimpleControl."
  },
  "api/VRLabs.SimpleShaderInspectors.Chainables.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Chainables.html",
    "title": "Class Chainables | Simple Shader Inspectors Documentation",
    "keywords": "Class Chainables Static class containing all control extension methods in the base namespace of Simple Shader Inspectors. Inheritance Object Chainables Namespace : VRLabs.SimpleShaderInspectors Syntax public static class Chainables Methods Name Description AddPropertyControl(IControlContainer, String) Alias<T>(T, String) Set a custom alias for control localization. SetEnabled<T>(T, Boolean) Set if the control is enabled. SetVisibility<T>(T, Boolean) Set if the control is visible."
  },
  "api/VRLabs.SimpleShaderInspectors.Chainables.SetEnabled.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Chainables.SetEnabled.html",
    "title": "Method SetEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Method SetEnabled SetEnabled<T>(T, Boolean) Set if the control is enabled. Declaration public static T SetEnabled<T>(this T control, bool enabled) where T : SimpleControl Parameters Type Name Description T control The control this extension method is used on. Boolean enabled If the control is enabled. Returns Type Description T The control modified. Type Parameters Name Description T Type of the control. Has to be child of SimpleControl."
  },
  "api/VRLabs.SimpleShaderInspectors.Chainables.SetVisibility.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Chainables.SetVisibility.html",
    "title": "Method SetVisibility | Simple Shader Inspectors Documentation",
    "keywords": "Method SetVisibility SetVisibility<T>(T, Boolean) Set if the control is visible. Declaration public static T SetVisibility<T>(this T control, bool visible) where T : SimpleControl Parameters Type Name Description T control The control this extension method is used on. Boolean visible If the control is visible. Returns Type Description T The control modified. Type Parameters Name Description T Type of the control. Has to be child of SimpleControl."
  },
  "api/VRLabs.SimpleShaderInspectors.ComputeShaders.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.ComputeShaders.html",
    "title": "Class ComputeShaders | Simple Shader Inspectors Documentation",
    "keywords": "Class ComputeShaders Default compute shader assets and settings natively available in Simple Shader Inspectors. Inheritance Object ComputeShaders Namespace : VRLabs.SimpleShaderInspectors Syntax public static class ComputeShaders Properties Name Description RGBAPacker Compute shader that packs 4 texture channels into a single texture. RGBAPackerSettings default input settings for the RGBAPacker compute shader."
  },
  "api/VRLabs.SimpleShaderInspectors.ComputeShaders.RGBAPacker.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.ComputeShaders.RGBAPacker.html",
    "title": "Property RGBAPacker | Simple Shader Inspectors Documentation",
    "keywords": "Property RGBAPacker RGBAPacker Compute shader that packs 4 texture channels into a single texture. Declaration public static ComputeShader RGBAPacker { get; } Property Value Type Description ComputeShader"
  },
  "api/VRLabs.SimpleShaderInspectors.ComputeShaders.RGBAPackerSettings.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.ComputeShaders.RGBAPackerSettings.html",
    "title": "Property RGBAPackerSettings | Simple Shader Inspectors Documentation",
    "keywords": "Property RGBAPackerSettings RGBAPackerSettings default input settings for the RGBAPacker compute shader. Declaration public static string RGBAPackerSettings { get; } Property Value Type Description String"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddColorControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddColorControl.html",
    "title": "Method AddColorControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddColorControl AddColorControl(IControlContainer, String, Boolean) Declaration public static ColorControl AddColorControl(this IControlContainer container, string propertyName, bool showAlphaValue = true) Parameters Type Name Description IControlContainer container String propertyName Boolean showAlphaValue Returns Type Description ColorControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddControlContainer.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddControlContainer.html",
    "title": "Method AddControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControlContainer AddControlContainer(IControlContainer) Declaration public static ControlContainer AddControlContainer(this IControlContainer container) Parameters Type Name Description IControlContainer container Returns Type Description ControlContainer"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddEnumControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddEnumControl.html",
    "title": "Method AddEnumControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddEnumControl AddEnumControl<TEnum>(IControlContainer, String) Declaration public static EnumControl<TEnum> AddEnumControl<TEnum>(this IControlContainer container, string propertyName) where TEnum : Enum Parameters Type Name Description IControlContainer container String propertyName Returns Type Description EnumControl <TEnum> Type Parameters Name Description TEnum"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddGradientTextureControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddGradientTextureControl.html",
    "title": "Method AddGradientTextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddGradientTextureControl AddGradientTextureControl(IControlContainer, String, String) Declaration public static GradientTextureControl AddGradientTextureControl(this IControlContainer container, string propertyName, string colorPropertyName = null) Parameters Type Name Description IControlContainer container String propertyName String colorPropertyName Returns Type Description GradientTextureControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddKeywordToggleControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddKeywordToggleControl.html",
    "title": "Method AddKeywordToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddKeywordToggleControl AddKeywordToggleControl(IControlContainer, String) Declaration public static KeywordToggleControl AddKeywordToggleControl(this IControlContainer container, string keyword) Parameters Type Name Description IControlContainer container String keyword Returns Type Description KeywordToggleControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddKeywordToggleListControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddKeywordToggleListControl.html",
    "title": "Method AddKeywordToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddKeywordToggleListControl AddKeywordToggleListControl(IControlContainer, String) Declaration public static KeywordToggleListControl AddKeywordToggleListControl(this IControlContainer container, string keyword) Parameters Type Name Description IControlContainer container String keyword Returns Type Description KeywordToggleListControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddLabelControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddLabelControl.html",
    "title": "Method AddLabelControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddLabelControl AddLabelControl(IControlContainer, String) Declaration public static LabelControl AddLabelControl(this IControlContainer container, string alias) Parameters Type Name Description IControlContainer container String alias Returns Type Description LabelControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddLightmapEmissionControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddLightmapEmissionControl.html",
    "title": "Method AddLightmapEmissionControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddLightmapEmissionControl AddLightmapEmissionControl(IControlContainer) Declaration public static LightmapEmissionControl AddLightmapEmissionControl(this IControlContainer container) Parameters Type Name Description IControlContainer container Returns Type Description LightmapEmissionControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddSpaceControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddSpaceControl.html",
    "title": "Method AddSpaceControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddSpaceControl AddSpaceControl(IControlContainer, Int32) Declaration public static SpaceControl AddSpaceControl(this IControlContainer container, int space = 0) Parameters Type Name Description IControlContainer container Int32 space Returns Type Description SpaceControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddTextureControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddTextureControl.html",
    "title": "Method AddTextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddTextureControl AddTextureControl(IControlContainer, String, String, String) Declaration public static TextureControl AddTextureControl(this IControlContainer container, string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description IControlContainer container String propertyName String extraPropertyName1 String extraPropertyName2 Returns Type Description TextureControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddTextureGeneratorControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddTextureGeneratorControl.html",
    "title": "Method AddTextureGeneratorControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddTextureGeneratorControl AddTextureGeneratorControl(IControlContainer, String, String, String) Declaration public static TextureGeneratorControl AddTextureGeneratorControl(this IControlContainer container, string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description IControlContainer container String propertyName String extraPropertyName1 String extraPropertyName2 Returns Type Description TextureGeneratorControl AddTextureGeneratorControl(IControlContainer, ComputeShader, String, String, String, String) Declaration public static TextureGeneratorControl AddTextureGeneratorControl(this IControlContainer container, ComputeShader compute, string computeOptionsJson, string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description IControlContainer container ComputeShader compute String computeOptionsJson String propertyName String extraPropertyName1 String extraPropertyName2 Returns Type Description TextureGeneratorControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddTilingAndOffsetControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddTilingAndOffsetControl.html",
    "title": "Method AddTilingAndOffsetControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddTilingAndOffsetControl AddTilingAndOffsetControl(IControlContainer, String) Declaration public static TilingAndOffsetControl AddTilingAndOffsetControl(this IControlContainer container, string propertyName) Parameters Type Name Description IControlContainer container String propertyName Returns Type Description TilingAndOffsetControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddToggleControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddToggleControl.html",
    "title": "Method AddToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddToggleControl AddToggleControl(IControlContainer, String, Single, Single) Declaration public static ToggleControl AddToggleControl(this IControlContainer container, string propertyName, float falseValue = 0F, float trueValue = 1F) Parameters Type Name Description IControlContainer container String propertyName Single falseValue Single trueValue Returns Type Description ToggleControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddToggleListControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddToggleListControl.html",
    "title": "Method AddToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddToggleListControl AddToggleListControl(IControlContainer, String, Single, Single) Declaration public static ToggleListControl AddToggleListControl(this IControlContainer container, string propertyName, float falseValue = 0F, float trueValue = 1F) Parameters Type Name Description IControlContainer container String propertyName Single falseValue Single trueValue Returns Type Description ToggleListControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddVectorControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddVectorControl.html",
    "title": "Method AddVectorControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddVectorControl AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Declaration public static VectorControl AddVectorControl(this IControlContainer container, string propertyName, bool isXVisible = true, bool isYVisible = true, bool isZVisible = true, bool isWVisible = true) Parameters Type Name Description IControlContainer container String propertyName Boolean isXVisible Boolean isYVisible Boolean isZVisible Boolean isWVisible Returns Type Description VectorControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddVertexStreamsControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddVertexStreamsControl.html",
    "title": "Method AddVertexStreamsControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddVertexStreamsControl AddVertexStreamsControl(IControlContainer, String) Declaration public static VertexStreamsControl AddVertexStreamsControl(this IControlContainer container, string alias) Parameters Type Name Description IControlContainer container String alias Returns Type Description VertexStreamsControl"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.html",
    "title": "Class Chainables | Simple Shader Inspectors Documentation",
    "keywords": "Class Chainables Inheritance Object Chainables Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public static class Chainables Methods Name Description AddColorControl(IControlContainer, String, Boolean) AddControlContainer(IControlContainer) AddEnumControl<TEnum>(IControlContainer, String) AddGradientTextureControl(IControlContainer, String, String) AddKeywordToggleControl(IControlContainer, String) AddKeywordToggleListControl(IControlContainer, String) AddLabelControl(IControlContainer, String) AddLightmapEmissionControl(IControlContainer) AddSpaceControl(IControlContainer, Int32) AddTextureControl(IControlContainer, String, String, String) AddTextureGeneratorControl(IControlContainer, String, String, String) AddTextureGeneratorControl(IControlContainer, ComputeShader, String, String, String, String) AddTilingAndOffsetControl(IControlContainer, String) AddToggleControl(IControlContainer, String, Single, Single) AddToggleListControl(IControlContainer, String, Single, Single) AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) AddVertexStreamsControl(IControlContainer, String) SetGeneratorButtonColor<T>(T, Color) SetGeneratorButtonStyle<T>(T, GUIStyle) SetGeneratorColor<T>(T, Color) SetGeneratorInputColor<T>(T, Color) SetGeneratorInputStyle<T>(T, GUIStyle) SetGeneratorSaveButtonColor<T>(T, Color) SetGeneratorSaveButtonStyle<T>(T, GUIStyle) SetGeneratorStyle<T>(T, GUIStyle) SetGradientButtonColor<T>(T, Color) SetGradientButtonStyle<T>(T, GUIStyle) SetGradientEditorColor<T>(T, Color) SetGradientEditorStyle<T>(T, GUIStyle) SetGradientSaveButtonColor<T>(T, Color) SetGradientSaveButtonStyle<T>(T, GUIStyle) SetHasHDRColor<T>(T, Boolean) SetLabelStyle<T>(T, GUIStyle) SetShowAlphaValue<T>(T, Boolean) SetShowUvOptions<T>(T, Boolean) SetUVAreaColor<T>(T, Color) SetUVAreaStyle<T>(T, GUIStyle) SetUVButtonColor<T>(T, Color) SetUVButtonStyle<T>(T, GUIStyle)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorButtonColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorButtonColor.html",
    "title": "Method SetGeneratorButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorButtonColor SetGeneratorButtonColor<T>(T, Color) Declaration public static T SetGeneratorButtonColor<T>(this T control, Color property) where T : TextureGeneratorControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorButtonStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorButtonStyle.html",
    "title": "Method SetGeneratorButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorButtonStyle SetGeneratorButtonStyle<T>(T, GUIStyle) Declaration public static T SetGeneratorButtonStyle<T>(this T control, GUIStyle property) where T : TextureGeneratorControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorColor.html",
    "title": "Method SetGeneratorColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorColor SetGeneratorColor<T>(T, Color) Declaration public static T SetGeneratorColor<T>(this T control, Color property) where T : TextureGeneratorControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorInputColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorInputColor.html",
    "title": "Method SetGeneratorInputColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorInputColor SetGeneratorInputColor<T>(T, Color) Declaration public static T SetGeneratorInputColor<T>(this T control, Color property) where T : TextureGeneratorControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorInputStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorInputStyle.html",
    "title": "Method SetGeneratorInputStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorInputStyle SetGeneratorInputStyle<T>(T, GUIStyle) Declaration public static T SetGeneratorInputStyle<T>(this T control, GUIStyle property) where T : TextureGeneratorControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorSaveButtonColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorSaveButtonColor.html",
    "title": "Method SetGeneratorSaveButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorSaveButtonColor SetGeneratorSaveButtonColor<T>(T, Color) Declaration public static T SetGeneratorSaveButtonColor<T>(this T control, Color property) where T : TextureGeneratorControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorSaveButtonStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorSaveButtonStyle.html",
    "title": "Method SetGeneratorSaveButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorSaveButtonStyle SetGeneratorSaveButtonStyle<T>(T, GUIStyle) Declaration public static T SetGeneratorSaveButtonStyle<T>(this T control, GUIStyle property) where T : TextureGeneratorControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGeneratorStyle.html",
    "title": "Method SetGeneratorStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorStyle SetGeneratorStyle<T>(T, GUIStyle) Declaration public static T SetGeneratorStyle<T>(this T control, GUIStyle property) where T : TextureGeneratorControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGradientButtonColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGradientButtonColor.html",
    "title": "Method SetGradientButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGradientButtonColor SetGradientButtonColor<T>(T, Color) Declaration public static T SetGradientButtonColor<T>(this T control, Color property) where T : GradientTextureControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGradientButtonStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGradientButtonStyle.html",
    "title": "Method SetGradientButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGradientButtonStyle SetGradientButtonStyle<T>(T, GUIStyle) Declaration public static T SetGradientButtonStyle<T>(this T control, GUIStyle property) where T : GradientTextureControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGradientEditorColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGradientEditorColor.html",
    "title": "Method SetGradientEditorColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGradientEditorColor SetGradientEditorColor<T>(T, Color) Declaration public static T SetGradientEditorColor<T>(this T control, Color property) where T : GradientTextureControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGradientEditorStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGradientEditorStyle.html",
    "title": "Method SetGradientEditorStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGradientEditorStyle SetGradientEditorStyle<T>(T, GUIStyle) Declaration public static T SetGradientEditorStyle<T>(this T control, GUIStyle property) where T : GradientTextureControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGradientSaveButtonColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGradientSaveButtonColor.html",
    "title": "Method SetGradientSaveButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGradientSaveButtonColor SetGradientSaveButtonColor<T>(T, Color) Declaration public static T SetGradientSaveButtonColor<T>(this T control, Color property) where T : GradientTextureControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGradientSaveButtonStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetGradientSaveButtonStyle.html",
    "title": "Method SetGradientSaveButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGradientSaveButtonStyle SetGradientSaveButtonStyle<T>(T, GUIStyle) Declaration public static T SetGradientSaveButtonStyle<T>(this T control, GUIStyle property) where T : GradientTextureControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetHasHDRColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetHasHDRColor.html",
    "title": "Method SetHasHDRColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetHasHDRColor SetHasHDRColor<T>(T, Boolean) Declaration public static T SetHasHDRColor<T>(this T control, bool property) where T : TextureControl Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetLabelStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetLabelStyle.html",
    "title": "Method SetLabelStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetLabelStyle SetLabelStyle<T>(T, GUIStyle) Declaration public static T SetLabelStyle<T>(this T control, GUIStyle property) where T : LabelControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetShowAlphaValue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetShowAlphaValue.html",
    "title": "Method SetShowAlphaValue | Simple Shader Inspectors Documentation",
    "keywords": "Method SetShowAlphaValue SetShowAlphaValue<T>(T, Boolean) Declaration public static T SetShowAlphaValue<T>(this T control, bool property) where T : ColorControl Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetShowUvOptions.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetShowUvOptions.html",
    "title": "Method SetShowUvOptions | Simple Shader Inspectors Documentation",
    "keywords": "Method SetShowUvOptions SetShowUvOptions<T>(T, Boolean) Declaration public static T SetShowUvOptions<T>(this T control, bool property) where T : TextureControl Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetUVAreaColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetUVAreaColor.html",
    "title": "Method SetUVAreaColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetUVAreaColor SetUVAreaColor<T>(T, Color) Declaration public static T SetUVAreaColor<T>(this T control, Color property) where T : TextureControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetUVAreaStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetUVAreaStyle.html",
    "title": "Method SetUVAreaStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetUVAreaStyle SetUVAreaStyle<T>(T, GUIStyle) Declaration public static T SetUVAreaStyle<T>(this T control, GUIStyle property) where T : TextureControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetUVButtonColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetUVButtonColor.html",
    "title": "Method SetUVButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetUVButtonColor SetUVButtonColor<T>(T, Color) Declaration public static T SetUVButtonColor<T>(this T control, Color property) where T : TextureControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetUVButtonStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Chainables.SetUVButtonStyle.html",
    "title": "Method SetUVButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetUVButtonStyle SetUVButtonStyle<T>(T, GUIStyle) Declaration public static T SetUVButtonStyle<T>(this T control, GUIStyle property) where T : TextureControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.-ctor.html",
    "title": "Constructor ColorControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ColorControl ColorControl(String, Boolean) Default constructor of ColorControl Declaration public ColorControl(string propertyName, bool showAlphaValue = true) Parameters Type Name Description String propertyName Material property name. Boolean showAlphaValue Show alpha value in the color picker, Optional (default: true)."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.html",
    "title": "Class ColorControl | Simple Shader Inspectors Documentation",
    "keywords": "Class ColorControl Represents a control for a color property. Inheritance Object SimpleControl PropertyControl ColorControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class ColorControl : PropertyControl Remarks It is the control to use whenever there's a need to display a color material property. Examples Initialize the control inside the inspector: // initialize a color control that does not show the alpha value in the field. this.AddColorControl(\"_ExampleColorProperty\", false); Constructors Name Description ColorControl(String, Boolean) Default constructor of ColorControl Properties Name Description SelectedColor Selected color of the property stored in this control. ShowAlphaValue Boolean that determines if the color picker and the color field should show the alpha value. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) Chainables.SetShowAlphaValue<T>(T, Boolean)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.SelectedColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.SelectedColor.html",
    "title": "Property SelectedColor | Simple Shader Inspectors Documentation",
    "keywords": "Property SelectedColor SelectedColor Selected color of the property stored in this control. Declaration public Color SelectedColor { get; } Property Value Type Description Color The currently selected color."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.ShowAlphaValue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.ShowAlphaValue.html",
    "title": "Property ShowAlphaValue | Simple Shader Inspectors Documentation",
    "keywords": "Property ShowAlphaValue ShowAlphaValue Boolean that determines if the color picker and the color field should show the alpha value. Declaration [Chainable] public bool ShowAlphaValue { get; set; } Property Value Type Description Boolean True if the control should show the alpha value, false otherwise (default: true)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.AddControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls Declaration public void AddControl(SimpleControl control) Parameters Type Name Description SimpleControl control Control to add. Implements IControlContainer.AddControl(SimpleControl)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.Controls.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls under this control. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > All controls that have been added by extension methods."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.-ctor.html",
    "title": "Constructor ControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ControlContainer ControlContainer() Default constructor of ControlContainer . Declaration public ControlContainer() Remarks Since this control does not need an alias, no alias strings are needed, and the alias will be set as \"\"."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.GetControlList.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Implementation needed by IControlContainer to get the object's controls list. Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > Controls Implements IControlContainer.GetControlList()"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.html",
    "title": "Class ControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Class ControlContainer Represents a group of controls. Inheritance Object SimpleControl ControlContainer Implements IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class ControlContainer : SimpleControl, IControlContainer Remarks This control has no UI for itself, instead it just displays all controls it has inside itself. It can be useful whenever you need to enable, disable or, in general, manage an entire group of controls at once. Since it has no UI, it does not need an alias, and setting one would not do much. Examples Example Usage: // Create control ControlContainer control = this.AddControlContainer(); // Add controls inside of it control.AddPropertyControl(\"_ExampleProperty\"); control.AddColorControl(\"_ExampleColor\"); Constructors Name Description ControlContainer() Default constructor of ControlContainer . Properties Name Description Controls List of controls under this control. Methods Name Description AddControl(SimpleControl) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls ControlGUI(MaterialEditor) Draws the control represented by this object. GetControlList() Implementation needed by IControlContainer to get the object's controls list. Extension Methods Chainables.AddPropertyControl(IControlContainer, String) Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean) Chainables.AddControlContainer(IControlContainer) Chainables.AddEnumControl<TEnum>(IControlContainer, String) Chainables.AddGradientTextureControl(IControlContainer, String, String) Chainables.AddKeywordToggleControl(IControlContainer, String) Chainables.AddKeywordToggleListControl(IControlContainer, String) Chainables.AddLabelControl(IControlContainer, String) Chainables.AddLightmapEmissionControl(IControlContainer) Chainables.AddSpaceControl(IControlContainer, Int32) Chainables.AddTextureControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, ComputeShader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single) Chainables.AddToggleListControl(IControlContainer, String, Single, Single) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Chainables.AddVertexStreamsControl(IControlContainer, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Chainables.AddActivatableSection(IControlContainer, String, Single, Single) Chainables.AddOrderedSectionGroup(IControlContainer, String) Chainables.AddSection(IControlContainer, String, Single, Single) Chainables.AddSection(IControlContainer)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.-ctor.html",
    "title": "Constructor EnumControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor EnumControl EnumControl(String) Default constructor of EnumControl<TEnum> Declaration public EnumControl(string propertyName) Parameters Type Name Description String propertyName Material property name."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.html",
    "title": "Class EnumControl<TEnum> | Simple Shader Inspectors Documentation",
    "keywords": "Class EnumControl<TEnum> Represents a control with options based on an enum Inheritance Object SimpleControl PropertyControl EnumControl<TEnum> Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class EnumControl<TEnum> : PropertyControl where TEnum : Enum Type Parameters TEnum Type of enum used by the control Remarks With this control you can make selectors that are based on an enum, without the need to have an array of strings for options, since the enum name will be used instead. Examples Example usage: //... public enum ExampleEnum { Option1, Option2, Option3 } //... // Inside the controls declarations this.AddEnumControl<ExampleEnum>(\"_ExampleProperty\"); The value of the material property will be the index of the enum. Constructors Name Description EnumControl(String) Default constructor of EnumControl<TEnum> Properties Name Description SelectedOption Option currently selected. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.SelectedOption.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.SelectedOption.html",
    "title": "Property SelectedOption | Simple Shader Inspectors Documentation",
    "keywords": "Property SelectedOption SelectedOption Option currently selected. Declaration public TEnum SelectedOption { get; } Property Value Type Description TEnum Currently selected option of type TEnum"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.AdditionalContent.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.AdditionalContent.html",
    "title": "Property AdditionalContent | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalContent AdditionalContent Implementation of IAdditionalLocalization for the additional localization strings. Declaration public AdditionalLocalization[] AdditionalContent { get; set; } Property Value Type Description AdditionalLocalization [] Array of AdditionalLocalization objects. Implements IAdditionalLocalization.AdditionalContent Remarks The localized content array will have the following object names: [0]: GradientOpenEditor [1]: GradientColorLabel [2]: GradientTimeLabel [3]: GradientRampSizeLabel [4]: GradientBlendModeLabel [5]: GradientSaveButton [6]: GradientCancelButton"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides TextureControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.-ctor.html",
    "title": "Constructor GradientTextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor GradientTextureControl GradientTextureControl(String, String) Default constructor. Declaration public GradientTextureControl(string propertyName, string colorPropertyName = null) Parameters Type Name Description String propertyName Name of the gradient texture property. String colorPropertyName Name of the relative color property (default: null)."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientButtonColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientButtonColor.html",
    "title": "Property GradientButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientButtonColor GradientButtonColor Background color used to display the gradient editor button. Declaration [Chainable] public Color GradientButtonColor { get; set; } Property Value Type Description Color Color used."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientButtonStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientButtonStyle.html",
    "title": "Property GradientButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientButtonStyle GradientButtonStyle Style used to display the gradient editor button. Declaration [Chainable] public GUIStyle GradientButtonStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientEditorColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientEditorColor.html",
    "title": "Property GradientEditorColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientEditorColor GradientEditorColor Background color used to display the gradient editor background. Declaration [Chainable] public Color GradientEditorColor { get; set; } Property Value Type Description Color Color used."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientEditorStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientEditorStyle.html",
    "title": "Property GradientEditorStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientEditorStyle GradientEditorStyle Style used to display the gradient editor background. Declaration [Chainable] public GUIStyle GradientEditorStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientSaveButtonColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientSaveButtonColor.html",
    "title": "Property GradientSaveButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientSaveButtonColor GradientSaveButtonColor Background color used to display the gradient editor save button. Declaration [Chainable] public Color GradientSaveButtonColor { get; set; } Property Value Type Description Color Color used."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientSaveButtonStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientSaveButtonStyle.html",
    "title": "Property GradientSaveButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientSaveButtonStyle GradientSaveButtonStyle Style used to display the gradient editor save button. Declaration [Chainable] public GUIStyle GradientSaveButtonStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.html",
    "title": "Class GradientTextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Class GradientTextureControl Control that handles a gradient texture with a gradient editor included. Inheritance Object SimpleControl PropertyControl TextureControl GradientTextureControl Implements IAdditionalProperties IAdditionalLocalization Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class GradientTextureControl : TextureControl, IAdditionalProperties, IAdditionalLocalization Remarks This advanced control is a TextureControl specialized for gradient textures. It embeds an editor for generating or modifying gradients into textures, enabling the user to create and previewing gradients in real time without leaving the inspector. It can also include a color property. Examples Example usage: this.AddGradientTextureControl(\"_exampleGradientTexture\", \"_ExampleColor\"); Constructors Name Description GradientTextureControl(String, String) Default constructor. Properties Name Description AdditionalContent Implementation of IAdditionalLocalization for the additional localization strings. GradientButtonColor Background color used to display the gradient editor button. GradientButtonStyle Style used to display the gradient editor button. GradientEditorColor Background color used to display the gradient editor background. GradientEditorStyle Style used to display the gradient editor background. GradientSaveButtonColor Background color used to display the gradient editor save button. GradientSaveButtonStyle Style used to display the gradient editor save button. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) AdditionalContentExtensions.InitializeLocalizationWithNames(IAdditionalLocalization, String[]) Chainables.SetGradientButtonStyle<T>(T, GUIStyle) Chainables.SetGradientSaveButtonStyle<T>(T, GUIStyle) Chainables.SetGradientEditorStyle<T>(T, GUIStyle) Chainables.SetGradientButtonColor<T>(T, Color) Chainables.SetGradientSaveButtonColor<T>(T, Color) Chainables.SetGradientEditorColor<T>(T, Color) Chainables.SetShowUvOptions<T>(T, Boolean) Chainables.SetHasHDRColor<T>(T, Boolean) Chainables.SetUVButtonStyle<T>(T, GUIStyle) Chainables.SetUVAreaStyle<T>(T, GUIStyle) Chainables.SetUVButtonColor<T>(T, Color) Chainables.SetUVAreaColor<T>(T, Color)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.GradientWidth.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.GradientWidth.html",
    "title": "Enum GradientWidth | Simple Shader Inspectors Documentation",
    "keywords": "Enum GradientWidth Supported gradient widths Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public enum GradientWidth Fields Name Description L_1024 M_512 S_256 XL_2048 XS_128 XXL_4096"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors.Controls | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors.Controls Classes Chainables ColorControl Represents a control for a color property. ControlContainer Represents a group of controls. EnumControl<TEnum> Represents a control with options based on an enum GradientTextureControl Control that handles a gradient texture with a gradient editor included. KeywordToggleControl Represents a control with a checkbox for toggling a keyword on and off. KeywordToggleListControl Represents a control with a checkbox for setting a keyword. Also shows and hides a list of controls based on its state. LabelControl Represents a label without any property. LightmapEmissionControl Control that handles the lightmap Emission Property of the material. SpaceControl Represents an empty space. TextureControl Represents a control for a texture property with possibility to inline 2 extra properties. TextureGeneratorControl Represents a control for a texture property with possibility to inline 2 extra properties. Also includes a texture generator. TextureGeneratorHelper Helper class for TextureGeneratorControl. TilingAndOffsetControl Represents a control for a texture tiling and offset field. ToggleControl Represents a control with a checkbox for setting a float property to 2 defined values. ToggleListControl Represents a control with a checkbox for setting a float property to 2 defined values. Also shows and hides a list of controls based on its state. VectorControl Represents a vector control. VertexStreamsControl Control for viewing and setting particle vertex streams used Enums GradientWidth Supported gradient widths InputType Type of input for the texture generator. Resolution"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.InputType.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.InputType.html",
    "title": "Enum InputType | Simple Shader Inspectors Documentation",
    "keywords": "Enum InputType Type of input for the texture generator. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public enum InputType Fields Name Description Color Texture"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.-ctor.html",
    "title": "Constructor KeywordToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor KeywordToggleControl KeywordToggleControl(String) Default constructor of KeywordToggleControl Declaration public KeywordToggleControl(string keyword) Parameters Type Name Description String keyword Name of the keyword to toggle."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.HasKeywordUpdated.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.HasKeywordUpdated.html",
    "title": "Property HasKeywordUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasKeywordUpdated HasKeywordUpdated Boolean indicating if the keyword state has updated. Declaration public bool HasKeywordUpdated { get; protected set; } Property Value Type Description Boolean True if the keyword value has been updated, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.html",
    "title": "Class KeywordToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Class KeywordToggleControl Represents a control with a checkbox for toggling a keyword on and off. Inheritance Object SimpleControl KeywordToggleControl KeywordToggleListControl KeywordToggleListControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class KeywordToggleControl : SimpleControl Remarks With this control, by passing the keyword name you can have a toggle that will enable and disable the keyword on the material. Examples Example usage: this.AddKeywordToggleControl(\"KEYWORD_TO_TOGGLE\"); By default the keyword name will be used as Alias. Constructors Name Description KeywordToggleControl(String) Default constructor of KeywordToggleControl Fields Name Description keyword Keyword that this toggle sets on and off, once set by the constructor it cannot be changed. Properties Name Description HasKeywordUpdated Boolean indicating if the keyword state has updated. ToggleEnabled Boolean indicating if the toggle is enabled or not. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.keyword.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.keyword.html",
    "title": "Field keyword | Simple Shader Inspectors Documentation",
    "keywords": "Field keyword Keyword that this toggle sets on and off, once set by the constructor it cannot be changed. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected readonly string keyword Returns String String containing the keyword."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.ToggleEnabled.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.ToggleEnabled.html",
    "title": "Property ToggleEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Property ToggleEnabled ToggleEnabled Boolean indicating if the toggle is enabled or not. Declaration public bool ToggleEnabled { get; protected set; } Property Value Type Description Boolean True if the toggle is enabled, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.AddControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls Declaration public void AddControl(SimpleControl control) Parameters Type Name Description SimpleControl control Control to add. Implements IControlContainer.AddControl(SimpleControl)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides KeywordToggleControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.Controls.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls under this control. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > All controls that have been added by extension methods."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.-ctor.html",
    "title": "Constructor KeywordToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor KeywordToggleListControl KeywordToggleListControl(String) Default constructor of KeywordToggleListControl Declaration public KeywordToggleListControl(string keyword) Parameters Type Name Description String keyword Keyword name."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.GetControlList.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Implementation needed by IControlContainer to get the object's controls list. Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > Controls Implements IControlContainer.GetControlList()"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.html",
    "title": "Class KeywordToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Class KeywordToggleListControl Represents a control with a checkbox for setting a keyword. Also shows and hides a list of controls based on its state. Inheritance Object SimpleControl KeywordToggleControl KeywordToggleListControl Implements IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class KeywordToggleListControl : KeywordToggleControl, IControlContainer Remarks it's effectively a combination of KeywordToggleControl and ControlContainer , where the controls list is enabled based on the keyword enable state. Examples Example usage: this.AddKeywordToggleListControl(\"KEYWORD_TO_TOGGLE\"); Constructors Name Description KeywordToggleListControl(String) Default constructor of KeywordToggleListControl Properties Name Description Controls List of controls under this control. Methods Name Description AddControl(SimpleControl) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls ControlGUI(MaterialEditor) Draws the control represented by this object. GetControlList() Implementation needed by IControlContainer to get the object's controls list. Extension Methods Chainables.AddPropertyControl(IControlContainer, String) Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean) Chainables.AddControlContainer(IControlContainer) Chainables.AddEnumControl<TEnum>(IControlContainer, String) Chainables.AddGradientTextureControl(IControlContainer, String, String) Chainables.AddKeywordToggleControl(IControlContainer, String) Chainables.AddKeywordToggleListControl(IControlContainer, String) Chainables.AddLabelControl(IControlContainer, String) Chainables.AddLightmapEmissionControl(IControlContainer) Chainables.AddSpaceControl(IControlContainer, Int32) Chainables.AddTextureControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, ComputeShader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single) Chainables.AddToggleListControl(IControlContainer, String, Single, Single) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Chainables.AddVertexStreamsControl(IControlContainer, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Chainables.AddActivatableSection(IControlContainer, String, Single, Single) Chainables.AddOrderedSectionGroup(IControlContainer, String) Chainables.AddSection(IControlContainer, String, Single, Single) Chainables.AddSection(IControlContainer)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.-ctor.html",
    "title": "Constructor LabelControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor LabelControl LabelControl(String) Default constructor of LabelControl . Declaration public LabelControl(string alias) Parameters Type Name Description String alias Alias of the control."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.html",
    "title": "Class LabelControl | Simple Shader Inspectors Documentation",
    "keywords": "Class LabelControl Represents a label without any property. Inheritance Object SimpleControl LabelControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class LabelControl : SimpleControl Remarks It can be seen ad the Simple Shader Inspectors version of EditorGUILayout.LabelField , with the advantage that it uses Simple Shader Inspectors' localization system for the label string. It is required to give an alias to the control, since it doesn't have anything that it could use as a default. Examples Example usage: this.AddLabelControl(\"AliasToUse\"); Constructors Name Description LabelControl(String) Default constructor of LabelControl . Properties Name Description LabelStyle Style used for the label control. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) Chainables.SetLabelStyle<T>(T, GUIStyle)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.LabelStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.LabelStyle.html",
    "title": "Property LabelStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property LabelStyle LabelStyle Style used for the label control. Declaration [Chainable] public GUIStyle LabelStyle { get; set; } Property Value Type Description GUIStyle GUIStyle for the label."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.-ctor.html",
    "title": "Constructor LightmapEmissionControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor LightmapEmissionControl LightmapEmissionControl() Default constructor of LightmapEmissionControl . Declaration public LightmapEmissionControl()"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.HasLightmapEmissionUpdated.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.HasLightmapEmissionUpdated.html",
    "title": "Property HasLightmapEmissionUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasLightmapEmissionUpdated HasLightmapEmissionUpdated Boolean indicating if the lightmap emission property has updated. Declaration public bool HasLightmapEmissionUpdated { get; protected set; } Property Value Type Description Boolean True if the lightmap emission value has been updated, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.html",
    "title": "Class LightmapEmissionControl | Simple Shader Inspectors Documentation",
    "keywords": "Class LightmapEmissionControl Control that handles the lightmap Emission Property of the material. Inheritance Object SimpleControl LightmapEmissionControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class LightmapEmissionControl : SimpleControl Remarks Is the Simple Shader Inspectors equivalent of MaterialEditor.LightmapEmissionProperty . It does not need an alias in order to work. Examples Example usage: this.AddLightmapEmissionControl(); Constructors Name Description LightmapEmissionControl() Default constructor of LightmapEmissionControl . Properties Name Description HasLightmapEmissionUpdated Boolean indicating if the lightmap emission property has updated. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Resolution.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Resolution.html",
    "title": "Enum Resolution | Simple Shader Inspectors Documentation",
    "keywords": "Enum Resolution Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public enum Resolution Fields Name Description L_1024x1024 M_512x512 S_256x256 XL_2048x2048 XS_128x128 XXL_4096x4096"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.AdditionalProperties.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.AdditionalProperties.html",
    "title": "Property AdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalProperties AdditionalProperties Extra properties array. Implementation needed by IAdditionalProperties . Declaration public AdditionalProperty[] AdditionalProperties { get; set; } Property Value Type Description AdditionalProperty [] Array of AdditionalProperties . Implements IAdditionalProperties.AdditionalProperties Remarks The Array will contain the following material properties: [0]: Property used for the enabled state"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides Section.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.-ctor.html",
    "title": "Constructor ActivatableSection | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ActivatableSection ActivatableSection(String, String, Single, Single, Single, Single) Constructor of ActivatableSection used when creating a property driven ActivatableSection. Declaration public ActivatableSection(string activatePropertyName, string showPropertyName, float enableValue = 1F, float disableValue = 0F, float hideValue = 0F, float showValue = 1F) Parameters Type Name Description String activatePropertyName Material property that will drive the section enable state String showPropertyName Material property that will drive the section open state Single enableValue Float value that the material property will have if the section is disabled, optional (default: 0). Single disableValue Float value that the material property will have if the section is enabled, optional (default: 1). Single hideValue Float value that the material property will have if the section is collapsed, optional (default: 0). Single showValue Float value that the material property will have if the section is visible, optional (default: 1). ActivatableSection(String, Single, Single) Default constructor of ActivatableSection . Declaration public ActivatableSection(string activatePropertyName, float enableValue = 1F, float disableValue = 0F) Parameters Type Name Description String activatePropertyName Material property that will drive the section enable state Single enableValue Float value that the material property will have if the section is disabled, optional (default: 0). Single disableValue Float value that the material property will have if the section is enabled, optional (default: 1)."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.disableValue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.disableValue.html",
    "title": "Field disableValue | Simple Shader Inspectors Documentation",
    "keywords": "Field disableValue Float value that the Show bool gets converted if false. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected float disableValue Returns Single Value of the activate material property when the section is disabled."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.Enabled.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.Enabled.html",
    "title": "Property Enabled | Simple Shader Inspectors Documentation",
    "keywords": "Property Enabled Enabled Boolean indicating if the section is enabled or not. Declaration public bool Enabled { get; protected set; } Property Value Type Description Boolean True if the section is active, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.enableValue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.enableValue.html",
    "title": "Field enableValue | Simple Shader Inspectors Documentation",
    "keywords": "Field enableValue Float value that the Show bool gets converted if true. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected float enableValue Returns Single Value of the activate material property when the section is enabled."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.HasActivatePropertyUpdated.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.HasActivatePropertyUpdated.html",
    "title": "Property HasActivatePropertyUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasActivatePropertyUpdated HasActivatePropertyUpdated Has the property been updated this cycle? Declaration public bool HasActivatePropertyUpdated { get; protected set; } Property Value Type Description Boolean True if the activate property has been updated, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.html",
    "title": "Class ActivatableSection | Simple Shader Inspectors Documentation",
    "keywords": "Class ActivatableSection Section that can be activated or deactivated thanks to a checkbox inside the header. Inheritance Object SimpleControl PropertyControl Section ActivatableSection Implements IControlContainer INonAnimatableProperty IAdditionalProperties Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class ActivatableSection : Section, IControlContainer, INonAnimatableProperty, IAdditionalProperties Remarks This more advanced version of Section has in addition one checkbox to enable/disable the content of the section. When disabled the content is still visible, but cannot be edited. This section requires at least one material property to drive the enabled/disabled state, and it will use this material property name as alias. Examples Example usage: // Add an activatable section this.AddActivatableSection(\"_EnableProperty\"); // Add an activatable section, the property will have the values of 2 and 4 when off and on respectively this.AddActivatableSection(\"_EnableProperty\", 2, 4); // Add an activatable section with the show state being driven by a property this.AddActivatableSection(\"_EnableProperty\", \"_ShowProperty\"); // Add an activatable section, the properties will have set values when on and off, 2/4 for the enable one and 0/1 of the show one. this.AddActivatableSection(\"_EnableProperty\", \"_ShowProperty\", 2, 4, 0, 1); Constructors Name Description ActivatableSection(String, Single, Single) Default constructor of ActivatableSection . ActivatableSection(String, String, Single, Single, Single, Single) Constructor of ActivatableSection used when creating a property driven ActivatableSection. Fields Name Description disableValue Float value that the Show bool gets converted if false. enableValue Float value that the Show bool gets converted if true. Properties Name Description AdditionalProperties Extra properties array. Implementation needed by IAdditionalProperties . Enabled Boolean indicating if the section is enabled or not. HasActivatePropertyUpdated Has the property been updated this cycle? Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.AddPropertyControl(IControlContainer, String) Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean) Chainables.AddControlContainer(IControlContainer) Chainables.AddEnumControl<TEnum>(IControlContainer, String) Chainables.AddGradientTextureControl(IControlContainer, String, String) Chainables.AddKeywordToggleControl(IControlContainer, String) Chainables.AddKeywordToggleListControl(IControlContainer, String) Chainables.AddLabelControl(IControlContainer, String) Chainables.AddLightmapEmissionControl(IControlContainer) Chainables.AddSpaceControl(IControlContainer, Int32) Chainables.AddTextureControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, ComputeShader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single) Chainables.AddToggleListControl(IControlContainer, String, Single, Single) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Chainables.AddVertexStreamsControl(IControlContainer, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Chainables.AddActivatableSection(IControlContainer, String, Single, Single) Chainables.AddOrderedSectionGroup(IControlContainer, String) Chainables.AddSection(IControlContainer, String, Single, Single) Chainables.AddSection(IControlContainer) Chainables.SetLabelStyle<T>(T, GUIStyle) Chainables.SetBackgroundStyle<T>(T, GUIStyle) Chainables.SetAreControlsInHeader<T>(T, Boolean) Chainables.SetIsPropertyAnimatable<T>(T, Boolean) Chainables.SetShowFoldoutArrow<T>(T, Boolean) Chainables.SetBackgroundColor<T>(T, Color)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddActivatableSection.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddActivatableSection.html",
    "title": "Method AddActivatableSection | Simple Shader Inspectors Documentation",
    "keywords": "Method AddActivatableSection AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Declaration public static ActivatableSection AddActivatableSection(this IControlContainer container, string activatePropertyName, string showPropertyName, float enableValue = 1F, float disableValue = 0F, float hideValue = 0F, float showValue = 1F) Parameters Type Name Description IControlContainer container String activatePropertyName String showPropertyName Single enableValue Single disableValue Single hideValue Single showValue Returns Type Description ActivatableSection AddActivatableSection(IControlContainer, String, Single, Single) Declaration public static ActivatableSection AddActivatableSection(this IControlContainer container, string activatePropertyName, float enableValue = 1F, float disableValue = 0F) Parameters Type Name Description IControlContainer container String activatePropertyName Single enableValue Single disableValue Returns Type Description ActivatableSection"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddOrderedSection.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddOrderedSection.html",
    "title": "Method AddOrderedSection | Simple Shader Inspectors Documentation",
    "keywords": "Method AddOrderedSection AddOrderedSection(OrderedSectionGroup, String, String, Single, Single, Single, Single) Declaration public static OrderedSection AddOrderedSection(this OrderedSectionGroup container, string activatePropertyName, string showPropertyName, float enableValue = 1F, float disableValue = 0F, float showValue = 1F, float hideValue = 0F) Parameters Type Name Description OrderedSectionGroup container String activatePropertyName String showPropertyName Single enableValue Single disableValue Single showValue Single hideValue Returns Type Description OrderedSection AddOrderedSection(OrderedSectionGroup, String, Single, Single) Declaration public static OrderedSection AddOrderedSection(this OrderedSectionGroup container, string activatePropertyName, float enableValue = 1F, float disableValue = 0F) Parameters Type Name Description OrderedSectionGroup container String activatePropertyName Single enableValue Single disableValue Returns Type Description OrderedSection"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddOrderedSectionGroup.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddOrderedSectionGroup.html",
    "title": "Method AddOrderedSectionGroup | Simple Shader Inspectors Documentation",
    "keywords": "Method AddOrderedSectionGroup AddOrderedSectionGroup(IControlContainer, String) Declaration public static OrderedSectionGroup AddOrderedSectionGroup(this IControlContainer container, string alias) Parameters Type Name Description IControlContainer container String alias Returns Type Description OrderedSectionGroup"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddSection.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddSection.html",
    "title": "Method AddSection | Simple Shader Inspectors Documentation",
    "keywords": "Method AddSection AddSection(IControlContainer, String, Single, Single) Declaration public static Section AddSection(this IControlContainer container, string propertyName, float hideValue = 0F, float showValue = 1F) Parameters Type Name Description IControlContainer container String propertyName Single hideValue Single showValue Returns Type Description Section AddSection(IControlContainer) Declaration public static Section AddSection(this IControlContainer container) Parameters Type Name Description IControlContainer container Returns Type Description Section"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.html",
    "title": "Class Chainables | Simple Shader Inspectors Documentation",
    "keywords": "Class Chainables Inheritance Object Chainables Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public static class Chainables Methods Name Description AddActivatableSection(IControlContainer, String, Single, Single) AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) AddOrderedSection(OrderedSectionGroup, String, Single, Single) AddOrderedSection(OrderedSectionGroup, String, String, Single, Single, Single, Single) AddOrderedSectionGroup(IControlContainer, String) AddSection(IControlContainer) AddSection(IControlContainer, String, Single, Single) SetAreControlsInHeader<T>(T, Boolean) SetBackgroundColor<T>(T, Color) SetBackgroundStyle<T>(T, GUIStyle) SetDeleteColor<T>(T, Color) SetDeleteIcon<T>(T, GUIStyle) SetDownColor<T>(T, Color) SetDownIcon<T>(T, GUIStyle) SetIsPropertyAnimatable<T>(T, Boolean) SetLabelStyle<T>(T, GUIStyle) SetShowFoldoutArrow<T>(T, Boolean) SetUpColor<T>(T, Color) SetUpIcon<T>(T, GUIStyle)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetAreControlsInHeader.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetAreControlsInHeader.html",
    "title": "Method SetAreControlsInHeader | Simple Shader Inspectors Documentation",
    "keywords": "Method SetAreControlsInHeader SetAreControlsInHeader<T>(T, Boolean) Declaration public static T SetAreControlsInHeader<T>(this T control, bool property) where T : Section Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetBackgroundColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetBackgroundColor.html",
    "title": "Method SetBackgroundColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetBackgroundColor SetBackgroundColor<T>(T, Color) Declaration public static T SetBackgroundColor<T>(this T control, Color property) where T : Section Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetBackgroundStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetBackgroundStyle.html",
    "title": "Method SetBackgroundStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetBackgroundStyle SetBackgroundStyle<T>(T, GUIStyle) Declaration public static T SetBackgroundStyle<T>(this T control, GUIStyle property) where T : Section Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetDeleteColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetDeleteColor.html",
    "title": "Method SetDeleteColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetDeleteColor SetDeleteColor<T>(T, Color) Declaration public static T SetDeleteColor<T>(this T control, Color property) where T : OrderedSection Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetDeleteIcon.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetDeleteIcon.html",
    "title": "Method SetDeleteIcon | Simple Shader Inspectors Documentation",
    "keywords": "Method SetDeleteIcon SetDeleteIcon<T>(T, GUIStyle) Declaration public static T SetDeleteIcon<T>(this T control, GUIStyle property) where T : OrderedSection Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetDownColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetDownColor.html",
    "title": "Method SetDownColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetDownColor SetDownColor<T>(T, Color) Declaration public static T SetDownColor<T>(this T control, Color property) where T : OrderedSection Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetDownIcon.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetDownIcon.html",
    "title": "Method SetDownIcon | Simple Shader Inspectors Documentation",
    "keywords": "Method SetDownIcon SetDownIcon<T>(T, GUIStyle) Declaration public static T SetDownIcon<T>(this T control, GUIStyle property) where T : OrderedSection Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetIsPropertyAnimatable.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetIsPropertyAnimatable.html",
    "title": "Method SetIsPropertyAnimatable | Simple Shader Inspectors Documentation",
    "keywords": "Method SetIsPropertyAnimatable SetIsPropertyAnimatable<T>(T, Boolean) Declaration public static T SetIsPropertyAnimatable<T>(this T control, bool property) where T : Section Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetLabelStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetLabelStyle.html",
    "title": "Method SetLabelStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetLabelStyle SetLabelStyle<T>(T, GUIStyle) Declaration public static T SetLabelStyle<T>(this T control, GUIStyle property) where T : Section Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetShowFoldoutArrow.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetShowFoldoutArrow.html",
    "title": "Method SetShowFoldoutArrow | Simple Shader Inspectors Documentation",
    "keywords": "Method SetShowFoldoutArrow SetShowFoldoutArrow<T>(T, Boolean) Declaration public static T SetShowFoldoutArrow<T>(this T control, bool property) where T : Section Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetUpColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetUpColor.html",
    "title": "Method SetUpColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetUpColor SetUpColor<T>(T, Color) Declaration public static T SetUpColor<T>(this T control, Color property) where T : OrderedSection Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetUpIcon.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.SetUpIcon.html",
    "title": "Method SetUpIcon | Simple Shader Inspectors Documentation",
    "keywords": "Method SetUpIcon SetUpIcon<T>(T, GUIStyle) Declaration public static T SetUpIcon<T>(this T control, GUIStyle property) where T : OrderedSection Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors.Controls.Sections | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors.Controls.Sections Classes ActivatableSection Section that can be activated or deactivated thanks to a checkbox inside the header. Chainables OrderedSection Section that can be hidden and ordered when in groups. OrderedSectionGroup Control that contains a list of OrderedSections and manages their lifecycle. Section Represents a grouping of controls with an header that can be folded in and out."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.AdditionalProperties.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.AdditionalProperties.html",
    "title": "Property AdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalProperties AdditionalProperties Extra properties array. Implementation needed by IAdditionalProperties . Declaration public AdditionalProperty[] AdditionalProperties { get; set; } Property Value Type Description AdditionalProperty [] Array of AdditionalProperties . Implements IAdditionalProperties.AdditionalProperties Remarks The Array will contain the following material properties: [0]: Property used for the enabled state"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides Section.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.-ctor.html",
    "title": "Constructor OrderedSection | Simple Shader Inspectors Documentation",
    "keywords": "Constructor OrderedSection OrderedSection(String, String, Single, Single, Single, Single) Constructor of OrderedSection used when creating a property driven OrderedSection. Declaration [LimitAccessScope(typeof(OrderedSectionGroup))] public OrderedSection(string activatePropertyName, string showPropertyName, float enableValue = 1F, float disableValue = 0F, float showValue = 1F, float hideValue = 0F) Parameters Type Name Description String activatePropertyName Material property that will drive the section enable state String showPropertyName Material property that will drive the section open state Single enableValue Float value that the material property will have if the section is enabled, optional (default: 1). Single disableValue Float value that the material property will have if the section is disabled, optional (default: 0). Single showValue Float value that the material property will have if the section is visible, optional (default: 1). Single hideValue Float value that the material property will have if the section is collapsed, optional (default: 0). OrderedSection(String, Single, Single) Default constructor of OrderedSection . Declaration [LimitAccessScope(typeof(OrderedSectionGroup))] public OrderedSection(string activatePropertyName, float enableValue = 1F, float disableValue = 0F) Parameters Type Name Description String activatePropertyName Material property that will drive the section enable state Single enableValue Float value that the material property will have if the section is enabled, optional (default: 1). Single disableValue Float value that the material property will have if the section is disabled, optional (default: 0)."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DeleteColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DeleteColor.html",
    "title": "Property DeleteColor | Simple Shader Inspectors Documentation",
    "keywords": "Property DeleteColor DeleteColor Color of the delete icon. Declaration [Chainable] public Color DeleteColor { get; set; } Property Value Type Description Color Color used to display the down icon."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DeleteIcon.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DeleteIcon.html",
    "title": "Property DeleteIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property DeleteIcon DeleteIcon Style for the delete icon. Declaration [Chainable] public GUIStyle DeleteIcon { get; set; } Property Value Type Description GUIStyle GUIStyle used for the delete icon display."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.disableValue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.disableValue.html",
    "title": "Field disableValue | Simple Shader Inspectors Documentation",
    "keywords": "Field disableValue Float value that the Show bool gets converted if false. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected float disableValue Returns Single Value of the activate material property when the section is disabled."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DownColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DownColor.html",
    "title": "Property DownColor | Simple Shader Inspectors Documentation",
    "keywords": "Property DownColor DownColor Color of the down icon. Declaration [Chainable] public Color DownColor { get; set; } Property Value Type Description Color Color used to display the down icon."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DownIcon.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DownIcon.html",
    "title": "Property DownIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property DownIcon DownIcon Style for the down icon. Declaration [Chainable] public GUIStyle DownIcon { get; set; } Property Value Type Description GUIStyle GUIStyle used for the down icon display."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DrawSideButtons.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DrawSideButtons.html",
    "title": "Method DrawSideButtons | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawSideButtons DrawSideButtons() Draws and handles the up, down and delete icon on the side. Declaration protected void DrawSideButtons()"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.Enabled.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.Enabled.html",
    "title": "Property Enabled | Simple Shader Inspectors Documentation",
    "keywords": "Property Enabled Enabled Boolean indicating if the section is enabled or not. Declaration public bool Enabled { get; protected set; } Property Value Type Description Boolean True if the section is enabled, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.enableValue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.enableValue.html",
    "title": "Field enableValue | Simple Shader Inspectors Documentation",
    "keywords": "Field enableValue Float value that the Show bool gets converted if true. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected float enableValue Returns Single Value of the activate material property when the section is enabled."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasActivatePropertyUpdated.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasActivatePropertyUpdated.html",
    "title": "Property HasActivatePropertyUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasActivatePropertyUpdated HasActivatePropertyUpdated Boolean indicating if the activate property has been updated this cycle. Declaration public bool HasActivatePropertyUpdated { get; protected set; } Property Value Type Description Boolean True if the activate property has been updated, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasSectionTurnedOn.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasSectionTurnedOn.html",
    "title": "Property HasSectionTurnedOn | Simple Shader Inspectors Documentation",
    "keywords": "Property HasSectionTurnedOn HasSectionTurnedOn Boolean indicating if the section has turned on this cycle. Declaration public bool HasSectionTurnedOn { get; set; } Property Value Type Description Boolean True if the section has just been turned on, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.html",
    "title": "Class OrderedSection | Simple Shader Inspectors Documentation",
    "keywords": "Class OrderedSection Section that can be hidden and ordered when in groups. Inheritance Object SimpleControl PropertyControl Section OrderedSection Implements IControlContainer INonAnimatableProperty IAdditionalProperties Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class OrderedSection : Section, IControlContainer, INonAnimatableProperty, IAdditionalProperties Remarks It can be considered an additional evolution of ActivatableSection , but it actually inherits directly from Section . Functionality wise it acts pretty much the same as ActivatableSection , the main difference is in how it does that. Namely instead of having a disabled state, it gets disabled it completely disappears from the ui, resulting in an overall cleaner ui. Unlike other types of sections, this one cannot be added directly to the inspector, instead it has to be added to an OrderedSectionGroup in order to work properly. In fact the only way to enable a previously disabled OrderedSection in the ui is by using the add button provided by OrderedSectionGroup Another quirk of this type of section is that it can be moved up or down relative to the sections of the same group, letting the user order them in whichever way they see fit best. Examples Example usage: // Adds an OrderedSection to the current inspector OrderedSectionGroup group = this.AddOrderedSectionGroup(\"GroupAlias\"); // Adds an OrderedSection using the specified property as activation property group.AddOrderedSection(\"_ActivateProperty\"); // Adds an OrderedSection using the specified property as activation property, // the values for activation are set to 2-3 respectively when disabled and enabled group.AddOrderedSection(\"_ActivateProperty\", 2, 3); // Adds an OrderedSection using the specified properties for activation and folding state group.AddOrderedSection(\"_ActivateProperty\", \"_ShowProperty\"); // Adds an OrderedSection using the specified properties for activation and folding state, // the values for activation are set to 2-3 respectively when disabled and enabled // the values for folding are set to 4-6 respectively when folded in and out group.AddOrderedSection(\"_ActivateProperty\", \"_ShowProperty\", 2, 3, 4, 6); Constructors Name Description OrderedSection(String, Single, Single) Default constructor of OrderedSection . OrderedSection(String, String, Single, Single, Single, Single) Constructor of OrderedSection used when creating a property driven OrderedSection. Fields Name Description disableValue Float value that the Show bool gets converted if false. enableValue Float value that the Show bool gets converted if true. PushState Indicates if the section should be pushed up or down relative to its neighbour sections. Properties Name Description AdditionalProperties Extra properties array. Implementation needed by IAdditionalProperties . DeleteColor Color of the delete icon. DeleteIcon Style for the delete icon. DownColor Color of the down icon. DownIcon Style for the down icon. Enabled Boolean indicating if the section is enabled or not. HasActivatePropertyUpdated Boolean indicating if the activate property has been updated this cycle. HasSectionTurnedOn Boolean indicating if the section has turned on this cycle. SectionPosition integer indicating the position of the section in the group. UpColor Color of the up icon. UpIcon Style for the up icon. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. DrawSideButtons() Draws and handles the up, down and delete icon on the side. PredrawUpdate(MaterialEditor) Extension Methods Chainables.AddPropertyControl(IControlContainer, String) Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean) Chainables.AddControlContainer(IControlContainer) Chainables.AddEnumControl<TEnum>(IControlContainer, String) Chainables.AddGradientTextureControl(IControlContainer, String, String) Chainables.AddKeywordToggleControl(IControlContainer, String) Chainables.AddKeywordToggleListControl(IControlContainer, String) Chainables.AddLabelControl(IControlContainer, String) Chainables.AddLightmapEmissionControl(IControlContainer) Chainables.AddSpaceControl(IControlContainer, Int32) Chainables.AddTextureControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, ComputeShader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single) Chainables.AddToggleListControl(IControlContainer, String, Single, Single) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Chainables.AddVertexStreamsControl(IControlContainer, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Chainables.AddActivatableSection(IControlContainer, String, Single, Single) Chainables.SetUpIcon<T>(T, GUIStyle) Chainables.SetDownIcon<T>(T, GUIStyle) Chainables.SetDeleteIcon<T>(T, GUIStyle) Chainables.SetUpColor<T>(T, Color) Chainables.SetDownColor<T>(T, Color) Chainables.SetDeleteColor<T>(T, Color) Chainables.AddOrderedSectionGroup(IControlContainer, String) Chainables.AddSection(IControlContainer, String, Single, Single) Chainables.AddSection(IControlContainer) Chainables.SetLabelStyle<T>(T, GUIStyle) Chainables.SetBackgroundStyle<T>(T, GUIStyle) Chainables.SetAreControlsInHeader<T>(T, Boolean) Chainables.SetIsPropertyAnimatable<T>(T, Boolean) Chainables.SetShowFoldoutArrow<T>(T, Boolean) Chainables.SetBackgroundColor<T>(T, Color)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.PredrawUpdate.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.PredrawUpdate.html",
    "title": "Method PredrawUpdate | Simple Shader Inspectors Documentation",
    "keywords": "Method PredrawUpdate PredrawUpdate(MaterialEditor) Declaration public void PredrawUpdate(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.PushState.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.PushState.html",
    "title": "Field PushState | Simple Shader Inspectors Documentation",
    "keywords": "Field PushState Indicates if the section should be pushed up or down relative to its neighbour sections. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public int PushState Returns Int32 0 when not moving, -1 when needs to go up, 1 when needs to go down."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.SectionPosition.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.SectionPosition.html",
    "title": "Property SectionPosition | Simple Shader Inspectors Documentation",
    "keywords": "Property SectionPosition SectionPosition integer indicating the position of the section in the group. Declaration public int SectionPosition { get; set; } Property Value Type Description Int32"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.UpColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.UpColor.html",
    "title": "Property UpColor | Simple Shader Inspectors Documentation",
    "keywords": "Property UpColor UpColor Color of the up icon. Declaration [Chainable] public Color UpColor { get; set; } Property Value Type Description Color Color used to display the up icon."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.UpIcon.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.UpIcon.html",
    "title": "Property UpIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property UpIcon UpIcon Style for the up icon. Declaration [Chainable] public GUIStyle UpIcon { get; set; } Property Value Type Description GUIStyle GUIStyle used for the up icon display."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.AddControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(OrderedSection) Implementation needed by IControlContainer<T> to add controls. All controls added are stored in Controls Declaration public void AddControl(OrderedSection control) Parameters Type Name Description OrderedSection control Control to add. Implements IControlContainer<T>.AddControl(T)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ButtonColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ButtonColor.html",
    "title": "Property ButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property ButtonColor ButtonColor Color of the add button. Declaration public Color ButtonColor { get; set; } Property Value Type Description Color Color used when displaying the add button."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ButtonStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ButtonStyle.html",
    "title": "Property ButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property ButtonStyle ButtonStyle Style for the add button. Declaration public GUIStyle ButtonStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the add button."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the group of sections. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.Controls.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of available Ordered Sections. Declaration public List<OrderedSection> Controls { get; set; } Property Value Type Description List < OrderedSection > A list of OrderedSection containing the sections this control manages."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.-ctor.html",
    "title": "Constructor OrderedSectionGroup | Simple Shader Inspectors Documentation",
    "keywords": "Constructor OrderedSectionGroup OrderedSectionGroup(String) Default constructor of OrderedSectionGroup . Declaration public OrderedSectionGroup(string alias) Parameters Type Name Description String alias Alias of the control"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.GetControlList.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Implementation needed by IControlContainer<T> to get the object's controls list. Declaration public IEnumerable<OrderedSection> GetControlList() Returns Type Description IEnumerable < OrderedSection > Controls Implements IControlContainer<T>.GetControlList()"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.html",
    "title": "Class OrderedSectionGroup | Simple Shader Inspectors Documentation",
    "keywords": "Class OrderedSectionGroup Control that contains a list of OrderedSections and manages their lifecycle. Inheritance Object SimpleControl OrderedSectionGroup Implements IControlContainer < OrderedSection > IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class OrderedSectionGroup : SimpleControl, IControlContainer<OrderedSection>, IControlContainer Remarks The main purpose of this control is to manage multiple OrderedSection controls, reordering them when needed, and provide a button to enable disabled ones In practice this control is what makes the entire ordered section system work, and that's the reason to why controls of type OrderedSection can only live inside this control. Examples Example usage: OrderedSectionGroup group = this.AddOrderedSectionGroup(\"GroupAlias\"); group.AddOrderedSection(\"_ActivateProperty1\"); group.AddOrderedSection(\"_ActivateProperty2\"); group.AddOrderedSection(\"_ActivateProperty3\"); Constructors Name Description OrderedSectionGroup(String) Default constructor of OrderedSectionGroup . Properties Name Description ButtonColor Color of the add button. ButtonStyle Style for the add button. Controls List of available Ordered Sections. Methods Name Description AddControl(OrderedSection) Implementation needed by IControlContainer<T> to add controls. All controls added are stored in Controls ControlGUI(MaterialEditor) Draws the group of sections. GetControlList() Implementation needed by IControlContainer<T> to get the object's controls list. Explicit Interface Implementations Name Description IControlContainer.AddControl(SimpleControl) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls only if the parameter is of type OrderedSection IControlContainer.GetControlList() Implementation needed by IControlContainer to get the object's controls list. Extension Methods Chainables.AddPropertyControl(IControlContainer, String) Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean) Chainables.AddControlContainer(IControlContainer) Chainables.AddEnumControl<TEnum>(IControlContainer, String) Chainables.AddGradientTextureControl(IControlContainer, String, String) Chainables.AddKeywordToggleControl(IControlContainer, String) Chainables.AddKeywordToggleListControl(IControlContainer, String) Chainables.AddLabelControl(IControlContainer, String) Chainables.AddLightmapEmissionControl(IControlContainer) Chainables.AddSpaceControl(IControlContainer, Int32) Chainables.AddTextureControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, ComputeShader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single) Chainables.AddToggleListControl(IControlContainer, String, Single, Single) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Chainables.AddVertexStreamsControl(IControlContainer, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Chainables.AddActivatableSection(IControlContainer, String, Single, Single) Chainables.AddOrderedSection(OrderedSectionGroup, String, String, Single, Single, Single, Single) Chainables.AddOrderedSection(OrderedSectionGroup, String, Single, Single) Chainables.AddOrderedSectionGroup(IControlContainer, String) Chainables.AddSection(IControlContainer, String, Single, Single) Chainables.AddSection(IControlContainer)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.VRLabs-SimpleShaderInspectors-IControlContainer-AddControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.VRLabs-SimpleShaderInspectors-IControlContainer-AddControl.html",
    "title": "Method IControlContainer.AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method IControlContainer.AddControl IControlContainer.AddControl(SimpleControl) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls only if the parameter is of type OrderedSection Declaration void IControlContainer.AddControl(SimpleControl control) Parameters Type Name Description SimpleControl control Control to add. Implements IControlContainer.AddControl(SimpleControl)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.VRLabs-SimpleShaderInspectors-IControlContainer-GetControlList.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.VRLabs-SimpleShaderInspectors-IControlContainer-GetControlList.html",
    "title": "Method IControlContainer.GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method IControlContainer.GetControlList IControlContainer.GetControlList() Implementation needed by IControlContainer to get the object's controls list. Declaration IEnumerable<SimpleControl> IControlContainer.GetControlList() Returns Type Description IEnumerable < SimpleControl > Controls Implements IControlContainer.GetControlList()"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.AddControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl) Declaration public void AddControl(SimpleControl control) Parameters Type Name Description SimpleControl control Implements IControlContainer.AddControl(SimpleControl)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.AreControlsInHeader.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.AreControlsInHeader.html",
    "title": "Property AreControlsInHeader | Simple Shader Inspectors Documentation",
    "keywords": "Property AreControlsInHeader AreControlsInHeader Boolean indicating if child controls will be inside the header background. Declaration [Chainable] public bool AreControlsInHeader { get; set; } Property Value Type Description Boolean True if the child controls are displayed inside the background style of the header, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.BackgroundColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.BackgroundColor.html",
    "title": "Property BackgroundColor | Simple Shader Inspectors Documentation",
    "keywords": "Property BackgroundColor BackgroundColor Background color of the header. Declaration [Chainable] public Color BackgroundColor { get; set; } Property Value Type Description Color Color used when displaying the header background."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.BackgroundStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.BackgroundStyle.html",
    "title": "Property BackgroundStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property BackgroundStyle BackgroundStyle Style of the header background. Declaration [Chainable] public GUIStyle BackgroundStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the header background."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.Controls.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls inside this section. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > List of controls that this section shows/hides."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.-ctor.html",
    "title": "Constructor Section | Simple Shader Inspectors Documentation",
    "keywords": "Constructor Section Section(String, Single, Single) Constructor of Section used when creating a property driven section Declaration public Section(string propertyName, float hideValue = 0F, float showValue = 1F) Parameters Type Name Description String propertyName Material property that will drive the section open state Single hideValue Float value that the material property will have if the section is collapsed, optional (default: 0). Single showValue Float value that the material property will have if the section is visible, optional (default: 1). Section() Default constructor of Section . Declaration public Section()"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.dictionaryKey.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.dictionaryKey.html",
    "title": "Field dictionaryKey | Simple Shader Inspectors Documentation",
    "keywords": "Field dictionaryKey String containing the key value that the section will use for the dictionary. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected string dictionaryKey Returns String The key used for the dictionary value."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.DrawControls.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.DrawControls.html",
    "title": "Method DrawControls | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawControls DrawControls(MaterialEditor) Draws the list of controls that can be hidden by this control. Declaration protected void DrawControls(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.firstCycle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.firstCycle.html",
    "title": "Field firstCycle | Simple Shader Inspectors Documentation",
    "keywords": "Field firstCycle Boolean indicating if it's the first ui update. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected bool firstCycle Returns Boolean True if it's the first UI update, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.GetControlList.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > Implements IControlContainer.GetControlList()"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.hideValue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.hideValue.html",
    "title": "Field hideValue | Simple Shader Inspectors Documentation",
    "keywords": "Field hideValue Float value that the Show bool gets converted if false. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected readonly float hideValue Returns Single Value of the material property when the section is closed."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.html",
    "title": "Class Section | Simple Shader Inspectors Documentation",
    "keywords": "Class Section Represents a grouping of controls with an header that can be folded in and out. Inheritance Object SimpleControl PropertyControl Section ActivatableSection ActivatableSection OrderedSection OrderedSection Implements IControlContainer INonAnimatableProperty Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class Section : PropertyControl, IControlContainer, INonAnimatableProperty Remarks On bigger shaders it may be needed to organize options in categories to make easier for the user to find the option they want to modify. This control makes you able to organize it with ease, by grouping controls under categories with a dedicated title. The folding state can be controlled either by the control alone, or driven by a material property. In this last case the folding state will stay saved between editor sessions. In case a material property isn't used, a default alias is used. This alias is shared between al sections, so you need to override it if you want to use a different string for each section. Examples Example usage: // Adds a section and sets its alias this.AddSection().Alias(\"ExampleAlias\"); // Adds a section that uses a material property for its folding state. this.AddSection(\"_ExampleProperty\"); // Adds a section that uses a material property for its folding state. // When not folded out the property value will be 2, when folded out 6 this.AddSection(\"_ExampleProperty\", 2, 6); Constructors Name Description Section() Default constructor of Section . Section(String, Single, Single) Constructor of Section used when creating a property driven section Fields Name Description dictionaryKey String containing the key value that the section will use for the dictionary. firstCycle Boolean indicating if it's the first ui update. hideValue Float value that the Show bool gets converted if false. showValue Float value that the Show bool gets converted if true. useDictionary Boolean indicating if the section folding state is driven by an internal dictionary or not. It will be true in case you don't use a material property. Properties Name Description AreControlsInHeader Boolean indicating if child controls will be inside the header background. BackgroundColor Background color of the header. BackgroundStyle Style of the header background. Controls List of controls inside this section. IsPropertyAnimatable Boolean indicating if the folding state material property is animatable or not. LabelStyle Style of the header label. NonAnimatablePropertyChanged Boolean indicating if the folding state material property needs to be updated. Implementation needed by INonAnimatableProperty . Show Bool indicating if the section is folded out or not. ShowFoldoutArrow Boolean indicating if the foldout arrow is enabled or not. Methods Name Description AddControl(SimpleControl) ControlGUI(MaterialEditor) Draws the control represented by this object. DrawControls(MaterialEditor) Draws the list of controls that can be hidden by this control. GetControlList() SetupEnabled(MaterialEditor) Sets the Enabled boolean to the value currently in the source based on the settings of this control. Should only be used inside ControlGUI(MaterialEditor) . UpdateEnabled(MaterialEditor) Updates the source of the Enabled boolean base on the settings of this control. Should only be used inside ControlGUI(MaterialEditor) . UpdateNonAnimatableProperty(MaterialEditor) Updates properties that should not be animated, implementation needed by INonAnimatableProperty Extension Methods Chainables.AddPropertyControl(IControlContainer, String) Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean) Chainables.AddControlContainer(IControlContainer) Chainables.AddEnumControl<TEnum>(IControlContainer, String) Chainables.AddGradientTextureControl(IControlContainer, String, String) Chainables.AddKeywordToggleControl(IControlContainer, String) Chainables.AddKeywordToggleListControl(IControlContainer, String) Chainables.AddLabelControl(IControlContainer, String) Chainables.AddLightmapEmissionControl(IControlContainer) Chainables.AddSpaceControl(IControlContainer, Int32) Chainables.AddTextureControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, ComputeShader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single) Chainables.AddToggleListControl(IControlContainer, String, Single, Single) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Chainables.AddVertexStreamsControl(IControlContainer, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Chainables.AddActivatableSection(IControlContainer, String, Single, Single) Chainables.AddOrderedSectionGroup(IControlContainer, String) Chainables.AddSection(IControlContainer, String, Single, Single) Chainables.AddSection(IControlContainer) Chainables.SetLabelStyle<T>(T, GUIStyle) Chainables.SetBackgroundStyle<T>(T, GUIStyle) Chainables.SetAreControlsInHeader<T>(T, Boolean) Chainables.SetIsPropertyAnimatable<T>(T, Boolean) Chainables.SetShowFoldoutArrow<T>(T, Boolean) Chainables.SetBackgroundColor<T>(T, Color)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.IsPropertyAnimatable.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.IsPropertyAnimatable.html",
    "title": "Property IsPropertyAnimatable | Simple Shader Inspectors Documentation",
    "keywords": "Property IsPropertyAnimatable IsPropertyAnimatable Boolean indicating if the folding state material property is animatable or not. Declaration [Chainable] public bool IsPropertyAnimatable { get; set; } Property Value Type Description Boolean True if the property can be animated, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.LabelStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.LabelStyle.html",
    "title": "Property LabelStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property LabelStyle LabelStyle Style of the header label. Declaration [Chainable] public GUIStyle LabelStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the header label."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.NonAnimatablePropertyChanged.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.NonAnimatablePropertyChanged.html",
    "title": "Property NonAnimatablePropertyChanged | Simple Shader Inspectors Documentation",
    "keywords": "Property NonAnimatablePropertyChanged NonAnimatablePropertyChanged Boolean indicating if the folding state material property needs to be updated. Implementation needed by INonAnimatableProperty . Declaration public bool NonAnimatablePropertyChanged { get; set; } Property Value Type Description Boolean Implements INonAnimatableProperty.NonAnimatablePropertyChanged"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.SetupEnabled.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.SetupEnabled.html",
    "title": "Method SetupEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Method SetupEnabled SetupEnabled(MaterialEditor) Sets the Enabled boolean to the value currently in the source based on the settings of this control. Should only be used inside ControlGUI(MaterialEditor) . Declaration protected void SetupEnabled(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Remarks This method is available for all section controls inheriting this class and will automatically fetch the current value of the Show boolean based on if the section folding state is handled by a material property or a dictionary value. You should call it inside your override of ControlGUI(MaterialEditor) , possibly at the start of it."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.Show.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.Show.html",
    "title": "Property Show | Simple Shader Inspectors Documentation",
    "keywords": "Property Show Show Bool indicating if the section is folded out or not. Declaration public bool Show { get; protected set; } Property Value Type Description Boolean True if the section is folded out, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ShowFoldoutArrow.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ShowFoldoutArrow.html",
    "title": "Property ShowFoldoutArrow | Simple Shader Inspectors Documentation",
    "keywords": "Property ShowFoldoutArrow ShowFoldoutArrow Boolean indicating if the foldout arrow is enabled or not. Declaration [Chainable] public bool ShowFoldoutArrow { get; set; } Property Value Type Description Boolean True if the foldout arrow in the header is visible, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.showValue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.showValue.html",
    "title": "Field showValue | Simple Shader Inspectors Documentation",
    "keywords": "Field showValue Float value that the Show bool gets converted if true. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected readonly float showValue Returns Single Value of the material property when the section is open."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UpdateEnabled.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UpdateEnabled.html",
    "title": "Method UpdateEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateEnabled UpdateEnabled(MaterialEditor) Updates the source of the Enabled boolean base on the settings of this control. Should only be used inside ControlGUI(MaterialEditor) . Declaration protected void UpdateEnabled(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Remarks This method is available for all section controls inheriting this class and will automatically update the current value of the Show boolean based on if the section folding state is handled by a material property or a dictionary value. You should call it inside your override of ControlGUI(MaterialEditor) , possibly at the end of it."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UpdateNonAnimatableProperty.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UpdateNonAnimatableProperty.html",
    "title": "Method UpdateNonAnimatableProperty | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateNonAnimatableProperty UpdateNonAnimatableProperty(MaterialEditor) Updates properties that should not be animated, implementation needed by INonAnimatableProperty Declaration public virtual void UpdateNonAnimatableProperty(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Implements INonAnimatableProperty.UpdateNonAnimatableProperty(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.useDictionary.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.useDictionary.html",
    "title": "Field useDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Field useDictionary Boolean indicating if the section folding state is driven by an internal dictionary or not. It will be true in case you don't use a material property. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected readonly bool useDictionary Returns Boolean True if it uses the internal dictionary, false when it uses a material property."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.-ctor.html",
    "title": "Constructor SpaceControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor SpaceControl SpaceControl(Int32) Default constructor of LabelControl . Declaration public SpaceControl(int space = 0) Parameters Type Name Description Int32 space"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.html",
    "title": "Class SpaceControl | Simple Shader Inspectors Documentation",
    "keywords": "Class SpaceControl Represents an empty space. Inheritance Object SimpleControl SpaceControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class SpaceControl : SimpleControl Remarks It can be considered the Simple Shader Inspectors equivalent of GUILayout.Space . It does not need an alias in order to work. Examples Example usage: // Adds a space of 1 line worth of pixels this.AddSpaceControl(); // adds a space of 15 pixels this.AddSpaceControl(15); Constructors Name Description SpaceControl(Int32) Default constructor of LabelControl . Properties Name Description Space Amount of space in pixels this control has. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.Space.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.Space.html",
    "title": "Property Space | Simple Shader Inspectors Documentation",
    "keywords": "Property Space Space Amount of space in pixels this control has. Declaration public int Space { get; set; } Property Value Type Description Int32 Pixels of space."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl._hasExtra1.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl._hasExtra1.html",
    "title": "Field _hasExtra1 | Simple Shader Inspectors Documentation",
    "keywords": "Field _hasExtra1 Indicates if the control has the first extra property. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected bool _hasExtra1 Returns Boolean True if the control had the first extra property, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl._hasExtra2.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl._hasExtra2.html",
    "title": "Field _hasExtra2 | Simple Shader Inspectors Documentation",
    "keywords": "Field _hasExtra2 Indicates if the control has the second extra property. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected bool _hasExtra2 Returns Boolean True if the control had the second extra property, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl._isUVButtonPressed.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl._isUVButtonPressed.html",
    "title": "Field _isUVButtonPressed | Simple Shader Inspectors Documentation",
    "keywords": "Field _isUVButtonPressed Indicates if the uv button is pressed and the tiling and offset area is visible. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected bool _isUVButtonPressed Returns Boolean True if the button is pressed, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.AdditionalProperties.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.AdditionalProperties.html",
    "title": "Property AdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalProperties AdditionalProperties Extra properties array. Implementation of IAdditionalProperties . Declaration public AdditionalProperty[] AdditionalProperties { get; set; } Property Value Type Description AdditionalProperty [] List of AdditionalProperty used by this control. Implements IAdditionalProperties.AdditionalProperties Remarks The list will store the following properties: [0]: first extra property. [1]: second extra property."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.-ctor.html",
    "title": "Constructor TextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor TextureControl TextureControl(String, String, String) Default constructor of TextureControl Declaration public TextureControl(string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description String propertyName Material property name. String extraPropertyName1 First additional material property name. Optional. String extraPropertyName2 Second additional material property name. Optional."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.DrawTextureSingleLine.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.DrawTextureSingleLine.html",
    "title": "Method DrawTextureSingleLine | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawTextureSingleLine DrawTextureSingleLine(MaterialEditor) Declaration protected void DrawTextureSingleLine(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.HasHDRColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.HasHDRColor.html",
    "title": "Property HasHDRColor | Simple Shader Inspectors Documentation",
    "keywords": "Property HasHDRColor HasHDRColor Boolean that defines if the control needs to render the second material property as an hdr color field, only works if there is only one extra property and it's a color property. Declaration [Chainable] public bool HasHDRColor { get; set; } Property Value Type Description Boolean True if the color property should have an HDR color field, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.html",
    "title": "Class TextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Class TextureControl Represents a control for a texture property with possibility to inline 2 extra properties. Inheritance Object SimpleControl PropertyControl TextureControl GradientTextureControl GradientTextureControl TextureGeneratorControl TextureGeneratorControl Implements IAdditionalProperties Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class TextureControl : PropertyControl, IAdditionalProperties Remarks It can be considered the Simple Shader Inspector equivalent of MaterialEditor.TexturePropertySingleLine where you can pass a texture property followed by up to 2 additional properties Unlike MaterialEditor.TexturePropertySingleLine it does add the possibility to edit texture tiling and offset, in the form of an optional gear icon on the side (the icon can be changed) Examples Example usage: // Adds a texture control with an additional color and float properties this.AddTextureControl(\"_TextureProperty\", \"_ColorProperty\", \"_FloatProperty\"); // Adds a texture control with an additional color property and editable tiling and offset this.AddTextureControl(\"_TextureProperty\", \"_ColorProperty\").SetShowUvOptions(true); Constructors Name Description TextureControl(String, String, String) Default constructor of TextureControl Fields Name Description _hasExtra1 Indicates if the control has the first extra property. _hasExtra2 Indicates if the control has the second extra property. _isUVButtonPressed Indicates if the uv button is pressed and the tiling and offset area is visible. Properties Name Description AdditionalProperties Extra properties array. Implementation of IAdditionalProperties . HasHDRColor Boolean that defines if the control needs to render the second material property as an hdr color field, only works if there is only one extra property and it's a color property. ShowUvOptions Boolean that defines if the control will show up an additional button to have access to the texture tiling and offset options. UVAreaColor Background color for the uv button. UVAreaStyle Style for the tiling and offset background area. UVButtonColor Color for the tiling and offset button. UVButtonStyle Style for the tiling and offset options button. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. DrawTextureSingleLine(MaterialEditor) Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) Chainables.SetShowUvOptions<T>(T, Boolean) Chainables.SetHasHDRColor<T>(T, Boolean) Chainables.SetUVButtonStyle<T>(T, GUIStyle) Chainables.SetUVAreaStyle<T>(T, GUIStyle) Chainables.SetUVButtonColor<T>(T, Color) Chainables.SetUVAreaColor<T>(T, Color)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.ShowUvOptions.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.ShowUvOptions.html",
    "title": "Property ShowUvOptions | Simple Shader Inspectors Documentation",
    "keywords": "Property ShowUvOptions ShowUvOptions Boolean that defines if the control will show up an additional button to have access to the texture tiling and offset options. Declaration [Chainable] public bool ShowUvOptions { get; set; } Property Value Type Description Boolean True if the control has to show the button for uv tiling and offset, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVAreaColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVAreaColor.html",
    "title": "Property UVAreaColor | Simple Shader Inspectors Documentation",
    "keywords": "Property UVAreaColor UVAreaColor Background color for the uv button. Declaration [Chainable] public Color UVAreaColor { get; set; } Property Value Type Description Color Color used when displaying the background for the tiling and offset area."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVAreaStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVAreaStyle.html",
    "title": "Property UVAreaStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property UVAreaStyle UVAreaStyle Style for the tiling and offset background area. Declaration [Chainable] public GUIStyle UVAreaStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used for the background of the tiling and offset area."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVButtonColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVButtonColor.html",
    "title": "Property UVButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property UVButtonColor UVButtonColor Color for the tiling and offset button. Declaration [Chainable] public Color UVButtonColor { get; set; } Property Value Type Description Color Color used when displaying the tiling and offset button."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVButtonStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVButtonStyle.html",
    "title": "Property UVButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property UVButtonStyle UVButtonStyle Style for the tiling and offset options button. Declaration [Chainable] public GUIStyle UVButtonStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the tiling and offset button."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.AdditionalContent.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.AdditionalContent.html",
    "title": "Property AdditionalContent | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalContent AdditionalContent Additional localization strings. Implementation for IAdditionalLocalization . Declaration public AdditionalLocalization[] AdditionalContent { get; set; } Property Value Type Description AdditionalLocalization [] A list of AdditionalLocalization used by the control. Implements IAdditionalLocalization.AdditionalContent Remarks For this specific control this variable should only be used for reading values and not adding more due to the fact that unlike a usual case scenario, here the additional content is stored in multiple variables and put in a single list only when requested by this property."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides TextureControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.-ctor.html",
    "title": "Constructor TextureGeneratorControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor TextureGeneratorControl TextureGeneratorControl(String, String, String) Default constructor of TextureGeneratorControl Declaration public TextureGeneratorControl(string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description String propertyName Material property name. String extraPropertyName1 First additional material property name. Optional. String extraPropertyName2 Second additional material property name. Optional. TextureGeneratorControl(ComputeShader, String, String, String, String) Default constructor of TextureGeneratorControl Declaration public TextureGeneratorControl(ComputeShader compute, string computeOptionsJson, string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description ComputeShader compute String computeOptionsJson String propertyName Material property name. String extraPropertyName1 First additional material property name. Optional. String extraPropertyName2 Second additional material property name. Optional."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorButtonColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorButtonColor.html",
    "title": "Property GeneratorButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorButtonColor GeneratorButtonColor Background color for the texture generator button. Declaration [Chainable] public Color GeneratorButtonColor { get; set; } Property Value Type Description Color Color used when displaying the generator \"open\" button."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorButtonStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorButtonStyle.html",
    "title": "Property GeneratorButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorButtonStyle GeneratorButtonStyle Style for the texture generator button. Declaration [Chainable] public GUIStyle GeneratorButtonStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the generator \"open\" button."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorColor.html",
    "title": "Property GeneratorColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorColor GeneratorColor Background color for the generator background. Declaration [Chainable] public Color GeneratorColor { get; set; } Property Value Type Description Color Color used when displaying the generator background."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorInputColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorInputColor.html",
    "title": "Property GeneratorInputColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorInputColor GeneratorInputColor Background color for the generator input background. Declaration [Chainable] public Color GeneratorInputColor { get; set; } Property Value Type Description Color Color used when displaying the background of a generator input field."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorInputStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorInputStyle.html",
    "title": "Property GeneratorInputStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorInputStyle GeneratorInputStyle Style for the generator input background. Declaration [Chainable] public GUIStyle GeneratorInputStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the background of a generator input field."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorSaveButtonColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorSaveButtonColor.html",
    "title": "Property GeneratorSaveButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorSaveButtonColor GeneratorSaveButtonColor Background color for the generator save button. Declaration [Chainable] public Color GeneratorSaveButtonColor { get; set; } Property Value Type Description Color Color used when displaying the generator \"save\" button."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorSaveButtonStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorSaveButtonStyle.html",
    "title": "Property GeneratorSaveButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorSaveButtonStyle GeneratorSaveButtonStyle Style for the texture generator save button. Declaration [Chainable] public GUIStyle GeneratorSaveButtonStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the generator \"save\" button."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorStyle.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorStyle.html",
    "title": "Property GeneratorStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorStyle GeneratorStyle Style for the texture generator background. Declaration [Chainable] public GUIStyle GeneratorStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the generator background."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.html",
    "title": "Class TextureGeneratorControl | Simple Shader Inspectors Documentation",
    "keywords": "Class TextureGeneratorControl Represents a control for a texture property with possibility to inline 2 extra properties. Also includes a texture generator. Inheritance Object SimpleControl PropertyControl TextureControl TextureGeneratorControl Implements IAdditionalProperties IAdditionalLocalization Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class TextureGeneratorControl : TextureControl, IAdditionalProperties, IAdditionalLocalization Remarks It is a more complex and specialized version of TextureControl , where on top of the base functionality of TextureControl it also has a fuull blown texture generator. When using it right away the texture generator will default to a simple 4 channel merger where for each channel you can select a texture, select which channel of the texture use, and use that as the channel for the final generated texture. While this is already a great use of the control and a fairly common one (like merging 4 monochrome texture masks) it is just one possible use, since it can load custom compute shaders and relative control input options to go along, enabling you to create your own generator that takes your own defined parameters to get a specific output. Examples Example usage: // Adds a new texture generator control with a texture and color field, using the default merger for the generator this.AddTextureGeneratorControl(\"_TextureProperty\", \"_ColorProperty\"); // Adds a new texture generator control with a texture and color field, using a custom generator this.AddTextureGeneratorControl(myCompute, computeInputJson, \"_TextureProperty\", \"_ColorProperty\"); Constructors Name Description TextureGeneratorControl(String, String, String) Default constructor of TextureGeneratorControl TextureGeneratorControl(ComputeShader, String, String, String, String) Default constructor of TextureGeneratorControl Properties Name Description AdditionalContent Additional localization strings. Implementation for IAdditionalLocalization . GeneratorButtonColor Background color for the texture generator button. GeneratorButtonStyle Style for the texture generator button. GeneratorColor Background color for the generator background. GeneratorInputColor Background color for the generator input background. GeneratorInputStyle Style for the generator input background. GeneratorSaveButtonColor Background color for the generator save button. GeneratorSaveButtonStyle Style for the texture generator save button. GeneratorStyle Style for the texture generator background. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) AdditionalContentExtensions.InitializeLocalizationWithNames(IAdditionalLocalization, String[]) Chainables.SetShowUvOptions<T>(T, Boolean) Chainables.SetHasHDRColor<T>(T, Boolean) Chainables.SetUVButtonStyle<T>(T, GUIStyle) Chainables.SetUVAreaStyle<T>(T, GUIStyle) Chainables.SetUVButtonColor<T>(T, Color) Chainables.SetUVAreaColor<T>(T, Color) Chainables.SetGeneratorButtonStyle<T>(T, GUIStyle) Chainables.SetGeneratorSaveButtonStyle<T>(T, GUIStyle) Chainables.SetGeneratorStyle<T>(T, GUIStyle) Chainables.SetGeneratorInputStyle<T>(T, GUIStyle) Chainables.SetGeneratorButtonColor<T>(T, Color) Chainables.SetGeneratorSaveButtonColor<T>(T, Color) Chainables.SetGeneratorColor<T>(T, Color) Chainables.SetGeneratorInputColor<T>(T, Color)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorHelper.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorHelper.html",
    "title": "Class TextureGeneratorHelper | Simple Shader Inspectors Documentation",
    "keywords": "Class TextureGeneratorHelper Helper class for TextureGeneratorControl. Inheritance Object TextureGeneratorHelper Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public static class TextureGeneratorHelper"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.-ctor.html",
    "title": "Constructor TilingAndOffsetControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor TilingAndOffsetControl TilingAndOffsetControl(String) Default constructor of TilingAndOffsetControl Declaration public TilingAndOffsetControl(string propertyName) Parameters Type Name Description String propertyName Material property name."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.html",
    "title": "Class TilingAndOffsetControl | Simple Shader Inspectors Documentation",
    "keywords": "Class TilingAndOffsetControl Represents a control for a texture tiling and offset field. Inheritance Object SimpleControl PropertyControl TilingAndOffsetControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class TilingAndOffsetControl : PropertyControl Constructors Name Description TilingAndOffsetControl(String) Default constructor of TilingAndOffsetControl Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.-ctor.html",
    "title": "Constructor ToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ToggleControl ToggleControl(String, Single, Single) Default constructor of ToggleControl Declaration public ToggleControl(string propertyName, float falseValue = 0F, float trueValue = 1F) Parameters Type Name Description String propertyName Material property name. Single falseValue Float value that the material property will have if the checkbox is not checked. Optional (default: 0). Single trueValue Float value that the material property will have if the checkbox is checked. Optional (default: 1)."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.falseValue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.falseValue.html",
    "title": "Field falseValue | Simple Shader Inspectors Documentation",
    "keywords": "Field falseValue Float value that the Enabled bool gets converted if false. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected readonly float falseValue Returns Single Float value of the property if the toggle is disabled."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.html",
    "title": "Class ToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Class ToggleControl Represents a control with a checkbox for setting a float property to 2 defined values. Inheritance Object SimpleControl PropertyControl ToggleControl ToggleListControl ToggleListControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class ToggleControl : PropertyControl Remarks This control can be used to set a float property between 2 values, which can come useful when there's a need to toggle on and off features using a float value in shader. Both the enabled and disabled state can be set to give the material property a specific float value. If not set in the constructor they will be set to 0 for disabled and 1 for enabled. Examples Example usage: // adds a toggle that toggles between 0 and 1 this.AddToggleControl(\"_ExampleProperty\"); // adds a toggle that toggles between 3 and 7 this.AddToggleControl(\"_ExampleProperty\", 3, 7); Constructors Name Description ToggleControl(String, Single, Single) Default constructor of ToggleControl Fields Name Description falseValue Float value that the Enabled bool gets converted if false. trueValue Float value that the Enabled bool gets converted if true. Properties Name Description ToggleEnabled Boolean indicating if the toggle is enabled or not. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.ToggleEnabled.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.ToggleEnabled.html",
    "title": "Property ToggleEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Property ToggleEnabled ToggleEnabled Boolean indicating if the toggle is enabled or not. Declaration public bool ToggleEnabled { get; } Property Value Type Description Boolean True if the toggle is enabled, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.trueValue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.trueValue.html",
    "title": "Field trueValue | Simple Shader Inspectors Documentation",
    "keywords": "Field trueValue Float value that the Enabled bool gets converted if true. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected readonly float trueValue Returns Single Float value of the proeprty if the toggle is enabled"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.AddControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls Declaration public void AddControl(SimpleControl control) Parameters Type Name Description SimpleControl control Control to add. Implements IControlContainer.AddControl(SimpleControl)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides ToggleControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.Controls.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls that can be hidden by this control. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl >"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.-ctor.html",
    "title": "Constructor ToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ToggleListControl ToggleListControl(String, Single, Single) Default constructor of ToggleListControl Declaration public ToggleListControl(string propertyName, float falseValue = 0F, float trueValue = 1F) Parameters Type Name Description String propertyName Material property name. Single falseValue Float value that the material property will have if the checkbox is not checked. Optional (default: 0). Single trueValue Float value that the material property will have if the checkbox is checked. Optional (default: 1)."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.GetControlList.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Implementation needed by IControlContainer to get the object's controls list. Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > Controls Implements IControlContainer.GetControlList()"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.html",
    "title": "Class ToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Class ToggleListControl Represents a control with a checkbox for setting a float property to 2 defined values. Also shows and hides a list of controls based on its state. Inheritance Object SimpleControl PropertyControl ToggleControl ToggleListControl Implements IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class ToggleListControl : ToggleControl, IControlContainer Remarks It's effectively a combination of ToggleListControl and ControlContainer , where the controls list is displayed only when the toggle is enabled. Examples Example usage: // adds a toggle that toggles between 0 and 1 this.AddToggleListControl(\"_ExampleProperty\"); // adds a toggle that toggles between 3 and 7 this.AddToggleListControl(\"_ExampleProperty\", 3, 7); Constructors Name Description ToggleListControl(String, Single, Single) Default constructor of ToggleListControl Properties Name Description Controls List of controls that can be hidden by this control. Methods Name Description AddControl(SimpleControl) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls ControlGUI(MaterialEditor) Draws the control represented by this object. GetControlList() Implementation needed by IControlContainer to get the object's controls list. Extension Methods Chainables.AddPropertyControl(IControlContainer, String) Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean) Chainables.AddControlContainer(IControlContainer) Chainables.AddEnumControl<TEnum>(IControlContainer, String) Chainables.AddGradientTextureControl(IControlContainer, String, String) Chainables.AddKeywordToggleControl(IControlContainer, String) Chainables.AddKeywordToggleListControl(IControlContainer, String) Chainables.AddLabelControl(IControlContainer, String) Chainables.AddLightmapEmissionControl(IControlContainer) Chainables.AddSpaceControl(IControlContainer, Int32) Chainables.AddTextureControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, ComputeShader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single) Chainables.AddToggleListControl(IControlContainer, String, Single, Single) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Chainables.AddVertexStreamsControl(IControlContainer, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Chainables.AddActivatableSection(IControlContainer, String, Single, Single) Chainables.AddOrderedSectionGroup(IControlContainer, String) Chainables.AddSection(IControlContainer, String, Single, Single) Chainables.AddSection(IControlContainer)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.-ctor.html",
    "title": "Constructor VectorControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor VectorControl VectorControl(String, Boolean, Boolean, Boolean, Boolean) Default constructor of VectorControl Declaration public VectorControl(string propertyName, bool isXVisible = true, bool isYVisible = true, bool isZVisible = true, bool isWVisible = true) Parameters Type Name Description String propertyName Material property name. Boolean isXVisible Shows the x component. Optional (Default true). Boolean isYVisible Shows the y component. Optional (Default true). Boolean isZVisible Shows the z component. Optional (Default true). Boolean isWVisible Shows the w component. Optional (Default true)."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.html",
    "title": "Class VectorControl | Simple Shader Inspectors Documentation",
    "keywords": "Class VectorControl Represents a vector control. Inheritance Object SimpleControl PropertyControl VectorControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class VectorControl : PropertyControl Remarks While using a PropertyControl for a vector property can work just fine, it will default to displaying all 4 float values, even if the shader property represents a float2 or float3. This is due to unity treating all of them as a Vector4 inside inspectors, resulting on having a 4 float display. With this control you have the ability to fine tune which of the 4 floats to show. This can also be useful if you pack different values into a single Vector4 for various reasons, cause you can just create different vector controls where each one access different parts of the Vector4, so you can manage them independently inside your editor. Examples Example usage: // adds a vector control this.AddVectorControl(\"ExampleVector\"); // adds a vector control where only the y and w values are displayed this.AddVectorControl(\"ExampleVector\", false, true, false, true); Constructors Name Description VectorControl(String, Boolean, Boolean, Boolean, Boolean) Default constructor of VectorControl Properties Name Description IsWVisible Visibility state of the w value IsXVisible Visibility state of the x value IsYVisible Visibility state of the y value IsZVisible Visibility state of the z value Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsWVisible.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsWVisible.html",
    "title": "Property IsWVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsWVisible IsWVisible Visibility state of the w value Declaration public bool IsWVisible { get; protected set; } Property Value Type Description Boolean True if the w value is visible, false otherwise"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsXVisible.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsXVisible.html",
    "title": "Property IsXVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsXVisible IsXVisible Visibility state of the x value Declaration public bool IsXVisible { get; protected set; } Property Value Type Description Boolean True if the x value is visible, false otherwise"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsYVisible.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsYVisible.html",
    "title": "Property IsYVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsYVisible IsYVisible Visibility state of the y value Declaration public bool IsYVisible { get; protected set; } Property Value Type Description Boolean True if the y value is visible, false otherwise"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsZVisible.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsZVisible.html",
    "title": "Property IsZVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsZVisible IsZVisible Visibility state of the z value Declaration public bool IsZVisible { get; protected set; } Property Value Type Description Boolean True if the z value is visible, false otherwise"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.AdditionalContent.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.AdditionalContent.html",
    "title": "Property AdditionalContent | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalContent AdditionalContent Additional localization needed by the control, Implementation required by the IAdditionalLocalization interface. Declaration public AdditionalLocalization[] AdditionalContent { get; set; } Property Value Type Description AdditionalLocalization [] An array of AdditionalLocalization Implements IAdditionalLocalization.AdditionalContent Remarks The array has the following values: [0] : ApplyVertexStreamsButton"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.AddVertexStream.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.AddVertexStream.html",
    "title": "Method AddVertexStream | Simple Shader Inspectors Documentation",
    "keywords": "Method AddVertexStream AddVertexStream(ParticleSystemVertexStream) Adds a vertex stream to the list of used streams. Declaration public VertexStreamsControl AddVertexStream(ParticleSystemVertexStream stream) Parameters Type Name Description ParticleSystemVertexStream stream Vertex stream to add. Returns Type Description VertexStreamsControl This control."
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.-ctor.html",
    "title": "Constructor VertexStreamsControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor VertexStreamsControl VertexStreamsControl(String) Default constructor of VertexStreamsControl . Declaration public VertexStreamsControl(string alias) Parameters Type Name Description String alias Alias needed by the control"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.html",
    "title": "Class VertexStreamsControl | Simple Shader Inspectors Documentation",
    "keywords": "Class VertexStreamsControl Control for viewing and setting particle vertex streams used Inheritance Object SimpleControl VertexStreamsControl Implements IAdditionalLocalization Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class VertexStreamsControl : SimpleControl, IAdditionalLocalization Remarks When making particle shaders there may be a need to set the particles vertex streams so that the shader can access the data it needs. Using this control you can easily view which vertex streams are needed and set them in the particle systems that have a material using this shader, in a similar way the standard unity particle shader inspector does. Since the control does not use any material property, it requires an alias in order to work. Examples Example usage: this.AddVertexStreamsControl(\"AliasToUse\"); Constructors Name Description VertexStreamsControl(String) Default constructor of VertexStreamsControl . Properties Name Description AdditionalContent Additional localization needed by the control, Implementation required by the IAdditionalLocalization interface. Methods Name Description AddVertexStream(ParticleSystemVertexStream) Adds a vertex stream to the list of used streams. ControlGUI(MaterialEditor) Draws the control represented by this object. RemoveVertexStream(ParticleSystemVertexStream) Removes a vertex stream from the list of used streams. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) AdditionalContentExtensions.InitializeLocalizationWithNames(IAdditionalLocalization, String[])"
  },
  "api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.RemoveVertexStream.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.RemoveVertexStream.html",
    "title": "Method RemoveVertexStream | Simple Shader Inspectors Documentation",
    "keywords": "Method RemoveVertexStream RemoveVertexStream(ParticleSystemVertexStream) Removes a vertex stream from the list of used streams. Declaration public VertexStreamsControl RemoveVertexStream(ParticleSystemVertexStream stream) Parameters Type Name Description ParticleSystemVertexStream stream Vertex stream to remove. Returns Type Description VertexStreamsControl This control."
  },
  "api/VRLabs.SimpleShaderInspectors.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors Classes AdditionalContentExtensions Static class containing extension methods that manipulate AdditionalLocalization or AdditionalLocalization objects or arrays. AdditionalLocalization This class is a simple class containing a Name used for finding the localization content and a GUIContent object containing said content. AdditionalProperty This class defines an additional property. ChainableAttribute Attribute for properties that is used when generating chainables. Chainables Static class containing all control extension methods in the base namespace of Simple Shader Inspectors. ComputeShaders Default compute shader assets and settings natively available in Simple Shader Inspectors. LimitAccessScopeAttribute Attribute for constructors indicating that the chainable constructor can only be used from a specific type instead of the default IControlContainer type. Localization Static helper class used for managing localizations. LocalizationFile LocalizationSearchers MaterialArrayHelper Helper class for handling Material arrays. PropertyControl Represents a general purpose control for a property that will be drawn based on the property type. PropertyInfo SerializedDictionaries Class used to save the dictionaries used by the API SettingsFile SimpleControl Base class of all controls used by Simple Shader Inspectors. SimpleShaderInspector Default base class for creating new inspectors. SSIGUIHelper Helper class containing utility methods for IMGUI. SSIHelper Static class containing utility functions for Controls and Inspectors. StaticDictionaries Static class containing dictionaries that can be used by controls for various needs. StaticDictionaries.Startup Styles Default styles available natively in SimpleShaderInspectors. Textures Default textures available natively in Simple Shader Inspectors. TimedDictionary<TKey, TValue> Class used to identify a dictionary that also contains the date of last edit. Structs SerializedDictionaries.BoolItem SerializedDictionaries.IntItem Interfaces IAdditionalLocalization Interface used to define the need for a control to use additional localization content IAdditionalProperties Interface used to define the need for additional material properties to handle. IControlContainer Interface that defines an object that contains a list of SimpleControls of type SimpleControl to draw. IControlContainer<T> Interface that defines an object that contains a list of SimpleControls of a specified type to draw. INonAnimatableProperty Interface that defines an object that has a property that shouldn't be animated by the animation window ISimpleShaderInspector Interface indicating that the object is a valid Simple Shader Inspector and can use its features."
  },
  "api/VRLabs.SimpleShaderInspectors.IAdditionalLocalization.AdditionalContent.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.IAdditionalLocalization.AdditionalContent.html",
    "title": "Property AdditionalContent | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalContent AdditionalContent Array containing the additional localization elements needed by the control. Declaration AdditionalLocalization[] AdditionalContent { get; set; } Property Value Type Description AdditionalLocalization [] Remarks Is up to the control to set the array size and the unique names for each content string based on the control needs"
  },
  "api/VRLabs.SimpleShaderInspectors.IAdditionalLocalization.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.IAdditionalLocalization.html",
    "title": "Interface IAdditionalLocalization | Simple Shader Inspectors Documentation",
    "keywords": "Interface IAdditionalLocalization Interface used to define the need for a control to use additional localization content Namespace : VRLabs.SimpleShaderInspectors Syntax public interface IAdditionalLocalization Remarks If a control needs more localized content than the one given by default, it can implement this interface to let the inspector know that it needs more than one localized content. Properties Name Description AdditionalContent Array containing the additional localization elements needed by the control. Extension Methods AdditionalContentExtensions.InitializeLocalizationWithNames(IAdditionalLocalization, String[])"
  },
  "api/VRLabs.SimpleShaderInspectors.IAdditionalProperties.AdditionalProperties.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.IAdditionalProperties.AdditionalProperties.html",
    "title": "Property AdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalProperties AdditionalProperties Array containing all additional properties the control needs. Declaration AdditionalProperty[] AdditionalProperties { get; set; } Property Value Type Description AdditionalProperty [] Remarks Is up to the control to initialize the array and assign the property names it needs to fetch."
  },
  "api/VRLabs.SimpleShaderInspectors.IAdditionalProperties.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.IAdditionalProperties.html",
    "title": "Interface IAdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Interface IAdditionalProperties Interface used to define the need for additional material properties to handle. Namespace : VRLabs.SimpleShaderInspectors Syntax public interface IAdditionalProperties Remarks When a control needs more than a single property to do its job, implementing this interface will let the inspector know this need. Properties Name Description AdditionalProperties Array containing all additional properties the control needs."
  },
  "api/VRLabs.SimpleShaderInspectors.IControlContainer.AddControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.IControlContainer.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl) Method used to add a control to the list of controls that are under this object Declaration void AddControl(SimpleControl control) Parameters Type Name Description SimpleControl control Control to add Remarks Simple Shader Inspectors needs an endpoint to add controls inside IControlContainer objects using Chainable methods, and this is the one it uses. This approach is preferable compared to defining a list because it will leave the control the freedom to handle how to store ad manage controls passed by the inspector."
  },
  "api/VRLabs.SimpleShaderInspectors.IControlContainer.GetControlList.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.IControlContainer.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Method used to get the list of stored controls. Declaration IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > An IEnumerable of the controls stored in this object. Remarks Just like AddControl(SimpleControl) this is used by Simple Shader Inspector to have a way to retrieve controls stored inside this object, to then do operations with it (for example, fetching the current localization content needed by the controls)."
  },
  "api/VRLabs.SimpleShaderInspectors.IControlContainer.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.IControlContainer.html",
    "title": "Interface IControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Interface IControlContainer Interface that defines an object that contains a list of SimpleControls of type SimpleControl to draw. Namespace : VRLabs.SimpleShaderInspectors Syntax public interface IControlContainer Methods Name Description AddControl(SimpleControl) Method used to add a control to the list of controls that are under this object GetControlList() Method used to get the list of stored controls. Extension Methods Chainables.AddPropertyControl(IControlContainer, String) Chainables.AddColorControl(IControlContainer, String, Boolean) Chainables.AddControlContainer(IControlContainer) Chainables.AddEnumControl<TEnum>(IControlContainer, String) Chainables.AddGradientTextureControl(IControlContainer, String, String) Chainables.AddKeywordToggleControl(IControlContainer, String) Chainables.AddKeywordToggleListControl(IControlContainer, String) Chainables.AddLabelControl(IControlContainer, String) Chainables.AddLightmapEmissionControl(IControlContainer) Chainables.AddSpaceControl(IControlContainer, Int32) Chainables.AddTextureControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, ComputeShader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single) Chainables.AddToggleListControl(IControlContainer, String, Single, Single) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Chainables.AddVertexStreamsControl(IControlContainer, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Chainables.AddActivatableSection(IControlContainer, String, Single, Single) Chainables.AddOrderedSectionGroup(IControlContainer, String) Chainables.AddSection(IControlContainer, String, Single, Single) Chainables.AddSection(IControlContainer)"
  },
  "api/VRLabs.SimpleShaderInspectors.IControlContainer-1.AddControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.IControlContainer-1.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(T) Generic version of AddControl(SimpleControl) . Declaration void AddControl(T control) Parameters Type Name Description T control Control to add."
  },
  "api/VRLabs.SimpleShaderInspectors.IControlContainer-1.GetControlList.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.IControlContainer-1.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Generic version of GetControlList() . Declaration IEnumerable<T> GetControlList() Returns Type Description IEnumerable <T> An IEnumerable of the controls stored in this object."
  },
  "api/VRLabs.SimpleShaderInspectors.IControlContainer-1.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.IControlContainer-1.html",
    "title": "Interface IControlContainer<T> | Simple Shader Inspectors Documentation",
    "keywords": "Interface IControlContainer<T> Interface that defines an object that contains a list of SimpleControls of a specified type to draw. Namespace : VRLabs.SimpleShaderInspectors Syntax public interface IControlContainer<T> : IControlContainer where T : SimpleControl Type Parameters T Remarks This generic version of IControlContainer makes possible to define a stricter set of control types to be contained. Methods Name Description AddControl(T) Generic version of AddControl(SimpleControl) . GetControlList() Generic version of GetControlList() . Extension Methods Chainables.AddPropertyControl(IControlContainer, String) Chainables.AddColorControl(IControlContainer, String, Boolean) Chainables.AddControlContainer(IControlContainer) Chainables.AddEnumControl<TEnum>(IControlContainer, String) Chainables.AddGradientTextureControl(IControlContainer, String, String) Chainables.AddKeywordToggleControl(IControlContainer, String) Chainables.AddKeywordToggleListControl(IControlContainer, String) Chainables.AddLabelControl(IControlContainer, String) Chainables.AddLightmapEmissionControl(IControlContainer) Chainables.AddSpaceControl(IControlContainer, Int32) Chainables.AddTextureControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, ComputeShader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single) Chainables.AddToggleListControl(IControlContainer, String, Single, Single) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Chainables.AddVertexStreamsControl(IControlContainer, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Chainables.AddActivatableSection(IControlContainer, String, Single, Single) Chainables.AddOrderedSectionGroup(IControlContainer, String) Chainables.AddSection(IControlContainer, String, Single, Single) Chainables.AddSection(IControlContainer)"
  },
  "api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.html",
    "title": "Interface INonAnimatableProperty | Simple Shader Inspectors Documentation",
    "keywords": "Interface INonAnimatableProperty Interface that defines an object that has a property that shouldn't be animated by the animation window Namespace : VRLabs.SimpleShaderInspectors Syntax public interface INonAnimatableProperty Remarks In some cases you don't want to record changes of a property inside an animation. This will let the inspector know that. Bare in mind that this will not assure that the property will not be recorded since is up to the inspector to satisfy the condition, and the user could still edit the animation manually. Properties Name Description NonAnimatablePropertyChanged Boolean indicating if a non animatable material property need to be updated. Methods Name Description UpdateNonAnimatableProperty(MaterialEditor) Updates the value of the non animatable property"
  },
  "api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.NonAnimatablePropertyChanged.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.NonAnimatablePropertyChanged.html",
    "title": "Property NonAnimatablePropertyChanged | Simple Shader Inspectors Documentation",
    "keywords": "Property NonAnimatablePropertyChanged NonAnimatablePropertyChanged Boolean indicating if a non animatable material property need to be updated. Declaration bool NonAnimatablePropertyChanged { get; set; } Property Value Type Description Boolean"
  },
  "api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.UpdateNonAnimatableProperty.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.UpdateNonAnimatableProperty.html",
    "title": "Method UpdateNonAnimatableProperty | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateNonAnimatableProperty UpdateNonAnimatableProperty(MaterialEditor) Updates the value of the non animatable property Declaration void UpdateNonAnimatableProperty(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor."
  },
  "api/VRLabs.SimpleShaderInspectors.ISimpleShaderInspector.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.ISimpleShaderInspector.html",
    "title": "Interface ISimpleShaderInspector | Simple Shader Inspectors Documentation",
    "keywords": "Interface ISimpleShaderInspector Interface indicating that the object is a valid Simple Shader Inspector and can use its features. Namespace : VRLabs.SimpleShaderInspectors Syntax public interface ISimpleShaderInspector : IControlContainer Remarks By implementing this interface you can create your own inspector that uses the Simple Shader Inspectors library. It can be useful when you need some really custom behaviour, at the cost oh having to manage the controls initialization, property fetching etc. It can be a good starting point to see the source code of SimpleShaderInspector . Properties Name Description Materials Array of the materials selected. Shader Shader this inspector is viewing. Extension Methods Chainables.AddPropertyControl(IControlContainer, String) Chainables.AddColorControl(IControlContainer, String, Boolean) Chainables.AddControlContainer(IControlContainer) Chainables.AddEnumControl<TEnum>(IControlContainer, String) Chainables.AddGradientTextureControl(IControlContainer, String, String) Chainables.AddKeywordToggleControl(IControlContainer, String) Chainables.AddKeywordToggleListControl(IControlContainer, String) Chainables.AddLabelControl(IControlContainer, String) Chainables.AddLightmapEmissionControl(IControlContainer) Chainables.AddSpaceControl(IControlContainer, Int32) Chainables.AddTextureControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, ComputeShader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single) Chainables.AddToggleListControl(IControlContainer, String, Single, Single) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Chainables.AddVertexStreamsControl(IControlContainer, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Chainables.AddActivatableSection(IControlContainer, String, Single, Single) Chainables.AddOrderedSectionGroup(IControlContainer, String) Chainables.AddSection(IControlContainer, String, Single, Single) Chainables.AddSection(IControlContainer)"
  },
  "api/VRLabs.SimpleShaderInspectors.ISimpleShaderInspector.Materials.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.ISimpleShaderInspector.Materials.html",
    "title": "Property Materials | Simple Shader Inspectors Documentation",
    "keywords": "Property Materials Materials Array of the materials selected. Declaration Material[] Materials { get; } Property Value Type Description Material []"
  },
  "api/VRLabs.SimpleShaderInspectors.ISimpleShaderInspector.Shader.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.ISimpleShaderInspector.Shader.html",
    "title": "Property Shader | Simple Shader Inspectors Documentation",
    "keywords": "Property Shader Shader Shader this inspector is viewing. Declaration Shader Shader { get; } Property Value Type Description Shader"
  },
  "api/VRLabs.SimpleShaderInspectors.LimitAccessScopeAttribute.BaseType.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.LimitAccessScopeAttribute.BaseType.html",
    "title": "Property BaseType | Simple Shader Inspectors Documentation",
    "keywords": "Property BaseType BaseType Declaration public Type BaseType { get; } Property Value Type Description Type"
  },
  "api/VRLabs.SimpleShaderInspectors.LimitAccessScopeAttribute.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.LimitAccessScopeAttribute.-ctor.html",
    "title": "Constructor LimitAccessScopeAttribute | Simple Shader Inspectors Documentation",
    "keywords": "Constructor LimitAccessScopeAttribute LimitAccessScopeAttribute(Type) Declaration public LimitAccessScopeAttribute(Type type) Parameters Type Name Description Type type"
  },
  "api/VRLabs.SimpleShaderInspectors.LimitAccessScopeAttribute.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.LimitAccessScopeAttribute.html",
    "title": "Class LimitAccessScopeAttribute | Simple Shader Inspectors Documentation",
    "keywords": "Class LimitAccessScopeAttribute Attribute for constructors indicating that the chainable constructor can only be used from a specific type instead of the default IControlContainer type. Inheritance Object Attribute LimitAccessScopeAttribute Implements _Attribute Namespace : VRLabs.SimpleShaderInspectors Syntax [AttributeUsage(AttributeTargets.Constructor, AllowMultiple = false)] public class LimitAccessScopeAttribute : Attribute, _Attribute Remarks Sometimes you may need to limit which controls implementing IControlContainer can use the chainable version of the constructor, by having this attribute you can modify the generated chainable constructor to reflect those needs. Constructors Name Description LimitAccessScopeAttribute(Type) Properties Name Description BaseType"
  },
  "api/VRLabs.SimpleShaderInspectors.Localization.ApplyLocalization.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Localization.ApplyLocalization.html",
    "title": "Method ApplyLocalization | Simple Shader Inspectors Documentation",
    "keywords": "Method ApplyLocalization ApplyLocalization(IEnumerable<SimpleControl>, String, Boolean) Apply Localization strings to a list of controls. Declaration public static void ApplyLocalization(this IEnumerable<SimpleControl> controls, string localizationFilePath, bool writeIfNotFound = false) Parameters Type Name Description IEnumerable < SimpleControl > controls Controls to apply a localization String localizationFilePath Path of the localization file Boolean writeIfNotFound Generate empty fields / new localization file if the provided one is missing or incomplete."
  },
  "api/VRLabs.SimpleShaderInspectors.Localization.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Localization.html",
    "title": "Class Localization | Simple Shader Inspectors Documentation",
    "keywords": "Class Localization Static helper class used for managing localizations. Inheritance Object Localization Namespace : VRLabs.SimpleShaderInspectors Syntax public static class Localization Methods Name Description ApplyLocalization(IEnumerable<SimpleControl>, String, Boolean) Apply Localization strings to a list of controls."
  },
  "api/VRLabs.SimpleShaderInspectors.LocalizationFile.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.LocalizationFile.-ctor.html",
    "title": "Constructor LocalizationFile | Simple Shader Inspectors Documentation",
    "keywords": "Constructor LocalizationFile LocalizationFile() Declaration public LocalizationFile()"
  },
  "api/VRLabs.SimpleShaderInspectors.LocalizationFile.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.LocalizationFile.html",
    "title": "Class LocalizationFile | Simple Shader Inspectors Documentation",
    "keywords": "Class LocalizationFile Inheritance Object LocalizationFile Namespace : VRLabs.SimpleShaderInspectors Syntax [Serializable] public class LocalizationFile Constructors Name Description LocalizationFile() Fields Name Description Properties"
  },
  "api/VRLabs.SimpleShaderInspectors.LocalizationFile.Properties.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.LocalizationFile.Properties.html",
    "title": "Field Properties | Simple Shader Inspectors Documentation",
    "keywords": "Field Properties Namespace : VRLabs.SimpleShaderInspectors Syntax public PropertyInfo[] Properties Returns PropertyInfo []"
  },
  "api/VRLabs.SimpleShaderInspectors.LocalizationSearchers.FindPropertyByName.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.LocalizationSearchers.FindPropertyByName.html",
    "title": "Method FindPropertyByName | Simple Shader Inspectors Documentation",
    "keywords": "Method FindPropertyByName FindPropertyByName(IEnumerable<PropertyInfo>, String) Declaration public static PropertyInfo FindPropertyByName(this IEnumerable<PropertyInfo> properties, string name) Parameters Type Name Description IEnumerable < PropertyInfo > properties String name Returns Type Description PropertyInfo FindPropertyByName((String, String)[], String) Declaration public static string FindPropertyByName(this (string, string)[] properties, string name) Parameters Type Name Description (T1, T2) < String , String >[] properties String name Returns Type Description String"
  },
  "api/VRLabs.SimpleShaderInspectors.LocalizationSearchers.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.LocalizationSearchers.html",
    "title": "Class LocalizationSearchers | Simple Shader Inspectors Documentation",
    "keywords": "Class LocalizationSearchers Inheritance Object LocalizationSearchers Namespace : VRLabs.SimpleShaderInspectors Syntax public static class LocalizationSearchers Methods Name Description FindPropertyByName(IEnumerable<PropertyInfo>, String) FindPropertyByName((String, String)[], String)"
  },
  "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.html",
    "title": "Class MaterialArrayHelper | Simple Shader Inspectors Documentation",
    "keywords": "Class MaterialArrayHelper Helper class for handling Material arrays. Inheritance Object MaterialArrayHelper Namespace : VRLabs.SimpleShaderInspectors Syntax public static class MaterialArrayHelper Remarks Managing multiple materials inside the inspector could become slightly annoying, these extension functions will make this process less annoying by automatically looping the materials array to and do the operations you want Methods Name Description IsKeywordMixedValue(Material[], String) Gets the mixed value state of a keyword on the materials array SetInt(IEnumerable<Material>, String, Int32) Set int to all materials in the array. SetKeyword(Material[], String, Boolean) Sets a keyword state to all materials in the array. SetOverrideTag(IEnumerable<Material>, String, String) Set override tag to all materials in the array. SetRenderQueue(IEnumerable<Material>, Int32) Set render queue to all materials in the array. SetVector(IEnumerable<Material>, String, Vector4) Set vector to all materials in the array."
  },
  "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.IsKeywordMixedValue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.IsKeywordMixedValue.html",
    "title": "Method IsKeywordMixedValue | Simple Shader Inspectors Documentation",
    "keywords": "Method IsKeywordMixedValue IsKeywordMixedValue(Material[], String) Gets the mixed value state of a keyword on the materials array Declaration public static bool IsKeywordMixedValue(this Material[] materials, string keyword) Parameters Type Name Description Material [] materials Material array this method extends to. String keyword The keyword to check against. Returns Type Description Boolean True if the keyword has mixed values, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetInt.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetInt.html",
    "title": "Method SetInt | Simple Shader Inspectors Documentation",
    "keywords": "Method SetInt SetInt(IEnumerable<Material>, String, Int32) Set int to all materials in the array. Declaration public static void SetInt(this IEnumerable<Material> materials, string name, int value) Parameters Type Name Description IEnumerable < Material > materials Material array this method extends to. String name Name of the int. Int32 value Value of the int."
  },
  "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetKeyword.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetKeyword.html",
    "title": "Method SetKeyword | Simple Shader Inspectors Documentation",
    "keywords": "Method SetKeyword SetKeyword(Material[], String, Boolean) Sets a keyword state to all materials in the array. Declaration public static void SetKeyword(this Material[] materials, string keyword, bool state) Parameters Type Name Description Material [] materials Material array this method extends to. String keyword The keyword that is being toggled. Boolean state Toggle value."
  },
  "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetOverrideTag.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetOverrideTag.html",
    "title": "Method SetOverrideTag | Simple Shader Inspectors Documentation",
    "keywords": "Method SetOverrideTag SetOverrideTag(IEnumerable<Material>, String, String) Set override tag to all materials in the array. Declaration public static void SetOverrideTag(this IEnumerable<Material> materials, string tagName, string value) Parameters Type Name Description IEnumerable < Material > materials Material array this method extends to. String tagName Name of the tag. String value Value of the tag."
  },
  "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetRenderQueue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetRenderQueue.html",
    "title": "Method SetRenderQueue | Simple Shader Inspectors Documentation",
    "keywords": "Method SetRenderQueue SetRenderQueue(IEnumerable<Material>, Int32) Set render queue to all materials in the array. Declaration public static void SetRenderQueue(this IEnumerable<Material> materials, int queue) Parameters Type Name Description IEnumerable < Material > materials Material array this method extends to. Int32 queue Render queue value."
  },
  "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetVector.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetVector.html",
    "title": "Method SetVector | Simple Shader Inspectors Documentation",
    "keywords": "Method SetVector SetVector(IEnumerable<Material>, String, Vector4) Set vector to all materials in the array. Declaration public static void SetVector(this IEnumerable<Material> materials, string name, Vector4 value) Parameters Type Name Description IEnumerable < Material > materials Material array this method extends to. String name Name of the Vector4. Vector4 value Value of the Vector4."
  },
  "api/VRLabs.SimpleShaderInspectors.PropertyControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.PropertyControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "api/VRLabs.SimpleShaderInspectors.PropertyControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.PropertyControl.-ctor.html",
    "title": "Constructor PropertyControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor PropertyControl PropertyControl(String) Default constructor of PropertyControl . Declaration public PropertyControl(string propertyName) Parameters Type Name Description String propertyName Material property name."
  },
  "api/VRLabs.SimpleShaderInspectors.PropertyControl.HasPropertyUpdated.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.PropertyControl.HasPropertyUpdated.html",
    "title": "Property HasPropertyUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasPropertyUpdated HasPropertyUpdated Boolean indicating if this control updated its property value. Declaration public bool HasPropertyUpdated { get; protected set; } Property Value Type Description Boolean True if the property value has been updated, false otherwise."
  },
  "api/VRLabs.SimpleShaderInspectors.PropertyControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.PropertyControl.html",
    "title": "Class PropertyControl | Simple Shader Inspectors Documentation",
    "keywords": "Class PropertyControl Represents a general purpose control for a property that will be drawn based on the property type. Inheritance Object SimpleControl PropertyControl ColorControl ColorControl VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer EnumControl<TEnum> EnumControl<TEnum> VRLabs.SimpleShaderInspectors.Controls.RGBASelectorControl Section Section TextureControl TextureControl TilingAndOffsetControl TilingAndOffsetControl ToggleControl ToggleControl VectorControl VectorControl Namespace : VRLabs.SimpleShaderInspectors Syntax public class PropertyControl : SimpleControl Remarks You can see this control as the Simple Shader Inspectors equivalent of MaterialEditor.ShaderProperty since it draws all properties in a generic way. Examples Initialize the control inside the inspector: this.AddPropertyControl(\"_ExampleProperty\"); Constructors Name Description PropertyControl(String) Default constructor of PropertyControl . Properties Name Description HasPropertyUpdated Boolean indicating if this control updated its property value. Property MaterialProperty related to the property shown by this control. PropertyName Name of the property shown by this control. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean) See Also SimpleControl"
  },
  "api/VRLabs.SimpleShaderInspectors.PropertyControl.Property.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.PropertyControl.Property.html",
    "title": "Property Property | Simple Shader Inspectors Documentation",
    "keywords": "Property Property Property MaterialProperty related to the property shown by this control. Declaration public MaterialProperty Property { get; protected set; } Property Value Type Description MaterialProperty MaterialProperty fetched by the inspector based on PropertyName ."
  },
  "api/VRLabs.SimpleShaderInspectors.PropertyControl.PropertyName.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.PropertyControl.PropertyName.html",
    "title": "Property PropertyName | Simple Shader Inspectors Documentation",
    "keywords": "Property PropertyName PropertyName Name of the property shown by this control. Declaration public string PropertyName { get; protected set; } Property Value Type Description String string containing the name of the property."
  },
  "api/VRLabs.SimpleShaderInspectors.PropertyInfo.DisplayName.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.PropertyInfo.DisplayName.html",
    "title": "Field DisplayName | Simple Shader Inspectors Documentation",
    "keywords": "Field DisplayName Namespace : VRLabs.SimpleShaderInspectors Syntax public string DisplayName Returns String"
  },
  "api/VRLabs.SimpleShaderInspectors.PropertyInfo.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.PropertyInfo.html",
    "title": "Class PropertyInfo | Simple Shader Inspectors Documentation",
    "keywords": "Class PropertyInfo Inheritance Object PropertyInfo Namespace : VRLabs.SimpleShaderInspectors Syntax [Serializable] public class PropertyInfo Fields Name Description DisplayName Name Tooltip"
  },
  "api/VRLabs.SimpleShaderInspectors.PropertyInfo.Name.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.PropertyInfo.Name.html",
    "title": "Field Name | Simple Shader Inspectors Documentation",
    "keywords": "Field Name Namespace : VRLabs.SimpleShaderInspectors Syntax public string Name Returns String"
  },
  "api/VRLabs.SimpleShaderInspectors.PropertyInfo.Tooltip.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.PropertyInfo.Tooltip.html",
    "title": "Field Tooltip | Simple Shader Inspectors Documentation",
    "keywords": "Field Tooltip Namespace : VRLabs.SimpleShaderInspectors Syntax public string Tooltip Returns String"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.boolDictionary.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.boolDictionary.html",
    "title": "Field boolDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Field boolDictionary list for the bool dictionary Namespace : VRLabs.SimpleShaderInspectors Syntax public List<SerializedDictionaries.BoolItem> boolDictionary Returns List < SerializedDictionaries.BoolItem >"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.date.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.date.html",
    "title": "Field date | Simple Shader Inspectors Documentation",
    "keywords": "Field date Namespace : VRLabs.SimpleShaderInspectors Syntax public long date Returns Int64"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.html",
    "title": "Struct SerializedDictionaries.BoolItem | Simple Shader Inspectors Documentation",
    "keywords": "Struct SerializedDictionaries.BoolItem Namespace : VRLabs.SimpleShaderInspectors Syntax [Serializable] public struct BoolItem Fields Name Description date key value"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.key.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.key.html",
    "title": "Field key | Simple Shader Inspectors Documentation",
    "keywords": "Field key Namespace : VRLabs.SimpleShaderInspectors Syntax public string key Returns String"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.value.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.value.html",
    "title": "Field value | Simple Shader Inspectors Documentation",
    "keywords": "Field value Namespace : VRLabs.SimpleShaderInspectors Syntax public bool value Returns Boolean"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.-ctor.html",
    "title": "Constructor SerializedDictionaries | Simple Shader Inspectors Documentation",
    "keywords": "Constructor SerializedDictionaries SerializedDictionaries() Declaration public SerializedDictionaries()"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.html",
    "title": "Class SerializedDictionaries | Simple Shader Inspectors Documentation",
    "keywords": "Class SerializedDictionaries Class used to save the dictionaries used by the API Inheritance Object Object ScriptableObject SerializedDictionaries Namespace : VRLabs.SimpleShaderInspectors Syntax public class SerializedDictionaries : ScriptableObject Remarks The API provides dictionaries to store data by identifier up to 30 days, those dictionaries are automatically saved into this asset. Constructors Name Description SerializedDictionaries() Fields Name Description boolDictionary list for the bool dictionary intDictionary Methods Name Description SetBoolDictionary(List<(String, Boolean, DateTime)>) SetIntDictionary(List<(String, Int32, DateTime)>)"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.intDictionary.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.intDictionary.html",
    "title": "Field intDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Field intDictionary Namespace : VRLabs.SimpleShaderInspectors Syntax public List<SerializedDictionaries.IntItem> intDictionary Returns List < SerializedDictionaries.IntItem >"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.date.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.date.html",
    "title": "Field date | Simple Shader Inspectors Documentation",
    "keywords": "Field date Namespace : VRLabs.SimpleShaderInspectors Syntax public long date Returns Int64"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.html",
    "title": "Struct SerializedDictionaries.IntItem | Simple Shader Inspectors Documentation",
    "keywords": "Struct SerializedDictionaries.IntItem Namespace : VRLabs.SimpleShaderInspectors Syntax [Serializable] public struct IntItem Fields Name Description date key value"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.key.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.key.html",
    "title": "Field key | Simple Shader Inspectors Documentation",
    "keywords": "Field key Namespace : VRLabs.SimpleShaderInspectors Syntax public string key Returns String"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.value.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.value.html",
    "title": "Field value | Simple Shader Inspectors Documentation",
    "keywords": "Field value Namespace : VRLabs.SimpleShaderInspectors Syntax public int value Returns Int32"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.SetBoolDictionary.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.SetBoolDictionary.html",
    "title": "Method SetBoolDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Method SetBoolDictionary SetBoolDictionary(List<(String, Boolean, DateTime)>) Declaration public void SetBoolDictionary(List<(string, bool, DateTime)> list) Parameters Type Name Description List < (T1, T2, T3) < String , Boolean , DateTime >> list"
  },
  "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.SetIntDictionary.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.SetIntDictionary.html",
    "title": "Method SetIntDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Method SetIntDictionary SetIntDictionary(List<(String, Int32, DateTime)>) Declaration public void SetIntDictionary(List<(string, int, DateTime)> list) Parameters Type Name Description List < (T1, T2, T3) < String , Int32 , DateTime >> list"
  },
  "api/VRLabs.SimpleShaderInspectors.SettingsFile.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SettingsFile.html",
    "title": "Class SettingsFile | Simple Shader Inspectors Documentation",
    "keywords": "Class SettingsFile Inheritance Object SettingsFile Namespace : VRLabs.SimpleShaderInspectors Syntax [Serializable] public class SettingsFile Fields Name Description SelectedLanguage"
  },
  "api/VRLabs.SimpleShaderInspectors.SettingsFile.SelectedLanguage.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SettingsFile.SelectedLanguage.html",
    "title": "Field SelectedLanguage | Simple Shader Inspectors Documentation",
    "keywords": "Field SelectedLanguage Namespace : VRLabs.SimpleShaderInspectors Syntax public string SelectedLanguage Returns String"
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleControl.Content.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleControl.Content.html",
    "title": "Property Content | Simple Shader Inspectors Documentation",
    "keywords": "Property Content Content Localized GuiContent set by the inspector. Declaration public GUIContent Content { get; set; } Property Value Type Description GUIContent A GUIContent that is fetched by the inspector using the control's alias containing the localized string that will be displayed."
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleControl.ControlAlias.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleControl.ControlAlias.html",
    "title": "Property ControlAlias | Simple Shader Inspectors Documentation",
    "keywords": "Property ControlAlias ControlAlias Name used for localization. Declaration public string ControlAlias { get; set; } Property Value Type Description String String containing the alias used for localization. Remarks By default the alias should be set by the constructor and modified with the chainable Alias<T>(T, String) method. Is up to the controls derived from this class to decide what should be used as default value, just keep in mind that using hardcoded strings means that all instances of that class would share the same localization string unless Alias<T>(T, String) is used in the inspector. Controls using a MaterialProperty should use the material property name as alias (which should be done by default if you inherit from PropertyControl and pass the property name to the base constructor), meanwhile controls that do not use a MaterialProperty should include a string in the constructor to pass as alias."
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleControl.ControlGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Content of the control that is drawn. Declaration protected abstract void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor."
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleControl.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleControl.-ctor.html",
    "title": "Constructor SimpleControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor SimpleControl SimpleControl(String) Default constructor of SimpleControl Declaration protected SimpleControl(string alias) Parameters Type Name Description String alias Material property name."
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleControl.DrawControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleControl.DrawControl.html",
    "title": "Method DrawControl | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawControl DrawControl(MaterialEditor) Content of the control that is drawn. Declaration public void DrawControl(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor."
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleControl.html",
    "title": "Class SimpleControl | Simple Shader Inspectors Documentation",
    "keywords": "Class SimpleControl Base class of all controls used by Simple Shader Inspectors. Inheritance Object SimpleControl ControlContainer ControlContainer VRLabs.SimpleShaderInspectors.Controls.HelpBoxControl VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer KeywordToggleControl KeywordToggleControl LabelControl LabelControl LightmapEmissionControl LightmapEmissionControl OrderedSectionGroup OrderedSectionGroup SpaceControl SpaceControl VertexStreamsControl VertexStreamsControl PropertyControl PropertyControl Namespace : VRLabs.SimpleShaderInspectors Syntax public abstract class SimpleControl Constructors Name Description SimpleControl(String) Default constructor of SimpleControl Properties Name Description Content Localized GuiContent set by the inspector. ControlAlias Name used for localization. Inspector Inspector that contains this control. IsEnabled Boolean that defines if the control is enabled. IsVisible Boolean that defines if the control is visible. Methods Name Description ControlGUI(MaterialEditor) Content of the control that is drawn. DrawControl(MaterialEditor) Content of the control that is drawn. Extension Methods Chainables.Alias<T>(T, String) Chainables.SetVisibility<T>(T, Boolean) Chainables.SetEnabled<T>(T, Boolean)"
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleControl.Inspector.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleControl.Inspector.html",
    "title": "Property Inspector | Simple Shader Inspectors Documentation",
    "keywords": "Property Inspector Inspector Inspector that contains this control. Declaration public ISimpleShaderInspector Inspector { get; set; } Property Value Type Description ISimpleShaderInspector"
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleControl.IsEnabled.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleControl.IsEnabled.html",
    "title": "Property IsEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Property IsEnabled IsEnabled Boolean that defines if the control is enabled. Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean True if the control should be enabled, false otherwise (default: true)."
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleControl.IsVisible.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleControl.IsVisible.html",
    "title": "Property IsVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsVisible IsVisible Boolean that defines if the control is visible. Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean True if the control should be visible, false otherwise (default: true)."
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.AddControl.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl) Implementation needed by IControlContainer to add controls. Declaration public void AddControl(SimpleControl control) Parameters Type Name Description SimpleControl control Control to add. Implements IControlContainer.AddControl(SimpleControl)"
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.CheckChanges.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.CheckChanges.html",
    "title": "Method CheckChanges | Simple Shader Inspectors Documentation",
    "keywords": "Method CheckChanges CheckChanges(MaterialEditor) Check changes happened to properties. Declaration protected virtual void CheckChanges(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor material editor that uses this GUI. Remarks This method is called after drawing all controls, and can be used to check if anything important has been changed by the user and some operations are needed to be done (for example the user has changed a property to a certain value and therefore some controls need to be enabled or disables)"
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Controls.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > List of control that the inspector had to draw."
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.CustomLocalizationShaderName.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.CustomLocalizationShaderName.html",
    "title": "Property CustomLocalizationShaderName | Simple Shader Inspectors Documentation",
    "keywords": "Property CustomLocalizationShaderName CustomLocalizationShaderName String containing a custom folder name for localization of shaders. Declaration protected string CustomLocalizationShaderName { get; set; } Property Value Type Description String Path relative to the folder containing localization files Remarks This string does NOT contain the entire path string, just a sub path from ShaderFolderName/Localization/ ."
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.DefaultBgColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.DefaultBgColor.html",
    "title": "Property DefaultBgColor | Simple Shader Inspectors Documentation",
    "keywords": "Property DefaultBgColor DefaultBgColor Default gui background color. Declaration public static Color DefaultBgColor { get; set; } Property Value Type Description Color Default gui background color. Remarks This static property makes easy to reset the background color inside a control without the need to locally store the default background color before changing it."
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Footer.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Footer.html",
    "title": "Method Footer | Simple Shader Inspectors Documentation",
    "keywords": "Method Footer Footer() Draw method that is used after drawing controls in the inspector. Declaration protected virtual void Footer() Remarks This method is called at the end of the inspector, either at the bottom (in unity 2018.4) or right after the last control (in unity 2019.2+)."
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.GetControlList.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Implementation needed by IControlContainer to get the object's controls list. Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > This inspector's controls list Implements IControlContainer.GetControlList()"
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Header.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Header.html",
    "title": "Method Header | Simple Shader Inspectors Documentation",
    "keywords": "Method Header Header() Draw method that is used before drawing controls in the inspector. Declaration protected virtual void Header() Remarks This method is called before drawing any control (but after the language selector) and can be used to draw any kind of static stuff, like a title or a logo visualization."
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.html",
    "title": "Class SimpleShaderInspector | Simple Shader Inspectors Documentation",
    "keywords": "Class SimpleShaderInspector Default base class for creating new inspectors. Inheritance Object ShaderGUI SimpleShaderInspector Implements ISimpleShaderInspector IControlContainer Namespace : VRLabs.SimpleShaderInspectors Syntax public abstract class SimpleShaderInspector : ShaderGUI, ISimpleShaderInspector, IControlContainer Remarks If you want to make an inspector with Simple Shader Inspectors you need to either derive from this class, or create your own implementing ISimpleShaderInspector , but in this second case you need to implement a lot of stuff manually, so it isn't advised unless you need really custom inspector behaviours. Properties Name Description Controls List of controls. CustomLocalizationShaderName String containing a custom folder name for localization of shaders. DefaultBgColor Default gui background color. Materials Array of selected materials NeedsNonAnimatableUpdate Boolean value that defines if the inspector should check for non animatable properties. Shader Shader currently used Methods Name Description AddControl(SimpleControl) Implementation needed by IControlContainer to add controls. CheckChanges(MaterialEditor) Check changes happened to properties. Footer() Draw method that is used after drawing controls in the inspector. GetControlList() Implementation needed by IControlContainer to get the object's controls list. Header() Draw method that is used before drawing controls in the inspector. OnGUI(MaterialEditor, MaterialProperty[]) Method called when updating UI. Cannot be overridden in child classes, leave it alone. Start() Initialization method where all the controls are instanced. You need to override it. StartChecks(MaterialEditor) Checks done on the first cycle before UI is drawn. Extension Methods Chainables.AddPropertyControl(IControlContainer, String) Chainables.AddColorControl(IControlContainer, String, Boolean) Chainables.AddControlContainer(IControlContainer) Chainables.AddEnumControl<TEnum>(IControlContainer, String) Chainables.AddGradientTextureControl(IControlContainer, String, String) Chainables.AddKeywordToggleControl(IControlContainer, String) Chainables.AddKeywordToggleListControl(IControlContainer, String) Chainables.AddLabelControl(IControlContainer, String) Chainables.AddLightmapEmissionControl(IControlContainer) Chainables.AddSpaceControl(IControlContainer, Int32) Chainables.AddTextureControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, ComputeShader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single) Chainables.AddToggleListControl(IControlContainer, String, Single, Single) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Chainables.AddVertexStreamsControl(IControlContainer, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Chainables.AddActivatableSection(IControlContainer, String, Single, Single) Chainables.AddOrderedSectionGroup(IControlContainer, String) Chainables.AddSection(IControlContainer, String, Single, Single) Chainables.AddSection(IControlContainer)"
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Materials.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Materials.html",
    "title": "Property Materials | Simple Shader Inspectors Documentation",
    "keywords": "Property Materials Materials Array of selected materials Declaration public Material[] Materials { get; } Property Value Type Description Material [] Array containing the materials currently selected by the inspector. Implements ISimpleShaderInspector.Materials"
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.NeedsNonAnimatableUpdate.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.NeedsNonAnimatableUpdate.html",
    "title": "Property NeedsNonAnimatableUpdate | Simple Shader Inspectors Documentation",
    "keywords": "Property NeedsNonAnimatableUpdate NeedsNonAnimatableUpdate Boolean value that defines if the inspector should check for non animatable properties. Declaration protected bool NeedsNonAnimatableUpdate { get; set; } Property Value Type Description Boolean True if non animatable properties should be granted their need to update outside of the animation recording, false otherwise. (default: false) Remarks Due to the cost of Reflection needed to get non animatable properties to be updated without animation recording the change, by default this behaviour is not enabled."
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.OnGUI.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.OnGUI.html",
    "title": "Method OnGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method OnGUI OnGUI(MaterialEditor, MaterialProperty[]) Method called when updating UI. Cannot be overridden in child classes, leave it alone. Declaration public sealed override void OnGUI(MaterialEditor materialEditor, MaterialProperty[] properties) Parameters Type Name Description MaterialEditor materialEditor material editor that uses this GUI. MaterialProperty [] properties List of MaterialProperties currently available on the selected shader. Overrides ShaderGUI.OnGUI(MaterialEditor, MaterialProperty[])"
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Shader.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Shader.html",
    "title": "Property Shader | Simple Shader Inspectors Documentation",
    "keywords": "Property Shader Shader Shader currently used Declaration public Shader Shader { get; } Property Value Type Description Shader Contains the shader this inspector is viewing at the moment. Implements ISimpleShaderInspector.Shader"
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Start.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Start.html",
    "title": "Method Start | Simple Shader Inspectors Documentation",
    "keywords": "Method Start Start() Initialization method where all the controls are instanced. You need to override it. Declaration protected abstract void Start() Remarks This method is called only once at the beginning of the inspector lifecycle, and it should be used to create all controls that are needed, and set properties like NeedsNonAnimatableUpdate or CustomLocalizationShaderName if a value different than the default one is needed. Keep in mind that MaterialProperties inside controls at this stage have not been filled in yet, so any attempt to use them would result in a NullReferenceException"
  },
  "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.StartChecks.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.StartChecks.html",
    "title": "Method StartChecks | Simple Shader Inspectors Documentation",
    "keywords": "Method StartChecks StartChecks(MaterialEditor) Checks done on the first cycle before UI is drawn. Declaration protected virtual void StartChecks(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor material editor that uses this GUI. Remarks This method is called after the Start() function, and at this stage material properties have been fetched and can be used for whatever is needed."
  },
  "api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.GetControlRectForSingleLine.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.GetControlRectForSingleLine.html",
    "title": "Method GetControlRectForSingleLine | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlRectForSingleLine GetControlRectForSingleLine() Public reimplementation of Unity's internal equivalent function. Declaration public static Rect GetControlRectForSingleLine() Returns Type Description Rect A rect of the size for a single line object."
  },
  "api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.html",
    "title": "Class SSIGUIHelper | Simple Shader Inspectors Documentation",
    "keywords": "Class SSIGUIHelper Helper class containing utility methods for IMGUI. Inheritance Object SSIGUIHelper Namespace : VRLabs.SimpleShaderInspectors Syntax public static class SSIGUIHelper Methods Name Description GetControlRectForSingleLine() Public reimplementation of Unity's internal equivalent function. TexturePropertyWithHDRColorFixed(MaterialEditor, GUIContent, MaterialProperty, MaterialProperty, Boolean) Draw a texture property with an HDR color field, it's the same as MaterialEditor.TexturePropertyWithHDRColor but it adds a fix for usage under indentation that would normally break it."
  },
  "api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.TexturePropertyWithHDRColorFixed.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.TexturePropertyWithHDRColorFixed.html",
    "title": "Method TexturePropertyWithHDRColorFixed | Simple Shader Inspectors Documentation",
    "keywords": "Method TexturePropertyWithHDRColorFixed TexturePropertyWithHDRColorFixed(MaterialEditor, GUIContent, MaterialProperty, MaterialProperty, Boolean) Draw a texture property with an HDR color field, it's the same as MaterialEditor.TexturePropertyWithHDRColor but it adds a fix for usage under indentation that would normally break it. Declaration public static Rect TexturePropertyWithHDRColorFixed(this MaterialEditor editor, GUIContent label, MaterialProperty textureProp, MaterialProperty colorProperty, bool showAlpha) Parameters Type Name Description MaterialEditor editor material editor GUIContent label label to show MaterialProperty textureProp texture material property MaterialProperty colorProperty color material property Boolean showAlpha show alpha channel Returns Type Description Rect Rect used to display the TextureProperty."
  },
  "api/VRLabs.SimpleShaderInspectors.SSIHelper.FetchProperties.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIHelper.FetchProperties.html",
    "title": "Method FetchProperties | Simple Shader Inspectors Documentation",
    "keywords": "Method FetchProperties FetchProperties(IEnumerable<SimpleControl>, MaterialProperty[]) Fetches properties for all the given controls. Declaration public static void FetchProperties(this IEnumerable<SimpleControl> controls, MaterialProperty[] properties) Parameters Type Name Description IEnumerable < SimpleControl > controls Controls needing to fetch properties. MaterialProperty [] properties Property array to fetch properties from."
  },
  "api/VRLabs.SimpleShaderInspectors.SSIHelper.FindNonAnimatablePropertyControls.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIHelper.FindNonAnimatablePropertyControls.html",
    "title": "Method FindNonAnimatablePropertyControls | Simple Shader Inspectors Documentation",
    "keywords": "Method FindNonAnimatablePropertyControls FindNonAnimatablePropertyControls(IEnumerable<SimpleControl>) Finds all controls that implement the INonAnimatableProperty interface. Declaration public static IEnumerable<INonAnimatableProperty> FindNonAnimatablePropertyControls(this IEnumerable<SimpleControl> controls) Parameters Type Name Description IEnumerable < SimpleControl > controls Controls to search from Returns Type Description IEnumerable < INonAnimatableProperty > An enumerable containing all INonAnimarableProperty instances found"
  },
  "api/VRLabs.SimpleShaderInspectors.SSIHelper.GetTextureDestinationPath.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIHelper.GetTextureDestinationPath.html",
    "title": "Method GetTextureDestinationPath | Simple Shader Inspectors Documentation",
    "keywords": "Method GetTextureDestinationPath GetTextureDestinationPath(Material, String) Get a path to save a texture relative to the material. Declaration public static string GetTextureDestinationPath(Material mat, string name) Parameters Type Name Description Material mat Material. String name Name of the texture. Returns Type Description String A path for the texture to save."
  },
  "api/VRLabs.SimpleShaderInspectors.SSIHelper.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIHelper.html",
    "title": "Class SSIHelper | Simple Shader Inspectors Documentation",
    "keywords": "Class SSIHelper Static class containing utility functions for Controls and Inspectors. Inheritance Object SSIHelper Namespace : VRLabs.SimpleShaderInspectors Syntax public static class SSIHelper Methods Name Description FetchProperties(IEnumerable<SimpleControl>, MaterialProperty[]) Fetches properties for all the given controls. FindNonAnimatablePropertyControls(IEnumerable<SimpleControl>) Finds all controls that implement the INonAnimatableProperty interface. GetTextureDestinationPath(Material, String) Get a path to save a texture relative to the material. SaveAndGetTexture(Texture2D, String, TextureWrapMode) Saves a texture to a specified path, and returns a reference of the new asset. SaveTexture(Texture2D, String, TextureWrapMode) Saves a texture to a specified path. SetInspector(IEnumerable<SimpleControl>, ISimpleShaderInspector, Boolean) Set the inspector of each control of the list. SetNonAnimatableProperties(MaterialEditor, IEnumerable<INonAnimatableProperty>) SetTextureImporterAlpha(Texture2D, Boolean) Set the texture alphaIsTransparency value. SetTextureImporterReadable(Texture2D, Boolean) Set the texture readable state. UpdateNonAnimatableProperties(IEnumerable<INonAnimatableProperty>, MaterialEditor, Boolean) Updates properties that are set to not be recorded during animation recording."
  },
  "api/VRLabs.SimpleShaderInspectors.SSIHelper.SaveAndGetTexture.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIHelper.SaveAndGetTexture.html",
    "title": "Method SaveAndGetTexture | Simple Shader Inspectors Documentation",
    "keywords": "Method SaveAndGetTexture SaveAndGetTexture(Texture2D, String, TextureWrapMode) Saves a texture to a specified path, and returns a reference of the new asset. Declaration public static Texture2D SaveAndGetTexture(Texture2D texture, string path, TextureWrapMode mode = TextureWrapMode.Repeat) Parameters Type Name Description Texture2D texture Texture to save. String path path where you want to save the texture. TextureWrapMode mode Texture wrap mode (default: Repeat). Returns Type Description Texture2D A Texture2D that references the newly created asset."
  },
  "api/VRLabs.SimpleShaderInspectors.SSIHelper.SaveTexture.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIHelper.SaveTexture.html",
    "title": "Method SaveTexture | Simple Shader Inspectors Documentation",
    "keywords": "Method SaveTexture SaveTexture(Texture2D, String, TextureWrapMode) Saves a texture to a specified path. Declaration public static void SaveTexture(Texture2D texture, string path, TextureWrapMode mode = TextureWrapMode.Repeat) Parameters Type Name Description Texture2D texture Texture to save. String path path where you want to save the texture. TextureWrapMode mode Texture wrap mode (default: Repeat)."
  },
  "api/VRLabs.SimpleShaderInspectors.SSIHelper.SetInspector.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIHelper.SetInspector.html",
    "title": "Method SetInspector | Simple Shader Inspectors Documentation",
    "keywords": "Method SetInspector SetInspector(IEnumerable<SimpleControl>, ISimpleShaderInspector, Boolean) Set the inspector of each control of the list. Declaration public static void SetInspector(this IEnumerable<SimpleControl> controls, ISimpleShaderInspector inspector, bool recursive = true) Parameters Type Name Description IEnumerable < SimpleControl > controls Controls this method extends from. ISimpleShaderInspector inspector Inspector to set Boolean recursive Is the set recursive to child controls"
  },
  "api/VRLabs.SimpleShaderInspectors.SSIHelper.SetNonAnimatableProperties.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIHelper.SetNonAnimatableProperties.html",
    "title": "Method SetNonAnimatableProperties | Simple Shader Inspectors Documentation",
    "keywords": "Method SetNonAnimatableProperties SetNonAnimatableProperties(MaterialEditor, IEnumerable<INonAnimatableProperty>) Declaration public static void SetNonAnimatableProperties(MaterialEditor materialEditor, IEnumerable<INonAnimatableProperty> nonAnimatableProperties) Parameters Type Name Description MaterialEditor materialEditor IEnumerable < INonAnimatableProperty > nonAnimatableProperties"
  },
  "api/VRLabs.SimpleShaderInspectors.SSIHelper.SetTextureImporterAlpha.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIHelper.SetTextureImporterAlpha.html",
    "title": "Method SetTextureImporterAlpha | Simple Shader Inspectors Documentation",
    "keywords": "Method SetTextureImporterAlpha SetTextureImporterAlpha(Texture2D, Boolean) Set the texture alphaIsTransparency value. Declaration public static void SetTextureImporterAlpha(Texture2D texture, bool alphaIsTransparency) Parameters Type Name Description Texture2D texture Texture. Boolean alphaIsTransparency alphaIsTransparency option to set."
  },
  "api/VRLabs.SimpleShaderInspectors.SSIHelper.SetTextureImporterReadable.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIHelper.SetTextureImporterReadable.html",
    "title": "Method SetTextureImporterReadable | Simple Shader Inspectors Documentation",
    "keywords": "Method SetTextureImporterReadable SetTextureImporterReadable(Texture2D, Boolean) Set the texture readable state. Declaration public static void SetTextureImporterReadable(Texture2D texture, bool isReadable) Parameters Type Name Description Texture2D texture Texture. Boolean isReadable Does the texture need to be readable."
  },
  "api/VRLabs.SimpleShaderInspectors.SSIHelper.UpdateNonAnimatableProperties.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.SSIHelper.UpdateNonAnimatableProperties.html",
    "title": "Method UpdateNonAnimatableProperties | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateNonAnimatableProperties UpdateNonAnimatableProperties(IEnumerable<INonAnimatableProperty>, MaterialEditor, Boolean) Updates properties that are set to not be recorded during animation recording. Declaration public static void UpdateNonAnimatableProperties(IEnumerable<INonAnimatableProperty> controls, MaterialEditor materialEditor, bool updateOutsideAnimation = true) Parameters Type Name Description IEnumerable < INonAnimatableProperty > controls Controls to check. MaterialEditor materialEditor Material editor. Boolean updateOutsideAnimation If the animations will actually be changed outside of animation recording"
  },
  "api/VRLabs.SimpleShaderInspectors.StaticDictionaries.BoolDictionary.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.StaticDictionaries.BoolDictionary.html",
    "title": "Property BoolDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Property BoolDictionary BoolDictionary Dictionary containing boolean values. Declaration public static TimedDictionary<string, bool> BoolDictionary { get; } Property Value Type Description TimedDictionary < String , Boolean >"
  },
  "api/VRLabs.SimpleShaderInspectors.StaticDictionaries.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.StaticDictionaries.html",
    "title": "Class StaticDictionaries | Simple Shader Inspectors Documentation",
    "keywords": "Class StaticDictionaries Static class containing dictionaries that can be used by controls for various needs. Inheritance Object StaticDictionaries Namespace : VRLabs.SimpleShaderInspectors Syntax public static class StaticDictionaries Properties Name Description BoolDictionary Dictionary containing boolean values. IntDictionary Dictionary containing integer values."
  },
  "api/VRLabs.SimpleShaderInspectors.StaticDictionaries.IntDictionary.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.StaticDictionaries.IntDictionary.html",
    "title": "Property IntDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Property IntDictionary IntDictionary Dictionary containing integer values. Declaration public static TimedDictionary<string, int> IntDictionary { get; } Property Value Type Description TimedDictionary < String , Int32 >"
  },
  "api/VRLabs.SimpleShaderInspectors.StaticDictionaries.Startup.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.StaticDictionaries.Startup.html",
    "title": "Class StaticDictionaries.Startup | Simple Shader Inspectors Documentation",
    "keywords": "Class StaticDictionaries.Startup Inheritance Object StaticDictionaries.Startup Namespace : VRLabs.SimpleShaderInspectors Syntax [InitializeOnLoad] public class Startup"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.BoldCenter.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.BoldCenter.html",
    "title": "Property BoldCenter | Simple Shader Inspectors Documentation",
    "keywords": "Property BoldCenter BoldCenter Style of a bold label with a center anchor. Declaration public static GUIStyle BoldCenter { get; } Property Value Type Description GUIStyle"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.BoldLeft.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.BoldLeft.html",
    "title": "Property BoldLeft | Simple Shader Inspectors Documentation",
    "keywords": "Property BoldLeft BoldLeft Style of a bold label with a left anchor. Declaration public static GUIStyle BoldLeft { get; } Property Value Type Description GUIStyle"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.BottomCenterLabel.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.BottomCenterLabel.html",
    "title": "Property BottomCenterLabel | Simple Shader Inspectors Documentation",
    "keywords": "Property BottomCenterLabel BottomCenterLabel Style of a label with a center anchor. Declaration public static GUIStyle BottomCenterLabel { get; } Property Value Type Description GUIStyle"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.Box.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.Box.html",
    "title": "Property Box | Simple Shader Inspectors Documentation",
    "keywords": "Property Box Box Box-like Style. Declaration public static GUIStyle Box { get; } Property Value Type Description GUIStyle"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.BoxHeavyBorder.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.BoxHeavyBorder.html",
    "title": "Property BoxHeavyBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property BoxHeavyBorder BoxHeavyBorder Style for a box. The border is less transparent than background. Declaration public static GUIStyle BoxHeavyBorder { get; } Property Value Type Description GUIStyle Remarks The border, being less transparent than the background, will result lighter than the background on dark themes, darker than the background on light themes, and with a less vivid color compared to the background when a custom background color is used."
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.BoxLightBorder.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.BoxLightBorder.html",
    "title": "Property BoxLightBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property BoxLightBorder BoxLightBorder Style for a box. The border is more transparent than background. Declaration public static GUIStyle BoxLightBorder { get; } Property Value Type Description GUIStyle Remarks The border, being more transparent than the background, will result darker than the background on dark themes, lighter than the background on light themes, and with a more vivid color compared to the background when a custom background color is used."
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.Bubble.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.Bubble.html",
    "title": "Property Bubble | Simple Shader Inspectors Documentation",
    "keywords": "Property Bubble Bubble Style that uses the same background of a button. Declaration public static GUIStyle Bubble { get; } Property Value Type Description GUIStyle"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.CenterLabel.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.CenterLabel.html",
    "title": "Property CenterLabel | Simple Shader Inspectors Documentation",
    "keywords": "Property CenterLabel CenterLabel Style of a label with a center anchor. Declaration public static GUIStyle CenterLabel { get; } Property Value Type Description GUIStyle"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.CreateStyleFromSprite.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.CreateStyleFromSprite.html",
    "title": "Method CreateStyleFromSprite | Simple Shader Inspectors Documentation",
    "keywords": "Method CreateStyleFromSprite CreateStyleFromSprite(String, String, String, String) Creates a GUIStyle using the given sprite names. Declaration public static GUIStyle CreateStyleFromSprite(string normal, string active = null, string focused = null, string hover = null) Parameters Type Name Description String normal Sprite to use on normal state. String active Sprite to use on active state. String focused Sprite to use on focused state. String hover Sprite to use on hover state. Returns Type Description GUIStyle The generated GUIStyle CreateStyleFromSprite(RectOffset, String, String, String, String) Creates a GUIStyle using the given sprite names and padding. Declaration public static GUIStyle CreateStyleFromSprite(RectOffset padding, string normal, string active = null, string focused = null, string hover = null) Parameters Type Name Description RectOffset padding Padding of the GUIStyle. String normal Sprite to use on normal state. String active Sprite to use on active state. String focused Sprite to use on focused state. String hover Sprite to use on hover state. Returns Type Description GUIStyle The generated GUIStyle"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.DeleteIcon.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.DeleteIcon.html",
    "title": "Property DeleteIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property DeleteIcon DeleteIcon Style for a delete button. Declaration public static GUIStyle DeleteIcon { get; } Property Value Type Description GUIStyle"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.DownIcon.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.DownIcon.html",
    "title": "Property DownIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property DownIcon DownIcon Style for a down button. Declaration public static GUIStyle DownIcon { get; } Property Value Type Description GUIStyle"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.GearIcon.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.GearIcon.html",
    "title": "Property GearIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property GearIcon GearIcon Style for a gear icon. Declaration public static GUIStyle GearIcon { get; } Property Value Type Description GUIStyle"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.html",
    "title": "Class Styles | Simple Shader Inspectors Documentation",
    "keywords": "Class Styles Default styles available natively in SimpleShaderInspectors. Inheritance Object Styles Namespace : VRLabs.SimpleShaderInspectors Syntax public static class Styles Properties Name Description BoldCenter Style of a bold label with a center anchor. BoldLeft Style of a bold label with a left anchor. BottomCenterLabel Style of a label with a center anchor. Box Box-like Style. BoxHeavyBorder Style for a box. The border is less transparent than background. BoxLightBorder Style for a box. The border is more transparent than background. Bubble Style that uses the same background of a button. CenterLabel Style of a label with a center anchor. DeleteIcon Style for a delete button. DownIcon Style for a down button. GearIcon Style for a gear icon. MultilineLabel Style of a label that can take multiple lines. RightLabel Style of a label with a right anchor. SSILogoDark Simple Shader Inspectors logo for dark theme. SSILogoLight Simple Shader Inspectors logo for light theme. TextureBoxHeavyBorder Style for a box pointing to a texture upwards. The border is less transparent than background. TextureBoxLightBorder Style for a box pointing to a texture upwards. The border is more transparent than background. UpIcon Style for a up button. Methods Name Description CreateStyleFromSprite(String, String, String, String) Creates a GUIStyle using the given sprite names. CreateStyleFromSprite(RectOffset, String, String, String, String) Creates a GUIStyle using the given sprite names and padding."
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.MultilineLabel.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.MultilineLabel.html",
    "title": "Property MultilineLabel | Simple Shader Inspectors Documentation",
    "keywords": "Property MultilineLabel MultilineLabel Style of a label that can take multiple lines. Declaration public static GUIStyle MultilineLabel { get; } Property Value Type Description GUIStyle"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.RightLabel.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.RightLabel.html",
    "title": "Property RightLabel | Simple Shader Inspectors Documentation",
    "keywords": "Property RightLabel RightLabel Style of a label with a right anchor. Declaration public static GUIStyle RightLabel { get; } Property Value Type Description GUIStyle"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.SSILogoDark.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.SSILogoDark.html",
    "title": "Property SSILogoDark | Simple Shader Inspectors Documentation",
    "keywords": "Property SSILogoDark SSILogoDark Simple Shader Inspectors logo for dark theme. Declaration public static Texture2D SSILogoDark { get; } Property Value Type Description Texture2D"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.SSILogoLight.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.SSILogoLight.html",
    "title": "Property SSILogoLight | Simple Shader Inspectors Documentation",
    "keywords": "Property SSILogoLight SSILogoLight Simple Shader Inspectors logo for light theme. Declaration public static Texture2D SSILogoLight { get; } Property Value Type Description Texture2D"
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.TextureBoxHeavyBorder.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.TextureBoxHeavyBorder.html",
    "title": "Property TextureBoxHeavyBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property TextureBoxHeavyBorder TextureBoxHeavyBorder Style for a box pointing to a texture upwards. The border is less transparent than background. Declaration public static GUIStyle TextureBoxHeavyBorder { get; } Property Value Type Description GUIStyle Remarks The border, being less transparent than the background, will result lighter than the background on dark themes, darker than the background on light themes, and with a less vivid color compared to the background when a custom background color is used."
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.TextureBoxLightBorder.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.TextureBoxLightBorder.html",
    "title": "Property TextureBoxLightBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property TextureBoxLightBorder TextureBoxLightBorder Style for a box pointing to a texture upwards. The border is more transparent than background. Declaration public static GUIStyle TextureBoxLightBorder { get; } Property Value Type Description GUIStyle Remarks The border, being more transparent than the background, will result darker than the background on dark themes, lighter than the background on light themes, and with a more vivid color compared to the background when a custom background color is used."
  },
  "api/VRLabs.SimpleShaderInspectors.Styles.UpIcon.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Styles.UpIcon.html",
    "title": "Property UpIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property UpIcon UpIcon Style for a up button. Declaration public static GUIStyle UpIcon { get; } Property Value Type Description GUIStyle"
  },
  "api/VRLabs.SimpleShaderInspectors.Textures.ColorIcon.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Textures.ColorIcon.html",
    "title": "Property ColorIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property ColorIcon ColorIcon Texture used for a color selector internal part. Declaration public static Texture2D ColorIcon { get; } Property Value Type Description Texture2D"
  },
  "api/VRLabs.SimpleShaderInspectors.Textures.ColorIconBorder.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Textures.ColorIconBorder.html",
    "title": "Property ColorIconBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property ColorIconBorder ColorIconBorder Texture used for a color selector border. Declaration public static Texture2D ColorIconBorder { get; } Property Value Type Description Texture2D"
  },
  "api/VRLabs.SimpleShaderInspectors.Textures.ColorIconBorderSelected.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Textures.ColorIconBorderSelected.html",
    "title": "Property ColorIconBorderSelected | Simple Shader Inspectors Documentation",
    "keywords": "Property ColorIconBorderSelected ColorIconBorderSelected Texture used for a color selector border when selected. Declaration public static Texture2D ColorIconBorderSelected { get; } Property Value Type Description Texture2D"
  },
  "api/VRLabs.SimpleShaderInspectors.Textures.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Textures.html",
    "title": "Class Textures | Simple Shader Inspectors Documentation",
    "keywords": "Class Textures Default textures available natively in Simple Shader Inspectors. Inheritance Object Textures Namespace : VRLabs.SimpleShaderInspectors Syntax public static class Textures Properties Name Description ColorIcon Texture used for a color selector internal part. ColorIconBorder Texture used for a color selector border. ColorIconBorderSelected Texture used for a color selector border when selected."
  },
  "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.ClearOld.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.ClearOld.html",
    "title": "Method ClearOld | Simple Shader Inspectors Documentation",
    "keywords": "Method ClearOld ClearOld() Clears values older than 30 days from the dictionary. Declaration public void ClearOld()"
  },
  "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.-ctor.html",
    "title": "Constructor TimedDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Constructor TimedDictionary TimedDictionary() Default constructor Declaration public TimedDictionary()"
  },
  "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.GetSerializedDictionary.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.GetSerializedDictionary.html",
    "title": "Method GetSerializedDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Method GetSerializedDictionary GetSerializedDictionary() Gets a list of all values stored in the dictionary in an easier to serialize form. Declaration public List<(TKey, TValue, DateTime)> GetSerializedDictionary() Returns Type Description List < (T1, T2, T3) <TKey, TValue, DateTime >> A list with the data"
  },
  "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.html",
    "title": "Class TimedDictionary<TKey, TValue> | Simple Shader Inspectors Documentation",
    "keywords": "Class TimedDictionary<TKey, TValue> Class used to identify a dictionary that also contains the date of last edit. Inheritance Object TimedDictionary<TKey, TValue> Namespace : VRLabs.SimpleShaderInspectors Syntax public class TimedDictionary<TKey, TValue> Type Parameters TKey Type of the key TValue Type of the value Constructors Name Description TimedDictionary() Default constructor Properties Name Description Keys Keys stored in the dictionary Methods Name Description ClearOld() Clears values older than 30 days from the dictionary. GetSerializedDictionary() Gets a list of all values stored in the dictionary in an easier to serialize form. SetValue(TKey, TValue) Set value with the specified key SetValue(TKey, TValue, DateTime) Set value and inserted date with the specified key. should be used only when loading the dictionary from storage. TryGetValue(TKey, out TValue) Try to get the value with the specified key"
  },
  "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.Keys.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.Keys.html",
    "title": "Property Keys | Simple Shader Inspectors Documentation",
    "keywords": "Property Keys Keys Keys stored in the dictionary Declaration public Dictionary<TKey, (DateTime, TValue)>.KeyCollection Keys { get; } Property Value Type Description Dictionary.KeyCollection <>"
  },
  "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.SetValue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.SetValue.html",
    "title": "Method SetValue | Simple Shader Inspectors Documentation",
    "keywords": "Method SetValue SetValue(TKey, TValue) Set value with the specified key Declaration public void SetValue(TKey key, TValue value) Parameters Type Name Description TKey key Key to use TValue value value to insert SetValue(TKey, TValue, DateTime) Set value and inserted date with the specified key. should be used only when loading the dictionary from storage. Declaration public void SetValue(TKey key, TValue value, DateTime date) Parameters Type Name Description TKey key Key to use TValue value value to insert DateTime date date to insert"
  },
  "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.TryGetValue.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.TryGetValue.html",
    "title": "Method TryGetValue | Simple Shader Inspectors Documentation",
    "keywords": "Method TryGetValue TryGetValue(TKey, out TValue) Try to get the value with the specified key Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key Key to get the value from TValue value return value Returns Type Description Boolean true if the value was in the dictionary, false otherwise"
  },
  "api/VRLabs.SimpleShaderInspectors.Tools.ChainableGeneratorWindow.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Tools.ChainableGeneratorWindow.html",
    "title": "Class ChainableGeneratorWindow | Simple Shader Inspectors Documentation",
    "keywords": "Class ChainableGeneratorWindow Editor window that embeds the Simple Shader Inspectors library into any custom editor folder with customized namespace. Inheritance Object Object ScriptableObject EditorWindow ChainableGeneratorWindow Namespace : VRLabs.SimpleShaderInspectors.Tools Syntax public class ChainableGeneratorWindow : EditorWindow"
  },
  "api/VRLabs.SimpleShaderInspectors.Tools.EmbedLibraryEditor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Tools.EmbedLibraryEditor.html",
    "title": "Class EmbedLibraryEditor | Simple Shader Inspectors Documentation",
    "keywords": "Class EmbedLibraryEditor Editor window that embeds the Simple Shader Inspectors library into any custom editor folder with customized namespace. Inheritance Object Object ScriptableObject EditorWindow EmbedLibraryEditor Namespace : VRLabs.SimpleShaderInspectors.Tools Syntax public class EmbedLibraryEditor : EditorWindow Fields Name Description IDENTIFIER"
  },
  "api/VRLabs.SimpleShaderInspectors.Tools.EmbedLibraryEditor.IDENTIFIER.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Tools.EmbedLibraryEditor.IDENTIFIER.html",
    "title": "Field IDENTIFIER | Simple Shader Inspectors Documentation",
    "keywords": "Field IDENTIFIER Namespace : VRLabs.SimpleShaderInspectors.Tools Syntax public const string IDENTIFIER = \"SSI\" Returns String"
  },
  "api/VRLabs.SimpleShaderInspectors.Tools.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Tools.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors.Tools | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors.Tools Classes ChainableGeneratorWindow Editor window that embeds the Simple Shader Inspectors library into any custom editor folder with customized namespace. EmbedLibraryEditor Editor window that embeds the Simple Shader Inspectors library into any custom editor folder with customized namespace. LocalizationEditorWindow Editor window that enables the user to modify json localization data."
  },
  "api/VRLabs.SimpleShaderInspectors.Tools.LocalizationEditorWindow.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Tools.LocalizationEditorWindow.html",
    "title": "Class LocalizationEditorWindow | Simple Shader Inspectors Documentation",
    "keywords": "Class LocalizationEditorWindow Editor window that enables the user to modify json localization data. Inheritance Object Object ScriptableObject EditorWindow LocalizationEditorWindow Namespace : VRLabs.SimpleShaderInspectors.Tools Syntax public class LocalizationEditorWindow : EditorWindow"
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientBlendMode.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientBlendMode.html",
    "title": "Enum GradientBlendMode | Simple Shader Inspectors Documentation",
    "keywords": "Enum GradientBlendMode Enum indicating the blend mode of the gradient texture. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax public enum GradientBlendMode Fields Name Description Fixed Linear"
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.AddKey.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.AddKey.html",
    "title": "Method AddKey | Simple Shader Inspectors Documentation",
    "keywords": "Method AddKey AddKey(Color, Single) Adds a new key, and removes any key that is in the same time. Declaration public int AddKey(Color color, float time) Parameters Type Name Description Color color Color of the key Single time Time of the key Returns Type Description Int32 The key index"
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.BlendMode.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.BlendMode.html",
    "title": "Field BlendMode | Simple Shader Inspectors Documentation",
    "keywords": "Field BlendMode Blend mode between keys. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax public GradientBlendMode BlendMode Returns GradientBlendMode"
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.Color.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.Color.html",
    "title": "Field Color | Simple Shader Inspectors Documentation",
    "keywords": "Field Color Color of the key. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax [SerializeField] public Color Color Returns Color"
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.-ctor.html",
    "title": "Constructor ColorKey | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ColorKey ColorKey(Color, Single) Default constructor of GradientTexture.ColorKey Declaration public ColorKey(Color color, float time) Parameters Type Name Description Color color Color of the key. Single time Time of the key."
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.html",
    "title": "Struct GradientTexture.ColorKey | Simple Shader Inspectors Documentation",
    "keywords": "Struct GradientTexture.ColorKey Structure containing a color and a float indicating at which time the color is. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax [Serializable] public struct ColorKey Constructors Name Description ColorKey(Color, Single) Default constructor of GradientTexture.ColorKey Fields Name Description Color Color of the key. Time Time of the key."
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.Time.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.Time.html",
    "title": "Field Time | Simple Shader Inspectors Documentation",
    "keywords": "Field Time Time of the key. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax [SerializeField] public float Time Returns Single"
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.-ctor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.-ctor.html",
    "title": "Constructor GradientTexture | Simple Shader Inspectors Documentation",
    "keywords": "Constructor GradientTexture GradientTexture(Int32) Default constructor. Declaration public GradientTexture(int width) Parameters Type Name Description Int32 width With of the result gradient texture."
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.Evaluate.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.Evaluate.html",
    "title": "Method Evaluate | Simple Shader Inspectors Documentation",
    "keywords": "Method Evaluate Evaluate(Single) Returns a color at the specified time. Declaration public Color Evaluate(float time) Parameters Type Name Description Single time Time of the color to sample. Returns Type Description Color Color at selected time."
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.GetTexture.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.GetTexture.html",
    "title": "Method GetTexture | Simple Shader Inspectors Documentation",
    "keywords": "Method GetTexture GetTexture() Get gradient texture. Declaration public Texture2D GetTexture() Returns Type Description Texture2D Texture of the gradient."
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.html",
    "title": "Class GradientTexture | Simple Shader Inspectors Documentation",
    "keywords": "Class GradientTexture Utility class used when creating gradient editors. Inheritance Object GradientTexture Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax public class GradientTexture Constructors Name Description GradientTexture(Int32) Default constructor. Fields Name Description BlendMode Blend mode between keys. Keys List of gradient keys. Methods Name Description AddKey(Color, Single) Adds a new key, and removes any key that is in the same time. Evaluate(Single) Returns a color at the specified time. GetTexture() Get gradient texture. RemoveKey(Int32) Removes a key at the selected index. UpdateKeyColor(Int32, Color) Updates the key color. UpdateKeyTime(Int32, Single) Updates the key time position. UpdateTexture() Updates the internal gradient Texture. UpdateTextureWidth(Int32) Updates the width of the result texture."
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.Keys.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.Keys.html",
    "title": "Field Keys | Simple Shader Inspectors Documentation",
    "keywords": "Field Keys List of gradient keys. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax [SerializeField] public List<GradientTexture.ColorKey> Keys Returns List < GradientTexture.ColorKey >"
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.RemoveKey.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.RemoveKey.html",
    "title": "Method RemoveKey | Simple Shader Inspectors Documentation",
    "keywords": "Method RemoveKey RemoveKey(Int32) Removes a key at the selected index. Declaration public void RemoveKey(int index) Parameters Type Name Description Int32 index Index of the key to remove."
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateKeyColor.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateKeyColor.html",
    "title": "Method UpdateKeyColor | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateKeyColor UpdateKeyColor(Int32, Color) Updates the key color. Declaration public void UpdateKeyColor(int index, Color col) Parameters Type Name Description Int32 index Index of the key. Color col Color of the key."
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateKeyTime.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateKeyTime.html",
    "title": "Method UpdateKeyTime | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateKeyTime UpdateKeyTime(Int32, Single) Updates the key time position. Declaration public int UpdateKeyTime(int index, float time) Parameters Type Name Description Int32 index Index of the key to update. Single time New time. Returns Type Description Int32 The new index of the key."
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateTexture.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateTexture.html",
    "title": "Method UpdateTexture | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateTexture UpdateTexture() Updates the internal gradient Texture. Declaration public void UpdateTexture()"
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateTextureWidth.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateTextureWidth.html",
    "title": "Method UpdateTextureWidth | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateTextureWidth UpdateTextureWidth(Int32) Updates the width of the result texture. Declaration public void UpdateTextureWidth(int width) Parameters Type Name Description Int32 width Width."
  },
  "api/VRLabs.SimpleShaderInspectors.Utility.html": {
    "href": "api/VRLabs.SimpleShaderInspectors.Utility.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors.Utility | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors.Utility Classes GradientTexture Utility class used when creating gradient editors. Structs GradientTexture.ColorKey Structure containing a color and a float indicating at which time the color is. Enums GradientBlendMode Enum indicating the blend mode of the gradient texture."
  },
  "guides/ControlsDevelopment/FirstControl.html": {
    "href": "guides/ControlsDevelopment/FirstControl.html",
    "title": "First control | Simple Shader Inspectors Documentation",
    "keywords": "First Control Controls are the central piece of Simple Shader Inspectors, so it's only natural that at some point you may need to make your own controls if you're doing something particular with your shader and you want an user friendly way to control it in the inspector. And luckily making a customized control is not too hard. Caution Unlike just using the API, making custom controls will require you to have a basic knowledge on how to manually display stuff in the inspector using MaterialProperty and MaterialEditor , how the IMGUI systems works. First things first, let's look at an empty template: using UnityEditor; using UnityEngine; using VRLabs.SimpleShaderInspectors; namespace TestControlNamespace { public class MyCustomControl : PropertyControl { public MyCustomControl(string propertyName) : base(propertyName) { } protected override void ControlGUI(MaterialEditor materialEditor) { } } } As we can see the class MyCustomControl inherits from PropertyControl , which is the base class for all controls that use one material property. Note You can inherit from other controls as well if you want to inherit some of their specific functionalities. Caution If you want to make a control that doesn't use any material property, the base class should be SimpleControl . PropertyControl also inherits from this class. When inheriting from PropertyControl you will always need to override the ControlGUI method. This method is what gets called each time the inspector has to draw your control, therefore all the GUI stuff goes there. The constructor should always call the base constructor to correctly initialize the PropertyName string (you can initialize it manually if you want, it's just simpler to pass the string to the base constructor). After that, you're free to do whatever you want with the constructor. Let's start customize it to our needs, we will make a control that will only take 1 texture and diplays it, but also had an additional label in the row below for a longer description. To do that we need an additional string containing the text we wanna show: public class MyCustomControl : PropertyControl { public string ExtraText { get; protected set; } Tip We have the set as protected cause we don't want it be modified from the outside, but we still want to it to be usable if someone will ever inherit from this control. Now we need the constructor to initialize the label as well. public MyCustomControl(string propertyName, string extraText) : base(propertyName) { ExtraText = extraText; } Now we need to draw them in the ControlGUI method: protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); materialEditor.TexturePropertySingleLine(Content, Property); HasPropertyUpdated = EditorGUI.EndChangeCheck(); GUILayout.Label(ExtraText); } As you see, we did not fetch the material property, cause it gets automatically fetched for us by the inspector, so we get right to the draw part and we do a BeginChangeCheck so that everything we do next will be tracked for changes. Then we draw our texture property, end the change check assigning the result to HasPropertyUpdated , and draw our additional label. You can see that we use the Content field inherited from PropertyControl as a label for our texture. This is cause the localization system fetched the localized control string for us, so we don't need to worry about it. Note In this example the additional label uses a predefined string, this is not optimal if we will have multiple localizations, here we will revisit the control to add support for another localized string. As a final touch let's make the user able to decide whether or not he wants to display the additional label: public string ExtraText { get; protected set; } public bool IsExtraLabelVisible { get; set; } public MyCustomControl(string propertyName, string extraText, bool isExtraLabelVisible = true) : base(propertyName) { ExtraText = extraText; IsExtraLabelVisible = isExtraLabelVisible; } Note Doing bool isExtraLabelVisible = true makes so the parameter is not required to make the method call, and if the parameter is not given a default value is used instead (in this case true ). protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); materialEditor.TexturePropertySingleLine(Content, Property); HasPropertyUpdated = EditorGUI.EndChangeCheck(); if (IsExtraLabelVisible) { GUILayout.Label(ExtraText); } } Adding the New Control extension method At this state, the control technically already works, but it's a fairly different experience using this compared to the default ones, since we have to manually call the constructor and assign the control to the list in the inspector. This is because there are no Extension methods to create and assing the control. Simple Shader Inspectors comes with a tool that will automatically generate all chainable methods required from a namespace, and saves it into a class. It can be found at VRLabs/Simple Shader Innspectors/Generate Chainable Methods . Once opened you will need to select where you want to save the generated files and which namespace should be looked for: The tool will generate all chainable constructors and methods for all controls inside the selected namespace and subnamespaces. Making a Property chainable Usually you want the extension method to exactly match the constructor parameters, but in our case we did not put the boolean for the label. This is intentional, cause now we're gonna move that boolean out of the constructor and add a chainable attribute to the property definition. public string ExtraText { get; protected set; } [Chainable] public bool IsExtraLabelVisible { get; set; } public MyCustomControl(string propertyName, string extraText) : base(propertyName) { ExtraText = extraText; IsExtraLabelVisible = true; } By adding the Chainable attribute you're telling the generator script to also generate a chainable method for this property (you will need to run the generator script again). Now the question is: when should a field be initialized with a parameter in the constructor vs having an extension method? It depends, on classes that are not meant to have child classes or has fields where it's required to have a value different from a default in order to work, then initializing them with a dedicated parameter in the constructor makes sense, in other cases you may just give a default value to it in the constructor and let the user decide if he wants to modify it by calling an extension method. You can also have both at the same time, if you so desire. Final example class using UnityEditor; using UnityEngine; using VRLabs.SimpleShaderInspectors; namespace TestControlNamespace { public class MyCustomControl : PropertyControl { public string ExtraText { get; protected set; } [Chainable] public bool IsExtraLabelVisible { get; set; } public MyCustomControl(string propertyName, string extraText) : base(propertyName) { ExtraText = extraText; IsExtraLabelVisible = true; } protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); materialEditor.TexturePropertySingleLine(Content, Property); HasPropertyUpdated = EditorGUI.EndChangeCheck(); if (IsExtraLabelVisible) { GUILayout.Label(ExtraText); } } } }"
  },
  "guides/ControlsDevelopment/IAdditionalLocalization.html": {
    "href": "guides/ControlsDevelopment/IAdditionalLocalization.html",
    "title": "Using IAdditionalLocalization | Simple Shader Inspectors Documentation",
    "keywords": "Using IAdditionalLocalization In the last example we could not have localized content for the extra label cause by default each control only has a single Content property. This is quite limiting in case you want to make a control that handles multiple material properties at once (in this case you will need another interface as well), or that needs some extra text for various reasons. And is here that the IAdditionalLocalization comes into play. This interface is used to let the localization system know that the control that implements it needs more than one localization string. public class MyCustomControl : PropertyControl, IAdditionalLocalization { public AdditionalLocalization[] AdditionalContent { get; set; } Implementing the interface will add the AdditionalContent array of type AdditionalLocalization . This type only contains the Name string which contains the name of the additional content, and the GUIContent we want to retrieve. To use it, we just need to initialize the array with the number of additional strings we want, and assign the names: public MyCustomControl(string propertyName, string extraText) : base(propertyName) { ExtraText = extraText; IsExtraLabelVisible = true; AdditionalContent = new AdditionalLocalization[1]; AdditionalContent[0] = new AdditionalLocalization { Name = \"extraProperty\" }; } Tip If you have questions about the way the AdditionalLocalization object has been initialized here, check here . Note The localization system when searching for strings of the extra localization will combine the control alias and the extra localization name in this way: Alias_AdditionalContentName . This is ensure that each control instance has a unique full name if they have different aliases. Caution If you have more than 1 or 2 additional content to fetch, manually instancing each element may become annoying and bloat your constructor a bit too much. in this case you can have a static array of strings with all your names in the order you want to access them, and in the constructor use InizializeLocalizationWithNames then we just need to use the Content inside the AdditionalContent array we created where we need it, in our case inside the Label call: if (IsExtraLabelVisible) { GUILayout.Label(AdditionalContent[0].Content); } Now the label field will also have its own localized content. Note With this change ExtraText becomes useless, so you can safely remove any reference of it on constructors/methods With this system you can add as much text as you want in your own controls with full support for localization, and is fairly easy to just plug it in and have it working."
  },
  "guides/ControlsDevelopment/IAdditionalProperties.html": {
    "href": "guides/ControlsDevelopment/IAdditionalProperties.html",
    "title": "Using IAdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Using IAdditionalProperties In some cases you may need to use multiple material properties in a single control. An example is making a texture control similar in functionality to MaterialEditor.TexturePropertySingleLine . Just like the IAdditionalLocalization interface can make you get multiple localized strings, IAdditionalProperties can be used for material properties themself. The biggest difference is that in this case you need a way to get the material property name of the additional properties from the inspector. This time let's check the TextureControl code that Simple Shader Inspectors comes with, since it uses this interface to have 2 extra properties. The file can be found inside \"VRLabs/SimpleShaderInspectors/Editor/Controls/TextureControl.cs\" . Tip This is also a good time to see a real control use case instead of examples that are done for the sake of an example. First let's look at the implementation of the IAdditionalProperties interface. public class TextureControl : PropertyControl, IAdditionalProperties { //.. public AdditionalProperty[] AdditionalProperties { get; set; } //.. As you can see, to implement the interface we need to add an array of type AdditionalProperty[] , which will contain both our property name string and out material property that will automatically be fetched by the inspector. let's now check in the constructor: public TextureControl(string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) : base(propertyName) { AdditionalProperties = new AdditionalProperty[2]; AdditionalProperties[0] = new AdditionalProperty(extraPropertyName1); if (!string.IsNullOrWhiteSpace(extraPropertyName1)) _hasExtra1 = true; AdditionalProperties[1] = new AdditionalProperty(extraPropertyName2); if (!string.IsNullOrWhiteSpace(extraPropertyName2)) _hasExtra2 = true; Here the array is initialized with an array length of 2, and then we initialize both of them by giving them the name of the material property they need to fetch. (we are purposely ignoring the 2 extra checks since they're out of the scope of this page). Now during ControlGUI we can use them as we wish (the example below is taken from the DrawTextureSingleLine method, but that method is called inside ControlGUI so for our example is the same thing). if (_hasExtra2) { materialEditor.TexturePropertySingleLine(Content, Property, AdditionalProperties[0].Property, AdditionalProperties[1].Property); } else if (_hasExtra1) { if (AdditionalProperties[0].Property.type == MaterialProperty.PropType.Color && HasHDRColor) materialEditor.TexturePropertyWithHDRColorFixed(Content, Property, AdditionalProperties[0].Property, true); else materialEditor.TexturePropertySingleLine(Content, Property, AdditionalProperties[0].Property); } else { materialEditor.TexturePropertySingleLine(Content, Property); } Overuse of IAdditionalProperties interface While this is incredibly useful in a lot of cases, a serious risk of abusing this interface is creating giant controls that handle half of the inspector alone. Let's take in consideration an hypotetical control that has 2 textures, one for a color map and one for a normal map, at first look it would make sense to merge them in a single control, due to their frequent use together, but it's really not. Before including more properties to a control, ask yourself the following questions: Are these properties directly correlated to each other in some way? Do they lose their overall meaning if split apart in 2 completely different areas of the inspector? If the answer is no to one of them, you probably should consider other options to handle them instead of including them in a single control. In case of the official texture control the answer to them is: Yes, because the second and third properties in this control should be used for properties that directly manipulate the texture (for example a texture color, or a normal map intensity). Yes, because if, for example, you put your texture field at the beginning and its color at the end of the inspector, when you reach the color you have no real reference to what that color modifies, maybe wrongly implying that the color is for standalone effects when in reality it just applies a tint to the texture. If we take into consideration our dual texture control the answers differ a bit: Not really, the 2 textures are used together really often, but they represent really different informations. No, if they are in 2 different areas of the inspector they still have their full meaning, and having them separated marks even more their independent functions. At worst the inspector would look a bit messy if they're not in the same general area. As third general rule: if you have more than 5-6 properties in a single control, there's a good chance you're doing something conceptually wrong. And if all those properties are really that intertwined between each other, let us know what the hell you're doing with that shader, cause we're definitely curious to see it."
  },
  "guides/ControlsDevelopment/IControlContainer.html": {
    "href": "guides/ControlsDevelopment/IControlContainer.html",
    "title": "Using IControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Using IControlContainer Sometimes you may want to have a control being able to manage additional controls under it, for example you want a control that will show another control if its property value is above a certain threshold. This would technically be possible by just checking the value change in the inspector and enabling/disabling the controls that should be affected, but that requires to write code to handle that for every occasion, and we want it to be automatic. To do that we will need to use the IControlContainer interface. Let's take our custom control template and implement the IControlContainer interface: using System.Collections.Generic; using UnityEditor; using VRLabs.SimpleShaderInspectors; namespace TestControlNamespace { public class MyCustomControl : PropertyControl, IControlContainer { public MyCustomControl(string propertyName) : base(propertyName) { } protected override void ControlGUI(MaterialEditor materialEditor) { } public void AddControl(SimpleControl control) { } public IEnumerable<SimpleControl> GetControlList() { } } } The implement the interface you need to implement the AddControl and GetControlList methods in you class. The first method is generally used in the generated chainable methods to add a new control under this one, meanwhile the second one is used when the inspector fetches properties. How you store those controls is up to you, in this case we will use a list. And in the meantime, we also add a simple range property and get the control to do something: using System.Collections.Generic; using UnityEditor; using VRLabs.SimpleShaderInspectors; namespace TestControlNamespace { public class MyCustomControl : PropertyControl, IControlContainer { public List<SimpleControl> Controls { get; set; } public MyCustomControl(string propertyName) : base(propertyName) { Controls = new List<SimpleControl>(); } protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); materialEditor.RangeProperty(Property, Content.text); HasPropertyUpdated = EditorGUI.EndChangeCheck(); } public void AddControl(SimpleControl control) => Controls.Add(control); public IEnumerable<SimpleControl> GetControlList() => Controls; } } Only notable mentions are the 2 methods implementation being done in an unusual way, this is for the most part just a \"shortcut\" that can be done when the method implementation consist in only one operation (if you're not confortable with it, you can just write it like you're used to, the result is the same). Also the RangeProperty method for some reason doesn't have an overload that accepts a GUIContent , so we had to pass just the text string of it (unity pls fix this thanks). Now our control properly displays any float property that is being given to it, but if you add any control to this one they will simply not display, that's cause it's our responsibility to handle that: materialEditor.RangeProperty(Property, Content.text); HasPropertyUpdated = EditorGUI.EndChangeCheck(); if (Property.floatValue > 0.5f) { foreach (SimpleControl control in Controls) { control.DrawControl(materialEditor); } } } We first check if the property has its value above 0.5 and cycle all controls inside our list to draw them. If you try to move the slider around you will see that other controls added to this control will show up as soon as you surpass 0.5 . Tip As you probably noticed, we use the DrawControl method to display a control's content, but we usually override ControlGUI when deciding what to display in our controls. This is cause DrawControl internally calls ControlGUI , but it also does additional checks, like checking if the control should be visible to begin with, or if should be in a disabled state. Finished example class using System.Collections.Generic; using UnityEditor; using VRLabs.SimpleShaderInspectors; namespace TestControlNamespace { public class MyCustomControl : PropertyControl, IControlContainer { public List<SimpleControl> Controls { get; set; } public MyCustomControl(string propertyName) : base(propertyName) { Controls = new List<SimpleControl>(); } protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); materialEditor.RangeProperty(Property, Content.text); HasPropertyUpdated = EditorGUI.EndChangeCheck(); if (Property.floatValue > 0.5f) { foreach (SimpleControl control in Controls) { control.DrawControl(materialEditor); } } } public void AddControl(SimpleControl control) => Controls.Add(control); public IEnumerable<SimpleControl> GetControlList() => Controls; } }"
  },
  "guides/ControlsDevelopment/INonAnimatableProperty.html": {
    "href": "guides/ControlsDevelopment/INonAnimatableProperty.html",
    "title": "Using INonAnimatableProperty | Simple Shader Inspectors Documentation",
    "keywords": "Using INonAnimatableProperty When you're recording an animation every change you do gets recorded, material property changes included. But sometimes you don't want certain properties to be animated, cause maybe you're using them in a way that animating them would look weird, or simply is not something you want to be recorded if you happen to change it while the animation is recording. The INonAnimatableProperty interface will help you with that by giving you the possibily separate the code that updates the property in a dedicated method that will never get called when the animation is recording, and notify the inspector that it needs to update a property outside the recording Tip SimpleShaderInspector keeps track of controls with this interface and when it detects that some of them need to write updates to a property it will stop the animation recording if it was running, updates the non animatable property values, and then restarts the animation recording if it was stopped. Warning Due to the need of using Reflection to stop and restart the animation recording, with the consequent performance cost, this system is disabled by default in any inspector and to activate it the user needs to set the HasNonAnimatableProperties inspector property to true during startup. If a non animatable property control is used when the system is disabled, the update code will run without checking the recording state. Let's take our template code with INonAnimatableProperty implemented: using UnityEditor; using VRLabs.SimpleShaderInspectors; public class MyCustomControl : PropertyControl, INonAnimatableProperty { public bool NonAnimatablePropertyChanged { get; set; } public MyCustomControl(string propertyName) : base(propertyName) { } protected override void ControlGUI(MaterialEditor materialEditor) { } public void UpdateNonAnimatableProperty(MaterialEditor materialEditor) { } } INonAnimatableProperty requires you to implement 1 property and one method: NonAnimatablePropertyChanged is used to let the inspector know that in this frame a material property needs to update outside of the recording. UpdateNonAnimatableProperty is where we update the value of our MaterialProperty without being recorded. Let's add a basic slider functionality o the class: using UnityEditor; using VRLabs.SimpleShaderInspectors; public class MyCustomControl : PropertyControl, INonAnimatableProperty { public bool NonAnimatablePropertyChanged { get; set; } public MyCustomControl(string propertyName) : base(propertyName) { } protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); materialEditor.RangeProperty(Property, Content.text); HasPropertyUpdated = EditorGUI.EndChangeCheck(); } public void UpdateNonAnimatableProperty(MaterialEditor materialEditor) { } } In this current state the control will still record the changes into the animation for 2 reasons: We don't tell the inspector that we have a property to update outside of it We're updating the property inside ControlGUI The first one is easy to solve, we just need to set NonAnimatablePropertyChanged to true if the property has changed: HasPropertyUpdated = EditorGUI.EndChangeCheck(); NonAnimatablePropertyChanged = HasPropertyUpdated; As for the second one, things may get a bit trickier. We cannot rely on materialEditor to draw our property, cause the property will get automatically updated, so we need to do it ourself with EditorGUILayout . We also need to store the value we get back so that we can apply it to the property afterwards: public bool NonAnimatablePropertyChanged { get; set; } private float _newValue; protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); _newValue = EditorGUILayout.Slider(Content, Property.floatValue, Property.rangeLimits.x, Property.rangeLimits.y); HasPropertyUpdated = EditorGUI.EndChangeCheck(); NonAnimatablePropertyChanged = HasPropertyUpdated; } And then we update the material property value inside UpdateNonAnimatableProperty : public void UpdateNonAnimatableProperty(MaterialEditor materialEditor) { Property.floatValue = _newValue; } And with this, now our material property should update correctly without being recorded in the animation. Finished example class using UnityEditor; using VRLabs.SimpleShaderInspectors; public class MyCustomControl : PropertyControl, INonAnimatableProperty { public bool NonAnimatablePropertyChanged { get; set; } private float _newValue; public MyCustomControl(string propertyName) : base(propertyName) { } protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); _newValue = EditorGUILayout.Slider(Content, Property.floatValue, Property.rangeLimits.x, Property.rangeLimits.y); HasPropertyUpdated = EditorGUI.EndChangeCheck(); NonAnimatablePropertyChanged = HasPropertyUpdated; } public void UpdateNonAnimatableProperty(MaterialEditor materialEditor) { Property.floatValue = _newValue; } }"
  },
  "guides/index.html": {
    "href": "guides/index.html",
    "title": "Welcome to the General Guides Section | Simple Shader Inspectors Documentation",
    "keywords": "Welcome to the General Guides Section Here you will find general guides on how to use Simple Shader Inspectors. If you're a first time user you may want how to get started here"
  },
  "guides/InspectorDevelopment/BasicControls.html": {
    "href": "guides/InspectorDevelopment/BasicControls.html",
    "title": "Basic controls | Simple Shader Inspectors Documentation",
    "keywords": "Basic Controls On Simple Shader Inspectors you show fields using different types of controls based on what you need to display. Need to show a texture? use TextureControl , want a color instead? use ColorControl and so on. If you check the API you will see that you have a fair amount of options regarding controls to use, included some really specific (but powerful) ones, but here we summarize some of the most basics ones that you will probably end up using a lot. PropertyControl AddPropertyControl(propertyName); This is the definition of basic, will just display the material property like the inspector would do automatically (it uses MaterialEditor.ShaderProperty ). It can come really useful when a property doesn't need anything fancy to display and is already nicely done automatically, for example a range property. This is also the base control that all controls that use material properties inherit from. TextureControl AddTextureControl(texturePropertyName, extraPropertyName1, extraPropertyName2); TextureControl , as the name says, is used to display textures. Internally uses materialEditor.TexturePropertySingleLine to display its properties, and like the latter can take up to 2 extra properties to show in the same line as the texture. Tip Despite having up to 3 properties, you still only have access to the usual HasPropertyUpdated bool to check if any of the 3 properties changed. ColorControl AddColorControl(string colorPropertyName); While you can show color properties just fine with a PropertyControl you end up having the color box taking up the entirety of the row, and that doesn't match with the color box that is being shown with a TextureControl . So this control fixes that. It can also take an additional boolean value to indicate if the color box (and color picker) needs to handle the alpha channel (by default it's set to true ). LabelControl AddLabelControl(string alias); It's one of those weird controls that does not use any property and instead requires you to insert an Alias to get its own localization. In this case it draws a simple label with nothing more going on."
  },
  "guides/InspectorDevelopment/ChainingMethods.html": {
    "href": "guides/InspectorDevelopment/ChainingMethods.html",
    "title": "Chaining methods | Simple Shader Inspectors Documentation",
    "keywords": "Chaining Methods Let's take the following line from our example inspector in getting started : _floatControl = this.AddPropertyControl(\"_FloatProperty\").Alias(\"MyFloatProperty\"); In this single line there's quite a bit going on. first it creates a new PropertyControl for our _FloatProperty and assigns it to an internal list. Then it takes this control and change its Alias to \"MyFloatProperty\" . Finally the control is assigned to our local _floatControl field. If you ever used the method syntax in LINQ you are probably already familiar with this, but if you never used it you may be slightly confused by the above line, since usually you would be more used to something like this: _floatControl = new PropertyControl(\"_FloatProperty\"); _floatControl.PropertyAlias = \"MyFloatProperty\"; this.Controls.Add(_floatControl); In terms of what they do they are equivalent, but in the first case we use methods that give the control itself as a return value, giving you the possibility to \"chain up\" another method call to do something else, or to assign that control to a variable to use later. By manipulating controls this way we can reduce the code needed to do the same amount of things, and keep it relatively simple to read. The advantages of it become more apparent on more complex controls where you want to optionally modify different stuff on the spot: _section = this.AddSection(\"MySectionAlias\").SetBackgroundColor(Color.red) .IncludeControlsInHeader(true).ShowFoldoutArrow(false).SetEnabled(false); _section = new Section(); _section.PropertyAlias = \"MySectionAlias\"; _section.BackgroundColor = Color.red; _section.AreControlsInside = true; _section.ShowFoldoutArrow = false; _section.IsEnabled = false; this.Controls.Add(_section); As you can see, in this case we saved the need to write up a fairly sizeable amount of code just to initialize our _section control by chaining up method calls. Tip The Section control is a particular control that can help you a lot to organize an inspector, we talk more in depth about it here . Every control can have its own dedicated chainable methods, and controls derived from other controls also inherit them. If you want to know what chainable methods a control has you can check up the API. Default chainable methods These chainable methods are available to all controls since they are inherited from the SimpleControl base class: Alias(string alias) Set a custom alias for control localization. This is like a unique identifier that the inspector can use when looking for localization data. SetVisible(bool visible) Set if the control should be visible or not. SetEnabled(bool enabled) Set if the control should be enabled or not. Chainable constructor methods As we saw until now, to avoid having to manually assing a control to the internal list of the inspector we use this.Add*YourControlNameHere* , this internally creates a new control and assings it to the object in which you called the method from (in our case this , or in other words out inspector). This is not limited to the inspector itself, since these methods will work on anything that implements the IControlContainer interface ( SimpleShaderInspector itself implements this interface). This means that controls themself can contain more controls inside themself, and they will control how to display them. Tip These methods, like all chainable methods in the API, are Extension methods , meaning that they're technically not part of the class itself, but can be applied to that class as if it was part of it. The main limitation is that since extension methods are not part of the class they can only access to public properties or methods of the class they're targeting. This is also the reason to why we need to use this. when calling one of these methods in the inspector. For example if we have a ToggleDropdownControl called toggle we can add a PropertyControl in it by doing: toggle.AddPropertyControl(\"_MyPropertyName\"); Tip ToggleDropdownControl is a toggle that when enabled will diplay other controls underneath itself, is useful when you need to make some properties visible only if something is enabled."
  },
  "guides/InspectorDevelopment/DistributingYourShader.html": {
    "href": "guides/InspectorDevelopment/DistributingYourShader.html",
    "title": "Distributing your shader | Simple Shader Inspectors Documentation",
    "keywords": "Distributing Your Shader If you're making a customized shader inspector you probably belong in 1 of these 2 categories: you're making a shader for internal use in your dev team and you need to be sure that's easy to use for your artists. you're making a shader with the purpose of distributing it. In the first case you're good to go, as long as you included the Simple Shader Inspectors package in your team's project it will work fine. However in the second case you'll have the problem of distributing it, since it has our library as a dependency, and be sure that it won't cause problems in the eventuality that the end user's project already has some shader using our library, which may end up causing duplicate script errors or incompatibilities. Currently these are the ways we currently encourage to distribute our library with your shaders: Reference to our package Repository The first and simplest way is to not include our library directly but inform the end user that Simple Shader Inspectors is a requirement for your shader in order to work. Pros: Is the easiest method. Slimmer package. Cons: Is responsibility of the user to install our library, resulting in higher chance of user error. If some breaking changes happen within our library, you will have to update your editor to support it, or you end up having users downloading the latest version of our library and having it not work with your shader. Include our code in your unity package Since Simple Shader Inspector is under MIT, you can freely include it in your unitypackage. If your main distribution method is Github (or equivalents), you can also include it in just the release package without the need to include it in your source code as well (in this case mention it in your README). Warning If you choose this method, please be sure to leave it in its default location and that its component's GUID did not change (you can test that by deleting our package and then reimport it, if you get console warning about duplicate GUID it means that unity changed that, in this case please move everything in a new project with our package installed first). Pros: The user doesn't have to do additional steps. Doesn't need to be included in the source code itself as long as its included in the downloadable package. Cons: It has the possibility of ending up with duplicate scripts if the user has also installed a shader that did not respected the above warning. If the user downloads a shader that uses a newer version of our library it will override the version you have included, and if the newer version has some breaking changes, your inspector won't work, so you need to keep your shader inspector up to date with our library version. Embed our code in your editor folder This is by far the safest way to include our library in your shader, by making a copy of the necessary code into a separate folder inside your shader, under your namespace. We also included a tool to help you in the process by automatically copying the classes in your editor folder and change namespace to one defined by you. Remember to update your inspector's namespace using references. Pros: As long as you put your original namespace, you won't have code conflicts even if there are multiple copies of it from different shaders. The user doesn't have to do additional steps. Cons: If you want to use newer versions of Simple Shader Inspectors you will need to redo the entire process. The user may not understand that your shader is actually using an additional library and may confuse eventual bugs inside our library as bug in your shader inspector. Final thoughts As you can see there are multiple takes on the situation, each with pros and cons, choose one depending on your workflow. For example if you have a large audience not including the library at all and just mention that it has a requirement could end up in receiving a lot help requests from users unaware of the requirement, cause they may have downloaded your shader without consulting the README first. For example here at VRLabs we include the library inside our shader unity packages without actually embedding it, but we are also the ones developing it, meaning that a good part of the disadvantages of this method won't affect us at all."
  },
  "guides/InspectorDevelopment/GettingStarted.html": {
    "href": "guides/InspectorDevelopment/GettingStarted.html",
    "title": "Getting started | Simple Shader Inspectors Documentation",
    "keywords": "Getting Started First of all, we need to import the unity package with the asset, if you haven't downloaded yet go here and grab the latest version. Once everything is imported let's start building out first inspector! Creating a new Inspector If you made shader inspectors before you know that we usually inherit from ShaderGUI to build an inspector. But in our case we will need to inherit from SimpleShaderInspector instead. SimpleShaderInspector itself is derived from ShaderGUI so Unity will recognize it as a valid shader inspector and assign it to shaders that will ask for it. Here is an example custom inspector: using UnityEditor; using VRLabs.SimpleShaderInspectors; using VRLabs.SimpleShaderInspectors.Controls; public class TestShaderInspector : SimpleShaderInspector { protected override void Start() { } } As you can see, there is no OnGUI override, but there is a Start override instead. The concept of Simple Shader Inspectors is to declare the controls we want to draw and which MaterialProperties they control, and leaving the actual drawing and checking of material property changes to the inspector. Let's say that we have a MaterialProperty named \"_FloatProperty\" that we want to display, all we need to do is: protected override void Start() { this.AddPropertyControl(\"_FloatProperty\"); } AddPropertyControl is the most basic control available and is comparable to MaterialEditor.ShaderProperty in terms of what it draws to the ui. Notice the keyword this used at the beginning. if you've done a bit of programming before you should know that normally you can omit it, but in our case is necessary to use it, and if you try to remove it you will encounter a compilation error. Here we explain why we need it, but it's not necessary to know right now. Localization If you try to check how the inspector looks now when you select a material you will notice 2 things: It shows the property with its default name. Now in your shader's folder you have a Localization folder. If you go into the Localization folder and then select the folder with the same name of your shader, you see that you have a English.json and a Settings.json file. The latter one is used by the inspector and we can leave that be, what we are interested in is the English.json file. This file contains all the controls needed text to display and is initially built based on what controls are declared in the inspector. If we open the one we generated it will only include an entry with 3 strings: { \"Properties\": [ { \"Name\": \"_FloatProperty\", \"DisplayName\": \"My float property\", \"Tooltip\": \"My float property\" } ] } As you add more controls into the inspector, more entries will appear here. By default the Name will be the control alias. This alias depending on the type of control can be either a material property name (if the control has one), or an arbitrary name. In any case you can change an alias by calling Alias(newName) . protected override void Start() { this.AddPropertyControl(\"_FloatProperty\").Alias(\"MyFloatProperty\"); } Tip We will talk about .Alias and similarly structured methods here . After we reopened the inspector again with this change it will update the localization file: { \"Properties\": [ { \"Name\": \"MyFloatProperty\", \"DisplayName\": \"My float property\", \"Tooltip\": \"My float property\" }, { \"Name\": \"_FloatProperty\", \"DisplayName\": \"My float property\", \"Tooltip\": \"My float property\" } ] } As you can see the new name entry has been added. This comes really handy when you have multiple controls that take in the same property, since by default they would use the same entry. Note The inspector will never delete old/unused entries to avoid losing stuff that you may need in the future, so is your job to clean up unwanted entries. Let's clean up the file and set both DisplayName and Tooltip to what we want to show: { \"Properties\": [ { \"Name\": \"MyFloatProperty\", \"DisplayName\": \"Awesome float property\", \"Tooltip\": \"Nice tooltip!\" } ] } Now is time for the fun part, duplicate English.json and rename it to Not english.json and modity it like this: { \"Properties\": [ { \"Name\": \"MyFloatProperty\", \"DisplayName\": \"Aledoye flget prodfrghy\", \"Tooltip\": \"I can't write!\" } ] } Now if you reload the inspector you will see this: If you select the dropdown that just appeard you will see a new option: Not english . By selecting that the inspector will immediately swap out the localization with what you have selected. The inspector will keep the selected language until you change it back (that's what Settings.json is used for). This is really useful in case you want to target multiple countries with your shader and also cleans up the inspector script from having a wall of text with all the label names and tooltips. Localization Editor Window Editing localization files manually can become quite annoying over time, especially when the inspector starts to grow bigger and bigger. Fortunately, you don't have to edit them manually, but you can use the localization editor window provided by Simple Shader Inspectors. You can find it in VRLabs/Simple Shader Inspectors/Localization file editor . After you open the window there will be only one button that will prompt you to select the localization file to add, and once opened you will be greeted by a way more manageable UI with a list of the properties available and an area where you can edit the selected one. Check changes Now we know how to show a control for a property and how to change its label content, but what about doing something specific in case a property has changed? Before doing anything, you should really check in the API if there is a control that already does what you want by its own. In case the answer is no or you simply want to set some values for various reasons you will need to override the CheckChanges method: protected override void StartChecks(MaterialEditor materialEditor) { } In here you can check if any control had property changes and react accordingly. Warning Despite looking really similar to OnGUI you should avoid drawing stuff in here directly. Right now we do not have any control available globally to check, and also have nothing we can do as a reaction, so let's modify the Start like this: private PropertyControl _floatControl; private LabelControl _labelControl; protected override void Start() { _floatControl = this.AddPropertyControl(\"_FloatProperty\").Alias(\"MyFloatProperty\"); _labelControl = this.AddLabelControl(\"MyLabel\"); } { \"Properties\": [ { \"Name\": \"MyLabel\", \"DisplayName\": \"Awesome label!\", \"Tooltip\": \"Nice tooltip!\" }, { \"Name\": \"MyFloatProperty\", \"DisplayName\": \"Awesome float property\", \"Tooltip\": \"Nice tooltip!\" } ] } Tip LabelControl is a basic control that just displays a label, the string passed is the Alias used for localization. All controls that do not contain a property will require an Alias. Now that we assigned those 2 controls to a variable we can check the changes of the first one: protected override void CheckChanges(MaterialEditor materialEditor) { if (_floatControl.HasPropertyUpdated) { _labelControl.SetEnabled(_floatControl.Property.floatValue > 1); } } Here we check if _floatControl had a change and if it had one we set the enabled state of _labelControl to true if the property value is above 1 or false otherwise. Tip Almost all controls give you direct access to their MaterialProperty with the Property field. Some controls may give you access to additional MaterialProperty objects they manage. You can see if a control gives you access to additional properties by checking the API. Now we can go back to our inspector and see that now the label gets correctly disabled or enabled based on the value of _floatProperty. Checks during inspector initialization Now we can check whenever a property changes value and react conseqently, but it doesn't react during initialization. The first idea is to do the preliminary checks inside the Start function, but if you already tried that you noticed that whenever you try to access a material property you will get a NullRefereneException . This is normal, cause while we did initialized controls correctly, the inspector did not have the time to fetch the desired material property yet. That's where the StartChecks override comes in. This function is still called during the first initialization, but in this phase material properties will have been fetched. So we can put all our needed checks there. You can also put here all checks you want to do only during initialization that require a value from a material property. protected override void StartChecks(MaterialEditor materialEditor) { _labelControl.SetEnabled(_floatControl.Property.floatValue > 1); } Now the inspector responds correctly during initialization as well. Finished example class This is our final result for this first inspector: using UnityEditor; using VRLabs.SimpleShaderInspectors; using VRLabs.SimpleShaderInspectors.Controls; public class TestShaderInspector : SimpleShaderInspector { private PropertyControl _floatControl; private LabelControl _labelControl; protected override void Start() { _floatControl = this.AddPropertyControl(\"_FloatProperty\").Alias(\"MyFloatProperty\"); _labelControl = this.AddLabelControl(\"MyLabel\"); } protected override void StartChecks(MaterialEditor materialEditor) { _labelControl.SetEnabled(_floatControl.Property.floatValue > 1); } protected override void CheckChanges(MaterialEditor materialEditor) { if (_floatControl.HasPropertyUpdated) { _labelControl.SetEnabled(_floatControl.Property.floatValue > 1); } } } From here you can continue by adding more controls and checks as you need them. Tip In this example we ended up assigning all created controls to local variables, but as you saw in the first steps of the guide you don't need to assign every control to have it shown."
  },
  "guides/InspectorDevelopment/Sections.html": {
    "href": "guides/InspectorDevelopment/Sections.html",
    "title": "Sections | Simple Shader Inspectors Documentation",
    "keywords": "Sections Sections are a family of controls that help organizing your inspector by grouping controls in dropdowns with nice headers, and they're so awesome that we needed to make a dedicated section just for them (no pun intended, ok maybe a bit). The main concept is simple: you create a section based on your needs, and then you add a number of controls to it with the usual Add*YourControlNameHere* , but applied to your section control instead of this . You can even add a section inside your section if you want. Right now there are 3 types of sections available and they each have their own use case. Section AddSection(string alias); This is the basic section with no fancy extras to it, and, as we already seen with the LabelControl , since it doesn't have any material property it will have a default Alias that will be the same for every section control, so it's advised to assign a custom one. It also is the base class of the other 2 types of sections, so everything that is available here will be available on those as well. Practically speaking it doesn't have too much in terms of functionality, click on the header to toggle the visibility on and off, and that's it . You do however have quite a bit of appearance customizability with its chainable methods. For example you can change the color of the header background with .SetBackgroundColor or change the label style with .SetLabelStyle , or you can change the background itself by changing its style with .SetBackgroundStyle . ActivatableSection AddActivatableSection( string activatePropertyName, float enableValue = 0, float disableValue = 1); This type of section on top of having everything the basic Section has it also has an additional checkbox in its header, and this checkbox is driven by the property you pass it during creation. Also unlike the basic Section this one has a property and as a consequence it won't be required to set an Alias . The checkbox will control if the content of the section will be enabled or not, and in case it is disabled all the controls under this section will be disabled and not modifiable. Currently this section does not have chainable methods on top of what is already available from Section . OrderedSection AddOrderedSection(string activatePropertyName, float enableValue = 1, float disableValue = 0); This type of section could be interpreted as a different implementation of ActivatableSection since it works similarly on the surface, but there's one problem, you can't create it with the usual this.AddOrderedSection this time. Caution You could create a new OrderedSection using its default constructor, but you should not do that. You would not get a working section out of that anyways. The only legitimate way to create an OrderedSection is to call the .AddOrderedSection from an OrderedSectionGroup control that will manage its lifecycle. So the question now is: what is an OrderedSectionGroup ? First of all, it's a control, and therefore is used like all other controls. That said when first created without any OrderedSection assigned to it will just do nothing, but as soon as you add an OrderedSection to it a button will appear, and clicking it will generate a popup where you can select any disabled OrderedSection it has. Any enabled OrderedSection will be above this button. The section itself looks mostly like the basic Section , but it has some additional buttons on the right side. The 2 arrows allow you to reorded the section relative to the other sections inside the OrderedSectionGroup , meanwhile the x button will disable the section, making it completely disappear from the inspector until you re-enable it from the section group button. All of these icons can be customized by making a new style for them with a different background image. Using properties for Visibility All the sections we've seen keep memorized their visibility state per each material internally with a Dictionary , while this is good enough for the majority of use cases, it will lose the memorized state when unity closes, resulting on all sections being closed the next time you open unity. As an alternative solution for that (or in case you want to keep the visibility state tracked in a MaterialProperty ) you can use pass another property to the constructor. This property will be used to keep track of the visibility state, and you can also add 2 float values to tell the section what value should set when visible and what value set when not visible. Note A basic Section created this way will use the visibility property Alias and not rely on the default one. Caution You can create float properties in you shader property list without using them in the shader code, just to keep track of the visibility state of section. Just beware that is usually not considered best practice to do that. When using this method to create sections you also can decide if the property used for the visibility state will be recorded or not when you're recording an animation by using SetPropertyAnimatable ."
  },
  "guides/InspectorDevelopment/TextureGenerator.html": {
    "href": "guides/InspectorDevelopment/TextureGenerator.html",
    "title": "Customizing The Texture Generator | Simple Shader Inspectors Documentation",
    "keywords": "Customizing The Texture Generator The TextureGeneratorControl is a really particular control, not only it is a good example of the level of complexity that a single control can reach in terms of functionality, but it is also an example of how is possible to make controls driven mainly by data and therefore customizable for the specific need. For example if there's a need to take a color mask and apply a specific color for each channel, we can just make a compute shader that does that, give it to the texture generator, and tell him to show 1 texture input and 4 color inputs to feed the compute shader on. But what do you need to do in order to accomplish that? Creating the compute shader First of all, you need the compute shader that does what you want, and you also need it to have what the control expects to find to feed the data on. We won't go too much into the details on how a compute shader works here since there are better guides elsewhere for that, but we will run down the main things that are important to get the compute shader to work in our context. First of all, create the file for the compute shader and call it however you want, in our case we call it maskColorizer.compute , but as long as the extension is right the name doesn't matter too much. Then just paste this code: #pragma kernel MaskColorizer // Default variables needed by the TextureGeneratorControl. RWTexture2D<float4> Result; float width; float height; struct TextureMetadata { float Width; float Height; float SelectedChannel; float Reverse; float Gamma; }; StructuredBuffer<TextureMetadata> TexturesMeta; StructuredBuffer<float4> Colors; // User defined Textures Texture2D<float4> Mask; This code is required for each compute shader to work with the texture generator, since most of the input data will be fed here. But let's look a bit more into it: #pragma kernel MaskColorizer This is a basic kernel definition for a compute shader, it says which function will be used as a valid entry point for the compute shader, in our case it will be MaskColorizer , you can edit the name to whatever you want, but the entry function will need to have the same name, also the name will also be used later to tell the control which entry point to use. Warning You can have more than one kernel in a single file, so theoretically you could have all your compute functions in a single file and tell the generator which one to use each time, we advise to NOT do that, mostly because it can become very messy very quickly. RWTexture2D<float4> Result; float width; float height; The first variable is our end result, here we will be saving the final texture generated, and is where the generator will take the texture to save it to a file. The other 2 floats are, as you can guess, the width and height the result texture. struct TextureMetadata { float Width; float Height; float SelectedChannel; float Reverse; float Gamma; }; This structure is the informations that the generator will pass for each texture it feeds in (outside of the texture itself). StructuredBuffer<TextureMetadata> TexturesMeta; StructuredBuffer<float4> Colors; These 2 buffers are arrays containing the texture metadata of all textures and all colors that the generator feeds to the compute shader, the order they are fed in is the same order of display in the generator itself. Texture2D<float4> Mask; Here each texture the generator has as an input has to be declared by its own, this is due to how textures need to be fed to the compute shader. In this case the generator only has a single texture, so only one variable is declared. You can name them however you want but keep their name in mind since you will need to use them later on. Outside of the declaring function with the same name of the kernel, this is all you need in the compute shader to make it work with the texture generator, but there is one more thing that you should add to the compute shader, and while it isn't always necessary, it makes some checks easier and more consistent with the options the generator provides with its inputs (and in this example you will need one of the functions in here). // Converts gamma space to linear space inline float GammaToLinearSpaceExact (float value) { if (value <= 0.04045F) return value / 12.92F; else if (value < 1.0F) return pow(abs((value + 0.055F))/1.055F, 2.4F); else return pow(abs(value), 2.2F); } // Converts linear space to gamma space inline float LinearToGammaSpaceExact (float value) { if (value <= 0.0F) return 0.0F; else if (value <= 0.0031308F) return 12.92F * value; else if (value < 1.0F) return 1.055F * pow(abs(value), 0.4166667F) - 0.055F; else return pow(abs(value), 0.45454545F); } // Select the right channel from the float4 float SelectChannel(float4 tex, float channel) { if(channel == 0) return tex.r; if(channel == 1) return tex.g; if(channel == 2) return tex.b; return tex.a; } // If is needed, do the color space correction float DoColorCorrectionIfNeeded(float gamma, float value) { if(gamma == 1) return LinearToGammaSpaceExact(value); else return value; } // Reverse the value if needed float DoReverseIfNeeded(float reverse, float value) { if(reverse == 1) return 1 - value; else return value; } As you can see they're mostly selection or color space conversion functions, which go along very well with the metadata provided by the generator for each texture. Now is finally time to do what we want the generator to do: [numthreads(16,16,1)] void MaskColorizer (uint3 id : SV_DispatchThreadID) { // Get the right uv coordinates based on texture size float2 uv = float2(id.x * TexturesMeta[0].Width / width, id.y * TexturesMeta[0].Height / height); // get fragment mask float4 fragmentMask = DoColorCorrectionIfNeeded(TexturesMeta[0].Gamma, Mask[uv]); // applying colors float4 finalColor = Colors[0]; finalColor = lerp(finalColor, Colors[1], fragmentMask.r); finalColor = lerp(finalColor, Colors[2], fragmentMask.g); finalColor = lerp(finalColor, Colors[3], fragmentMask.b); finalColor = lerp(finalColor, Colors[4], fragmentMask.a); // Return fragment Result[id.xy] = finalColor; } So, first of all, if you have no idea what [numthreads(16,16,1)] means, just leave it like that, it's actually needed to be exactly like that for the generator to work property. That said, the function declaration needs to have the same name of the kernel, in this case MaskColorizer . The id passed as a uint3 (3 ints packed into one structure) will be used as a way to get the textures uvs. float2 uv = float2(id.x * TexturesMeta[0].Width / width, id.y * TexturesMeta[0].Height / height); Unlike normal shaders \"uvs\" here are not normalized 0-1 values, but instead are indexes of the pixels of the textures. This means that for each texture you need to do a conversion to get the pixel at the same relative position, which is what is done here. float4 fragmentMask = DoColorCorrectionIfNeeded(TexturesMeta[0].Gamma, Mask[uv]); When working in compute shaders texture fed to it may be either in linear or gamma color space, so here we check the color space and convert it to linear in case it's in gamma space. float4 finalColor = Colors[0]; finalColor = lerp(finalColor, Colors[1], fragmentMask.r); finalColor = lerp(finalColor, Colors[2], fragmentMask.g); finalColor = lerp(finalColor, Colors[3], fragmentMask.b); finalColor = lerp(finalColor, Colors[4], fragmentMask.a); If you come from normal shaders should be fairly simple to understand what is done here to get the color masking done, if you don't come from normal shader we're not sure why you're in this site in the first place. The only notable thing is the Colors array: this is the array of colors fed by the generator, and in this case the first color is the base color, meanwhile the other 4 are the colors for each channel. Result[id.xy] = finalColor; As last thing, we set the final value of the fragment with the color we calculated. Creating the generator input settings json Now that we have a compute shader, we need to tell the generator which data it has to feed. This is done by giving it a json file with the required data (in this example the json will be saved as maskColorizerSettings.json ). { \"KernelName\": \"MaskColorizer\", \"Inputs\": [ { \"Type\": 0, \"InputName\":\"Mask\", \"Settings\": [1, 1] }, { \"Type\": 1, \"InputName\":\"BaseColor\", \"Settings\": [1] }, { \"Type\": 1, \"InputName\":\"ColorR\", \"Settings\": [1] }, { \"Type\": 1, \"InputName\":\"ColorG\", \"Settings\": [1] }, { \"Type\": 1, \"InputName\":\"ColorB\", \"Settings\": [1] }, { \"Type\": 1, \"InputName\":\"ColorA\", \"Settings\": [1] } ] } Simple enough right? The json is laid out the following way: KernelName: name of the kernel that the generator has to use, must be the same name of the function of the compute. Inputs: array of all the inputs the generator has to use. Type: type of input, 0 = Texture, 1 = Color. InputName: Name of the input field, for textures it has to be the same of the name used in the compute shader, for colors it only matters for the localization string used by the generator Settings: Array of int values that indicates some additional settings for the input field Texture input settings: [0] : Show texture channel selector (0 = hidden, 1 = shown) [1] : Show reverse option (0 = hidden, 1 = shown) Color input settings: [0] : Show colorspace selector (0 = hidden, 1 = shown) Using the custom generator Now that we have both the compute shader and the input settings json we can use them on our TextureGeneratorControl . The easiest way is to put both the compute shader and the settings json inside a Editor/Resources folder, so what we can easily load them using Resources.Load , but you can use whatever method you want to load them. In this example the files will be inside a Editor/Resources/Compute folder. // inside the inspector ComputeShader compute = Resources.Load<ComputeShader>(\"Compute/maskColorizer\"); string json = Resources.Load<TextAsset>(\"Compute/maskColorizerSettings\").text; this.AddTextureGeneratorControl(compute, json, \"_TextureProperty\"); And now the generator is ready to go and be used, give it a try! Now this was a fairly simple example of compute shader, but, just like normal shaders, you can go with much much more complex shaders to do more advanced stuff."
  },
  "index.html": {
    "href": "index.html",
    "title": "SSI - Simple Shader Inspectors | Simple Shader Inspectors Documentation",
    "keywords": ""
  },
  "Next/api/index.html": {
    "href": "Next/api/index.html",
    "title": "Welcome to the API Section | Simple Shader Inspectors Documentation",
    "keywords": "Welcome to the API Section Here you will find the documentation of each publicly available classes within the API."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.CreateLocalizationArrayFromNames.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.CreateLocalizationArrayFromNames.html",
    "title": "Method CreateLocalizationArrayFromNames | Simple Shader Inspectors Documentation",
    "keywords": "Method CreateLocalizationArrayFromNames CreateLocalizationArrayFromNames(String[]) Creates an AdditionalLocalization array from an array of names. Declaration public static AdditionalLocalization[] CreateLocalizationArrayFromNames(string[] contentNames) Parameters Type Name Description String [] contentNames Array of names. Returns Type Description AdditionalLocalization [] An array of AdditionalLocalization objects. Remarks Functionally is the same as InitializeLocalizationWithNames(IAdditionalLocalization, String[]) , but instead of automatically assigning the resulting AdditionalLocalization array to the calling object, it returns the generated array, so that more things can be done with it later. A possible example is generating 2 sets of contents, and then exposing a combination of the 2 dynamically based on some conditional logic."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.html",
    "title": "Class AdditionalContentExtensions | Simple Shader Inspectors Documentation",
    "keywords": "Class AdditionalContentExtensions Static class containing extension methods that manipulate AdditionalLocalization or AdditionalLocalization objects or arrays. Inheritance Object AdditionalContentExtensions Namespace : VRLabs.SimpleShaderInspectors Syntax public static class AdditionalContentExtensions Methods Name Description CreateLocalizationArrayFromNames(String[]) Creates an AdditionalLocalization array from an array of names. InitializeLocalizationWithNames(IAdditionalLocalization, String[]) Initialize the AdditionalLocalization array of an IAdditionalLocalization object with the provided array of names."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.InitializeLocalizationWithNames.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.InitializeLocalizationWithNames.html",
    "title": "Method InitializeLocalizationWithNames | Simple Shader Inspectors Documentation",
    "keywords": "Method InitializeLocalizationWithNames InitializeLocalizationWithNames(IAdditionalLocalization, String[]) Initialize the AdditionalLocalization array of an IAdditionalLocalization object with the provided array of names. Declaration public static void InitializeLocalizationWithNames(this IAdditionalLocalization obj, string[] contentNames) Parameters Type Name Description IAdditionalLocalization obj IAdditionalLocalization Object to use. String [] contentNames Array of names. Remarks Sometimes there's a need of a lot of localized content, but having to manually declare each item of the array manually can bloat the control's constructor fairly quick, and it becomes even worse when multiple constructors are needed. It's instead easier to declare an array of strings in a private field, and call this method instead."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Content.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Content.html",
    "title": "Property Content | Simple Shader Inspectors Documentation",
    "keywords": "Property Content Content GUIContent containing the localized content. Declaration public GUIContent Content { get; set; } Property Value Type Description GUIContent"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Equals.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Equals.html",
    "title": "Method Equals | Simple Shader Inspectors Documentation",
    "keywords": "Method Equals Equals(AdditionalLocalization) Declaration public bool Equals(AdditionalLocalization other) Parameters Type Name Description AdditionalLocalization other Returns Type Description Boolean Implements IEquatable<T>.Equals(T) Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.GetHashCode.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.GetHashCode.html",
    "title": "Method GetHashCode | Simple Shader Inspectors Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.html",
    "title": "Class AdditionalLocalization | Simple Shader Inspectors Documentation",
    "keywords": "Class AdditionalLocalization This class is a simple class containing a Name used for finding the localization content and a GUIContent object containing said content. Inheritance Object AdditionalLocalization Implements IEquatable < AdditionalLocalization > Namespace : VRLabs.SimpleShaderInspectors Syntax public class AdditionalLocalization : IEquatable<AdditionalLocalization> Properties Name Description Content GUIContent containing the localized content. Name Name of the additional localized content. Methods Name Description Equals(Object) Equals(AdditionalLocalization) GetHashCode()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Name.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Name.html",
    "title": "Property Name | Simple Shader Inspectors Documentation",
    "keywords": "Property Name Name Name of the additional localized content. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.-ctor.html",
    "title": "Constructor AdditionalProperty | Simple Shader Inspectors Documentation",
    "keywords": "Constructor AdditionalProperty AdditionalProperty(String, Boolean) Default constructor of AdditionalProperty. Declaration public AdditionalProperty(string propertyName, bool isPropertyMandatory = true) Parameters Type Name Description String propertyName Name of the materialProperty to fetch. Boolean isPropertyMandatory If the property is required"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.html",
    "title": "Class AdditionalProperty | Simple Shader Inspectors Documentation",
    "keywords": "Class AdditionalProperty This class defines an additional property. Inheritance Object AdditionalProperty Namespace : VRLabs.SimpleShaderInspectors Syntax public class AdditionalProperty Constructors Name Description AdditionalProperty(String, Boolean) Default constructor of AdditionalProperty. Properties Name Description IsPropertyMandatory Indicates if the property is required for the control to work. Property MaterialProperty containing the additional property needed by the control. PropertyName String containing the additional property name."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.IsPropertyMandatory.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.IsPropertyMandatory.html",
    "title": "Property IsPropertyMandatory | Simple Shader Inspectors Documentation",
    "keywords": "Property IsPropertyMandatory IsPropertyMandatory Indicates if the property is required for the control to work. Declaration public bool IsPropertyMandatory { get; } Property Value Type Description Boolean"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.Property.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.Property.html",
    "title": "Property Property | Simple Shader Inspectors Documentation",
    "keywords": "Property Property Property MaterialProperty containing the additional property needed by the control. Declaration public MaterialProperty Property { get; } Property Value Type Description MaterialProperty"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.PropertyName.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.PropertyName.html",
    "title": "Property PropertyName | Simple Shader Inspectors Documentation",
    "keywords": "Property PropertyName PropertyName String containing the additional property name. Declaration public string PropertyName { get; } Property Value Type Description String"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Chainables.AddPropertyControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Chainables.AddPropertyControl.html",
    "title": "Method AddPropertyControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddPropertyControl AddPropertyControl(IControlContainer, String, String) Declaration public static PropertyControl AddPropertyControl(this IControlContainer container, string propertyName, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String propertyName String appendAfterAlias Returns Type Description PropertyControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Chainables.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Chainables.html",
    "title": "Class Chainables | Simple Shader Inspectors Documentation",
    "keywords": "Class Chainables Inheritance Object Chainables Namespace : VRLabs.SimpleShaderInspectors Syntax public static class Chainables Methods Name Description AddPropertyControl(IControlContainer, String, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.ContainerExtensions.AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.ContainerExtensions.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl<T>(IList<T>, T, String) Default behaviour that should be used for adding new controls into a list of controls. Declaration public static void AddControl<T>(this IList<T> items, T control, string alias = \"\") where T : SimpleControl Parameters Type Name Description IList <T> items List of items to add the new control to. T control Control to add. String alias alias to append after to, default value is an empty string. Type Parameters Name Description T Remarks If you're using an IList derivative list object to contain the list of controls in your IControlContainer object you can just use this method to add a new control. If you're dealing with controls differently you should implement your own method with the following sequence of actions:"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.ContainerExtensions.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.ContainerExtensions.html",
    "title": "Class ContainerExtensions | Simple Shader Inspectors Documentation",
    "keywords": "Class ContainerExtensions Extension methods for dealing with IControlContainer type of objects Inheritance Object ContainerExtensions Namespace : VRLabs.SimpleShaderInspectors Syntax public static class ContainerExtensions Methods Name Description AddControl<T>(IList<T>, T, String) Default behaviour that should be used for adding new controls into a list of controls."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddColorControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddColorControl.html",
    "title": "Method AddColorControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddColorControl AddColorControl(IControlContainer, String, Boolean, String) Declaration public static ColorControl AddColorControl(this IControlContainer container, string propertyName, bool showAlphaValue = true, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String propertyName Boolean showAlphaValue String appendAfterAlias Returns Type Description ColorControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddConditionalControlContainer.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddConditionalControlContainer.html",
    "title": "Method AddConditionalControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Method AddConditionalControlContainer AddConditionalControlContainer(IControlContainer, String, Single, String) Declaration public static ConditionalControlContainer AddConditionalControlContainer(this IControlContainer container, string conditionalProperty, float enableValue, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String conditionalProperty Single enableValue String appendAfterAlias Returns Type Description ConditionalControlContainer"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddControlContainer.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddControlContainer.html",
    "title": "Method AddControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControlContainer AddControlContainer(IControlContainer, String) Declaration public static ControlContainer AddControlContainer(this IControlContainer container, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String appendAfterAlias Returns Type Description ControlContainer"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddEnumControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddEnumControl.html",
    "title": "Method AddEnumControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddEnumControl AddEnumControl<TEnum>(IControlContainer, String, String) Declaration public static EnumControl<TEnum> AddEnumControl<TEnum>(this IControlContainer container, string propertyName, string appendAfterAlias = \"\") where TEnum : Enum Parameters Type Name Description IControlContainer container String propertyName String appendAfterAlias Returns Type Description EnumControl <TEnum> Type Parameters Name Description TEnum"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddGradientTextureControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddGradientTextureControl.html",
    "title": "Method AddGradientTextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddGradientTextureControl AddGradientTextureControl(IControlContainer, String, String, String) Declaration public static GradientTextureControl AddGradientTextureControl(this IControlContainer container, string propertyName, string colorPropertyName = null, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String propertyName String colorPropertyName String appendAfterAlias Returns Type Description GradientTextureControl AddGradientTextureControl(IControlContainer, String, String, String, String, String) Declaration public static GradientTextureControl AddGradientTextureControl(this IControlContainer container, string propertyName, string minColorPropertyName, string maxColorPropertyName, string colorPropertyName = null, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String propertyName String minColorPropertyName String maxColorPropertyName String colorPropertyName String appendAfterAlias Returns Type Description GradientTextureControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddHelpBoxControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddHelpBoxControl.html",
    "title": "Method AddHelpBoxControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddHelpBoxControl AddHelpBoxControl(IControlContainer, String, String) Declaration public static HelpBoxControl AddHelpBoxControl(this IControlContainer container, string alias, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String alias String appendAfterAlias Returns Type Description HelpBoxControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddHorizontalContainer.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddHorizontalContainer.html",
    "title": "Method AddHorizontalContainer | Simple Shader Inspectors Documentation",
    "keywords": "Method AddHorizontalContainer AddHorizontalContainer(IControlContainer, String) Declaration public static HorizontalContainer AddHorizontalContainer(this IControlContainer container, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String appendAfterAlias Returns Type Description HorizontalContainer"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddKeywordToggleControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddKeywordToggleControl.html",
    "title": "Method AddKeywordToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddKeywordToggleControl AddKeywordToggleControl(IControlContainer, String, String) Declaration public static KeywordToggleControl AddKeywordToggleControl(this IControlContainer container, string keyword, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String keyword String appendAfterAlias Returns Type Description KeywordToggleControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddKeywordToggleListControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddKeywordToggleListControl.html",
    "title": "Method AddKeywordToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddKeywordToggleListControl AddKeywordToggleListControl(IControlContainer, String, String) Declaration public static KeywordToggleListControl AddKeywordToggleListControl(this IControlContainer container, string keyword, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String keyword String appendAfterAlias Returns Type Description KeywordToggleListControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddLabelControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddLabelControl.html",
    "title": "Method AddLabelControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddLabelControl AddLabelControl(IControlContainer, String, String) Declaration public static LabelControl AddLabelControl(this IControlContainer container, string alias, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String alias String appendAfterAlias Returns Type Description LabelControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddLightmapEmissionControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddLightmapEmissionControl.html",
    "title": "Method AddLightmapEmissionControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddLightmapEmissionControl AddLightmapEmissionControl(IControlContainer, String) Declaration public static LightmapEmissionControl AddLightmapEmissionControl(this IControlContainer container, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String appendAfterAlias Returns Type Description LightmapEmissionControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddRGBASelectorControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddRGBASelectorControl.html",
    "title": "Method AddRGBASelectorControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddRGBASelectorControl AddRGBASelectorControl(IControlContainer, String, String) Declaration public static RGBASelectorControl AddRGBASelectorControl(this IControlContainer container, string propertyName, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String propertyName String appendAfterAlias Returns Type Description RGBASelectorControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddSpaceControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddSpaceControl.html",
    "title": "Method AddSpaceControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddSpaceControl AddSpaceControl(IControlContainer, Int32, String) Declaration public static SpaceControl AddSpaceControl(this IControlContainer container, int space = 0, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container Int32 space String appendAfterAlias Returns Type Description SpaceControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddTextureControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddTextureControl.html",
    "title": "Method AddTextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddTextureControl AddTextureControl(IControlContainer, String, String, String, String) Declaration public static TextureControl AddTextureControl(this IControlContainer container, string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String propertyName String extraPropertyName1 String extraPropertyName2 String appendAfterAlias Returns Type Description TextureControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddTextureGeneratorControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddTextureGeneratorControl.html",
    "title": "Method AddTextureGeneratorControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddTextureGeneratorControl AddTextureGeneratorControl(IControlContainer, String, String, String, String) Declaration public static TextureGeneratorControl AddTextureGeneratorControl(this IControlContainer container, string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String propertyName String extraPropertyName1 String extraPropertyName2 String appendAfterAlias Returns Type Description TextureGeneratorControl AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Declaration public static TextureGeneratorControl AddTextureGeneratorControl(this IControlContainer container, Shader shader, string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container Shader shader String propertyName String extraPropertyName1 String extraPropertyName2 String appendAfterAlias Returns Type Description TextureGeneratorControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddTilingAndOffsetControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddTilingAndOffsetControl.html",
    "title": "Method AddTilingAndOffsetControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddTilingAndOffsetControl AddTilingAndOffsetControl(IControlContainer, String, String) Declaration public static TilingAndOffsetControl AddTilingAndOffsetControl(this IControlContainer container, string propertyName, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String propertyName String appendAfterAlias Returns Type Description TilingAndOffsetControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddToggleControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddToggleControl.html",
    "title": "Method AddToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddToggleControl AddToggleControl(IControlContainer, String, Single, Single, String) Declaration public static ToggleControl AddToggleControl(this IControlContainer container, string propertyName, float falseValue = 0F, float trueValue = 1F, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String propertyName Single falseValue Single trueValue String appendAfterAlias Returns Type Description ToggleControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddToggleListControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddToggleListControl.html",
    "title": "Method AddToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddToggleListControl AddToggleListControl(IControlContainer, String, Single, Single, String) Declaration public static ToggleListControl AddToggleListControl(this IControlContainer container, string propertyName, float falseValue = 0F, float trueValue = 1F, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String propertyName Single falseValue Single trueValue String appendAfterAlias Returns Type Description ToggleListControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddVectorControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddVectorControl.html",
    "title": "Method AddVectorControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddVectorControl AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Declaration public static VectorControl AddVectorControl(this IControlContainer container, string propertyName, bool isXVisible = true, bool isYVisible = true, bool isZVisible = true, bool isWVisible = true, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String propertyName Boolean isXVisible Boolean isYVisible Boolean isZVisible Boolean isWVisible String appendAfterAlias Returns Type Description VectorControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddVertexStreamsControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.AddVertexStreamsControl.html",
    "title": "Method AddVertexStreamsControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddVertexStreamsControl AddVertexStreamsControl(IControlContainer, String, String) Declaration public static VertexStreamsControl AddVertexStreamsControl(this IControlContainer container, string alias, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String alias String appendAfterAlias Returns Type Description VertexStreamsControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.html",
    "title": "Class Chainables | Simple Shader Inspectors Documentation",
    "keywords": "Class Chainables Inheritance Object Chainables Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public static class Chainables Methods Name Description AddColorControl(IControlContainer, String, Boolean, String) AddConditionalControlContainer(IControlContainer, String, Single, String) AddControlContainer(IControlContainer, String) AddEnumControl<TEnum>(IControlContainer, String, String) AddGradientTextureControl(IControlContainer, String, String, String) AddGradientTextureControl(IControlContainer, String, String, String, String, String) AddHelpBoxControl(IControlContainer, String, String) AddHorizontalContainer(IControlContainer, String) AddKeywordToggleControl(IControlContainer, String, String) AddKeywordToggleListControl(IControlContainer, String, String) AddLabelControl(IControlContainer, String, String) AddLightmapEmissionControl(IControlContainer, String) AddRGBASelectorControl(IControlContainer, String, String) AddSpaceControl(IControlContainer, Int32, String) AddTextureControl(IControlContainer, String, String, String, String) AddTextureGeneratorControl(IControlContainer, String, String, String, String) AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) AddTilingAndOffsetControl(IControlContainer, String, String) AddToggleControl(IControlContainer, String, Single, Single, String) AddToggleListControl(IControlContainer, String, Single, Single, String) AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) AddVertexStreamsControl(IControlContainer, String, String) WithBoxType<T>(T, MessageType) WithGeneratorButtonColor<T>(T, Color) WithGeneratorButtonStyle<T>(T, GUIStyle) WithGeneratorCloseButtonColor<T>(T, Color) WithGeneratorCloseButtonStyle<T>(T, GUIStyle) WithGeneratorColor<T>(T, Color) WithGeneratorInputColor<T>(T, Color) WithGeneratorInputStyle<T>(T, GUIStyle) WithGeneratorSaveButtonColor<T>(T, Color) WithGeneratorSaveButtonStyle<T>(T, GUIStyle) WithGeneratorStyle<T>(T, GUIStyle) WithGradientButtonColor<T>(T, Color) WithGradientButtonStyle<T>(T, GUIStyle) WithGradientEditorColor<T>(T, Color) WithGradientEditorStyle<T>(T, GUIStyle) WithGradientSaveButtonColor<T>(T, Color) WithGradientSaveButtonStyle<T>(T, GUIStyle) WithHasHDRColor<T>(T, Boolean) WithIndent<T>(T, Boolean) WithIsWideBox<T>(T, Boolean) WithLabelStyle<T>(T, GUIStyle) WithOptionsAreaColor<T>(T, Color) WithOptionsAreaStyle<T>(T, GUIStyle) WithOptionsButtonColor<T>(T, Color) WithOptionsButtonStyle<T>(T, GUIStyle) WithShowAlphaValue<T>(T, Boolean) WithShowTilingAndOffset<T>(T, Boolean)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithBoxType.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithBoxType.html",
    "title": "Method WithBoxType | Simple Shader Inspectors Documentation",
    "keywords": "Method WithBoxType WithBoxType<T>(T, MessageType) Declaration public static T WithBoxType<T>(this T control, MessageType property) where T : HelpBoxControl Parameters Type Name Description T control MessageType property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorButtonColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorButtonColor.html",
    "title": "Method WithGeneratorButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGeneratorButtonColor WithGeneratorButtonColor<T>(T, Color) Declaration public static T WithGeneratorButtonColor<T>(this T control, Color property) where T : TextureGeneratorControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorButtonStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorButtonStyle.html",
    "title": "Method WithGeneratorButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGeneratorButtonStyle WithGeneratorButtonStyle<T>(T, GUIStyle) Declaration public static T WithGeneratorButtonStyle<T>(this T control, GUIStyle property) where T : TextureGeneratorControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorCloseButtonColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorCloseButtonColor.html",
    "title": "Method WithGeneratorCloseButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGeneratorCloseButtonColor WithGeneratorCloseButtonColor<T>(T, Color) Declaration public static T WithGeneratorCloseButtonColor<T>(this T control, Color property) where T : TextureGeneratorControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorCloseButtonStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorCloseButtonStyle.html",
    "title": "Method WithGeneratorCloseButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGeneratorCloseButtonStyle WithGeneratorCloseButtonStyle<T>(T, GUIStyle) Declaration public static T WithGeneratorCloseButtonStyle<T>(this T control, GUIStyle property) where T : TextureGeneratorControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorColor.html",
    "title": "Method WithGeneratorColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGeneratorColor WithGeneratorColor<T>(T, Color) Declaration public static T WithGeneratorColor<T>(this T control, Color property) where T : TextureGeneratorControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorInputColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorInputColor.html",
    "title": "Method WithGeneratorInputColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGeneratorInputColor WithGeneratorInputColor<T>(T, Color) Declaration public static T WithGeneratorInputColor<T>(this T control, Color property) where T : TextureGeneratorControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorInputStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorInputStyle.html",
    "title": "Method WithGeneratorInputStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGeneratorInputStyle WithGeneratorInputStyle<T>(T, GUIStyle) Declaration public static T WithGeneratorInputStyle<T>(this T control, GUIStyle property) where T : TextureGeneratorControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorSaveButtonColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorSaveButtonColor.html",
    "title": "Method WithGeneratorSaveButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGeneratorSaveButtonColor WithGeneratorSaveButtonColor<T>(T, Color) Declaration public static T WithGeneratorSaveButtonColor<T>(this T control, Color property) where T : TextureGeneratorControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorSaveButtonStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorSaveButtonStyle.html",
    "title": "Method WithGeneratorSaveButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGeneratorSaveButtonStyle WithGeneratorSaveButtonStyle<T>(T, GUIStyle) Declaration public static T WithGeneratorSaveButtonStyle<T>(this T control, GUIStyle property) where T : TextureGeneratorControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGeneratorStyle.html",
    "title": "Method WithGeneratorStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGeneratorStyle WithGeneratorStyle<T>(T, GUIStyle) Declaration public static T WithGeneratorStyle<T>(this T control, GUIStyle property) where T : TextureGeneratorControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGradientButtonColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGradientButtonColor.html",
    "title": "Method WithGradientButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGradientButtonColor WithGradientButtonColor<T>(T, Color) Declaration public static T WithGradientButtonColor<T>(this T control, Color property) where T : GradientTextureControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGradientButtonStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGradientButtonStyle.html",
    "title": "Method WithGradientButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGradientButtonStyle WithGradientButtonStyle<T>(T, GUIStyle) Declaration public static T WithGradientButtonStyle<T>(this T control, GUIStyle property) where T : GradientTextureControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGradientEditorColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGradientEditorColor.html",
    "title": "Method WithGradientEditorColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGradientEditorColor WithGradientEditorColor<T>(T, Color) Declaration public static T WithGradientEditorColor<T>(this T control, Color property) where T : GradientTextureControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGradientEditorStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGradientEditorStyle.html",
    "title": "Method WithGradientEditorStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGradientEditorStyle WithGradientEditorStyle<T>(T, GUIStyle) Declaration public static T WithGradientEditorStyle<T>(this T control, GUIStyle property) where T : GradientTextureControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGradientSaveButtonColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGradientSaveButtonColor.html",
    "title": "Method WithGradientSaveButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGradientSaveButtonColor WithGradientSaveButtonColor<T>(T, Color) Declaration public static T WithGradientSaveButtonColor<T>(this T control, Color property) where T : GradientTextureControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGradientSaveButtonStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithGradientSaveButtonStyle.html",
    "title": "Method WithGradientSaveButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method WithGradientSaveButtonStyle WithGradientSaveButtonStyle<T>(T, GUIStyle) Declaration public static T WithGradientSaveButtonStyle<T>(this T control, GUIStyle property) where T : GradientTextureControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithHasHDRColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithHasHDRColor.html",
    "title": "Method WithHasHDRColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithHasHDRColor WithHasHDRColor<T>(T, Boolean) Declaration public static T WithHasHDRColor<T>(this T control, bool property) where T : TextureControl Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithIndent.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithIndent.html",
    "title": "Method WithIndent | Simple Shader Inspectors Documentation",
    "keywords": "Method WithIndent WithIndent<T>(T, Boolean) Declaration public static T WithIndent<T>(this T control, bool property) where T : ConditionalControlContainer Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithIsWideBox.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithIsWideBox.html",
    "title": "Method WithIsWideBox | Simple Shader Inspectors Documentation",
    "keywords": "Method WithIsWideBox WithIsWideBox<T>(T, Boolean) Declaration public static T WithIsWideBox<T>(this T control, bool property) where T : HelpBoxControl Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithLabelStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithLabelStyle.html",
    "title": "Method WithLabelStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method WithLabelStyle WithLabelStyle<T>(T, GUIStyle) Declaration public static T WithLabelStyle<T>(this T control, GUIStyle property) where T : LabelControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithOptionsAreaColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithOptionsAreaColor.html",
    "title": "Method WithOptionsAreaColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithOptionsAreaColor WithOptionsAreaColor<T>(T, Color) Declaration public static T WithOptionsAreaColor<T>(this T control, Color property) where T : TextureControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithOptionsAreaStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithOptionsAreaStyle.html",
    "title": "Method WithOptionsAreaStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method WithOptionsAreaStyle WithOptionsAreaStyle<T>(T, GUIStyle) Declaration public static T WithOptionsAreaStyle<T>(this T control, GUIStyle property) where T : TextureControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithOptionsButtonColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithOptionsButtonColor.html",
    "title": "Method WithOptionsButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithOptionsButtonColor WithOptionsButtonColor<T>(T, Color) Declaration public static T WithOptionsButtonColor<T>(this T control, Color property) where T : TextureControl Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithOptionsButtonStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithOptionsButtonStyle.html",
    "title": "Method WithOptionsButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method WithOptionsButtonStyle WithOptionsButtonStyle<T>(T, GUIStyle) Declaration public static T WithOptionsButtonStyle<T>(this T control, GUIStyle property) where T : TextureControl Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithShowAlphaValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithShowAlphaValue.html",
    "title": "Method WithShowAlphaValue | Simple Shader Inspectors Documentation",
    "keywords": "Method WithShowAlphaValue WithShowAlphaValue<T>(T, Boolean) Declaration public static T WithShowAlphaValue<T>(this T control, bool property) where T : ColorControl Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithShowTilingAndOffset.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Chainables.WithShowTilingAndOffset.html",
    "title": "Method WithShowTilingAndOffset | Simple Shader Inspectors Documentation",
    "keywords": "Method WithShowTilingAndOffset WithShowTilingAndOffset<T>(T, Boolean) Declaration public static T WithShowTilingAndOffset<T>(this T control, bool property) where T : TextureControl Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.-ctor.html",
    "title": "Constructor ColorControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ColorControl ColorControl(String, Boolean) Default constructor of ColorControl Declaration public ColorControl(string propertyName, bool showAlphaValue = true) Parameters Type Name Description String propertyName Material property name. Boolean showAlphaValue Show alpha value in the color picker, Optional (default: true)."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.html",
    "title": "Class ColorControl | Simple Shader Inspectors Documentation",
    "keywords": "Class ColorControl Represents a control for a color property. Inheritance Object SimpleControl PropertyControl ColorControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class ColorControl : PropertyControl Remarks It is the control to use whenever there's a need to display a color material property. Examples Initialize the control inside the inspector: // initialize a color control that does not show the alpha value in the field. this.AddColorControl(\"_ExampleColorProperty\", false); Constructors Name Description ColorControl(String, Boolean) Default constructor of ColorControl Properties Name Description SelectedColor Selected color of the property stored in this control. ShowAlphaValue Boolean that determines if the color picker and the color field should show the alpha value. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.WithShowAlphaValue<T>(T, Boolean)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.SelectedColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.SelectedColor.html",
    "title": "Property SelectedColor | Simple Shader Inspectors Documentation",
    "keywords": "Property SelectedColor SelectedColor Selected color of the property stored in this control. Declaration public Color SelectedColor { get; } Property Value Type Description Color The currently selected color."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.ShowAlphaValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.ShowAlphaValue.html",
    "title": "Property ShowAlphaValue | Simple Shader Inspectors Documentation",
    "keywords": "Property ShowAlphaValue ShowAlphaValue Boolean that determines if the color picker and the color field should show the alpha value. Declaration public bool ShowAlphaValue { get; set; } Property Value Type Description Boolean True if the control should show the alpha value, false otherwise (default: true)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls Declaration public void AddControl(SimpleControl control, string alias = \"\") Parameters Type Name Description SimpleControl control Control to add. String alias Optional alias to say where a control is appended after. Implements IControlContainer.AddControl(SimpleControl, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.Controls.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls under this control. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > All controls that have been added by extension methods."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.-ctor.html",
    "title": "Constructor ConditionalControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ConditionalControlContainer ConditionalControlContainer(String, Single) Default constructor of ConditionalControlContainer . Declaration public ConditionalControlContainer(string conditionalProperty, float enableValue) Parameters Type Name Description String conditionalProperty Single enableValue"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.EnableValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.EnableValue.html",
    "title": "Field EnableValue | Simple Shader Inspectors Documentation",
    "keywords": "Field EnableValue Which value enables the control container Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected readonly float EnableValue Returns Single Float value of the property if the toggle is enabled"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.GetControlList.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Implementation needed by IControlContainer to get the object's controls list. Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > Controls Implements IControlContainer.GetControlList()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.html",
    "title": "Class ConditionalControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Class ConditionalControlContainer Represents a group of controls that is visible only on when a property has a specific float value. Inheritance Object SimpleControl PropertyControl ConditionalControlContainer Implements IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class ConditionalControlContainer : PropertyControl, IControlContainer Remarks This control has no UI for itself, instead it just displays all controls it has inside itself. It can be useful whenever you need to enable, disable or, in general, manage an entire group of controls at once. Unlike ControlContainer it has embedded logic to automatically display or hide content based on the given property float value Examples Example Usage: // Create control ConditionalControlContainer control = this.AddConditionalControlContainer(); // Add controls inside of it control.AddPropertyControl(\"_ExampleProperty\"); control.AddColorControl(\"_ExampleColor\"); Constructors Name Description ConditionalControlContainer(String, Single) Default constructor of ConditionalControlContainer . Fields Name Description EnableValue Which value enables the control container Properties Name Description Controls List of controls under this control. Indent If the controls inside get indented or not. Methods Name Description AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls ControlGUI(MaterialEditor) Draws the control represented by this object. GetControlList() Implementation needed by IControlContainer to get the object's controls list. Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.WithIndent<T>(T, Boolean) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.Indent.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer.Indent.html",
    "title": "Property Indent | Simple Shader Inspectors Documentation",
    "keywords": "Property Indent Indent If the controls inside get indented or not. Declaration public bool Indent { get; set; } Property Value Type Description Boolean True if the controls inside will get indented, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls Declaration public void AddControl(SimpleControl control, string alias = \"\") Parameters Type Name Description SimpleControl control Control to add. String alias Optional alias to say where a control is appended after. Implements IControlContainer.AddControl(SimpleControl, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.Controls.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls under this control. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > All controls that have been added by extension methods."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.-ctor.html",
    "title": "Constructor ControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ControlContainer ControlContainer() Default constructor of ControlContainer . Declaration public ControlContainer() Remarks Since this control does not need an alias, no alias strings are needed, and the alias will be set as \"\"."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.GetControlList.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Implementation needed by IControlContainer to get the object's controls list. Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > Controls Implements IControlContainer.GetControlList()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.html",
    "title": "Class ControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Class ControlContainer Represents a group of controls. Inheritance Object SimpleControl ControlContainer Implements IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class ControlContainer : SimpleControl, IControlContainer Remarks This control has no UI for itself, instead it just displays all controls it has inside itself. It can be useful whenever you need to enable, disable or, in general, manage an entire group of controls at once. Since it has no UI, it does not need an alias, and setting one would not do much. Examples Example Usage: // Create control ControlContainer control = this.AddControlContainer(); // Add controls inside of it control.AddPropertyControl(\"_ExampleProperty\"); control.AddColorControl(\"_ExampleColor\"); Constructors Name Description ControlContainer() Default constructor of ControlContainer . Properties Name Description Controls List of controls under this control. Methods Name Description AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls ControlGUI(MaterialEditor) Draws the control represented by this object. GetControlList() Implementation needed by IControlContainer to get the object's controls list. Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.-ctor.html",
    "title": "Constructor EnumControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor EnumControl EnumControl(String) Default constructor of EnumControl<TEnum> Declaration public EnumControl(string propertyName) Parameters Type Name Description String propertyName Material property name."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.html",
    "title": "Class EnumControl<TEnum> | Simple Shader Inspectors Documentation",
    "keywords": "Class EnumControl<TEnum> Represents a control with options based on an enum Inheritance Object SimpleControl PropertyControl EnumControl<TEnum> Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class EnumControl<TEnum> : PropertyControl where TEnum : Enum Type Parameters TEnum Type of enum used by the control Remarks With this control you can make selectors that are based on an enum, without the need to have an array of strings for options, since the enum name will be used instead. Examples Example usage: //... public enum ExampleEnum { Option1, Option2, Option3 } //... // Inside the controls declarations this.AddEnumControl<ExampleEnum>(\"_ExampleProperty\"); The value of the material property will be the index of the enum. Constructors Name Description EnumControl(String) Default constructor of EnumControl<TEnum> Properties Name Description SelectedOption Option currently selected. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.SelectedOption.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.SelectedOption.html",
    "title": "Property SelectedOption | Simple Shader Inspectors Documentation",
    "keywords": "Property SelectedOption SelectedOption Option currently selected. Declaration public TEnum SelectedOption { get; } Property Value Type Description TEnum Currently selected option of type TEnum"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.AdditionalContent.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.AdditionalContent.html",
    "title": "Property AdditionalContent | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalContent AdditionalContent Implementation of IAdditionalLocalization for the additional localization strings. Declaration public AdditionalLocalization[] AdditionalContent { get; set; } Property Value Type Description AdditionalLocalization [] Array of AdditionalLocalization objects. Implements IAdditionalLocalization.AdditionalContent Remarks The localized content array will have the following object names: [0]: GradientOpenEditor [1]: GradientColorLabel [2]: GradientTimeLabel [3]: GradientRampSizeLabel [4]: GradientBlendModeLabel [5]: GradientSaveButton [6]: GradientCancelButton"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides TextureControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.-ctor.html",
    "title": "Constructor GradientTextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor GradientTextureControl GradientTextureControl(String, String) Default constructor. Declaration public GradientTextureControl(string propertyName, string colorPropertyName = null) Parameters Type Name Description String propertyName Name of the gradient texture property. String colorPropertyName Name of the relative color property (default: null). GradientTextureControl(String, String, String, String) Constructor with additional min and max texture color properties. Declaration public GradientTextureControl(string propertyName, string minColorPropertyName, string maxColorPropertyName, string colorPropertyName = null) Parameters Type Name Description String propertyName Name of the gradient texture property. String minColorPropertyName Minimum color of the gradient. String maxColorPropertyName Maximum color of the gradient. String colorPropertyName Name of the relative color property (default: null)."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientButtonColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientButtonColor.html",
    "title": "Property GradientButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientButtonColor GradientButtonColor Background color used to display the gradient editor button. Declaration public Color GradientButtonColor { get; set; } Property Value Type Description Color Color used."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientButtonStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientButtonStyle.html",
    "title": "Property GradientButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientButtonStyle GradientButtonStyle Style used to display the gradient editor button. Declaration public GUIStyle GradientButtonStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientEditorColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientEditorColor.html",
    "title": "Property GradientEditorColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientEditorColor GradientEditorColor Background color used to display the gradient editor background. Declaration public Color GradientEditorColor { get; set; } Property Value Type Description Color Color used."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientEditorStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientEditorStyle.html",
    "title": "Property GradientEditorStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientEditorStyle GradientEditorStyle Style used to display the gradient editor background. Declaration public GUIStyle GradientEditorStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientSaveButtonColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientSaveButtonColor.html",
    "title": "Property GradientSaveButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientSaveButtonColor GradientSaveButtonColor Background color used to display the gradient editor save button. Declaration public Color GradientSaveButtonColor { get; set; } Property Value Type Description Color Color used."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientSaveButtonStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientSaveButtonStyle.html",
    "title": "Property GradientSaveButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientSaveButtonStyle GradientSaveButtonStyle Style used to display the gradient editor save button. Declaration public GUIStyle GradientSaveButtonStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.html",
    "title": "Class GradientTextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Class GradientTextureControl Control that handles a gradient texture with a gradient editor included. Inheritance Object SimpleControl PropertyControl TextureControl GradientTextureControl Implements IAdditionalProperties IControlContainer IAdditionalLocalization Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class GradientTextureControl : TextureControl, IAdditionalProperties, IControlContainer, IAdditionalLocalization Remarks This advanced control is a TextureControl specialized for gradient textures. It embeds an editor for generating or modifying gradients into textures, enabling the user to create and previewing gradients in real time without leaving the inspector. It can also include a color property. Examples Example usage: this.AddGradientTextureControl(\"_exampleGradientTexture\", \"_ExampleColor\"); Constructors Name Description GradientTextureControl(String, String) Default constructor. GradientTextureControl(String, String, String, String) Constructor with additional min and max texture color properties. Properties Name Description AdditionalContent Implementation of IAdditionalLocalization for the additional localization strings. GradientButtonColor Background color used to display the gradient editor button. GradientButtonStyle Style used to display the gradient editor button. GradientEditorColor Background color used to display the gradient editor background. GradientEditorStyle Style used to display the gradient editor background. GradientSaveButtonColor Background color used to display the gradient editor save button. GradientSaveButtonStyle Style used to display the gradient editor save button. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) AdditionalContentExtensions.InitializeLocalizationWithNames(IAdditionalLocalization, String[]) Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.WithGradientButtonStyle<T>(T, GUIStyle) Chainables.WithGradientSaveButtonStyle<T>(T, GUIStyle) Chainables.WithGradientEditorStyle<T>(T, GUIStyle) Chainables.WithGradientButtonColor<T>(T, Color) Chainables.WithGradientSaveButtonColor<T>(T, Color) Chainables.WithGradientEditorColor<T>(T, Color) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.WithShowTilingAndOffset<T>(T, Boolean) Chainables.WithHasHDRColor<T>(T, Boolean) Chainables.WithOptionsButtonStyle<T>(T, GUIStyle) Chainables.WithOptionsAreaStyle<T>(T, GUIStyle) Chainables.WithOptionsButtonColor<T>(T, Color) Chainables.WithOptionsAreaColor<T>(T, Color) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientWidth.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.GradientWidth.html",
    "title": "Enum GradientWidth | Simple Shader Inspectors Documentation",
    "keywords": "Enum GradientWidth Supported gradient widths Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public enum GradientWidth Fields Name Description L_1024 M_512 S_256 XL_2048 XS_128 XXL_4096"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.HelpBoxControl.BoxType.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.HelpBoxControl.BoxType.html",
    "title": "Property BoxType | Simple Shader Inspectors Documentation",
    "keywords": "Property BoxType BoxType Indicates the type of message that is contained in the box. Declaration public MessageType BoxType { get; set; } Property Value Type Description MessageType"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.HelpBoxControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.HelpBoxControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.HelpBoxControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.HelpBoxControl.-ctor.html",
    "title": "Constructor HelpBoxControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor HelpBoxControl HelpBoxControl(String) Default constructor of HelpBoxControl Declaration public HelpBoxControl(string alias) Parameters Type Name Description String alias Alias of the control, used for localization (required)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.HelpBoxControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.HelpBoxControl.html",
    "title": "Class HelpBoxControl | Simple Shader Inspectors Documentation",
    "keywords": "Class HelpBoxControl Represents a control containing an helpbox to display information Inheritance Object SimpleControl HelpBoxControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class HelpBoxControl : SimpleControl Remarks Whenever you want to display some important information of some kind, this is the control that will help you make it more visible. Examples Initialize the control inside the inspector: // initialize an HelpBoxControl this.AddHelpBoxControl(\"ExampleHelpBox\"); // initialize an HelpBoxControl and specifies the type of message shown (by default is set to MessageType.None). this.AddHelpBoxControl(\"ExampleHelpBox2\").SetBoxType(MessageType.Info); // initialize an HelpBoxControl and specifies that the HelpBox should not be wide (by default is set to True). this.AddHelpBoxControl(\"ExampleHelpBox3\").SetIsWideBox(false); Constructors Name Description HelpBoxControl(String) Default constructor of HelpBoxControl Properties Name Description BoxType Indicates the type of message that is contained in the box. IsWideBox Indicates if the HelpBox is a wide box (spans to the entire length of the window) or not (is only as large as the area where input fields are usually placed) Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.WithBoxType<T>(T, MessageType) Chainables.WithIsWideBox<T>(T, Boolean)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.HelpBoxControl.IsWideBox.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.HelpBoxControl.IsWideBox.html",
    "title": "Property IsWideBox | Simple Shader Inspectors Documentation",
    "keywords": "Property IsWideBox IsWideBox Indicates if the HelpBox is a wide box (spans to the entire length of the window) or not (is only as large as the area where input fields are usually placed) Declaration public bool IsWideBox { get; set; } Property Value Type Description Boolean"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer.AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls Declaration public void AddControl(SimpleControl control, string alias = \"\") Parameters Type Name Description SimpleControl control Control to add. String alias Optional alias to say where a control is appended after. Implements IControlContainer.AddControl(SimpleControl, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer.Controls.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls under this control. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > All controls that have been added by extension methods."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer.-ctor.html",
    "title": "Constructor HorizontalContainer | Simple Shader Inspectors Documentation",
    "keywords": "Constructor HorizontalContainer HorizontalContainer() Default constructor of ControlContainer . Declaration public HorizontalContainer() Remarks Since this control does not need an alias, no alias strings are needed, and the alias will be set as \"\"."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer.GetControlList.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Implementation needed by IControlContainer to get the object's controls list. Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > Controls Implements IControlContainer.GetControlList()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer.html",
    "title": "Class HorizontalContainer | Simple Shader Inspectors Documentation",
    "keywords": "Class HorizontalContainer Represents a group of controls. Inheritance Object SimpleControl HorizontalContainer Implements IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class HorizontalContainer : SimpleControl, IControlContainer Remarks This control has no UI for itself, instead it just displays all controls it has inside itself. It can be useful whenever you need to enable, disable or, in general, manage an entire group of controls at once. Since it has no UI, it does not need an alias, and setting one would not do much. Examples Example Usage: // Create control ControlContainer control = this.AddControlContainer(); // Add controls inside of it control.AddPropertyControl(\"_ExampleProperty\"); control.AddColorControl(\"_ExampleColor\"); Constructors Name Description HorizontalContainer() Default constructor of ControlContainer . Properties Name Description Controls List of controls under this control. Methods Name Description AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls ControlGUI(MaterialEditor) Draws the control represented by this object. GetControlList() Implementation needed by IControlContainer to get the object's controls list. Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors.Controls | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors.Controls Classes Chainables ColorControl Represents a control for a color property. ConditionalControlContainer Represents a group of controls that is visible only on when a property has a specific float value. ControlContainer Represents a group of controls. EnumControl<TEnum> Represents a control with options based on an enum GradientTextureControl Control that handles a gradient texture with a gradient editor included. HelpBoxControl Represents a control containing an helpbox to display information HorizontalContainer Represents a group of controls. KeywordToggleControl Represents a control with a checkbox for toggling a keyword on and off. KeywordToggleListControl Represents a control with a checkbox for setting a keyword. Also shows and hides a list of controls based on its state. LabelControl Represents a label without any property. LightmapEmissionControl Control that handles the lightmap Emission Property of the material. RGBASelectorControl Represents a control that provides a selector for a texture channel. SpaceControl Represents an empty space. TextureControl Represents a control for a texture property with possibility to inline 2 extra properties. TextureGeneratorControl Represents a control for a texture property with possibility to inline 2 extra properties. Also includes a texture generator. TilingAndOffsetControl Represents a control for a texture tiling and offset field. ToggleControl Represents a control with a checkbox for setting a float property to 2 defined values. ToggleListControl Represents a control with a checkbox for setting a float property to 2 defined values. Also shows and hides a list of controls based on its state. VectorControl Represents a vector control. VertexStreamsControl Control for viewing and setting particle vertex streams used Enums GradientWidth Supported gradient widths Resolution"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.-ctor.html",
    "title": "Constructor KeywordToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor KeywordToggleControl KeywordToggleControl(String) Default constructor of KeywordToggleControl Declaration public KeywordToggleControl(string keyword) Parameters Type Name Description String keyword Name of the keyword to toggle."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.HasKeywordUpdated.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.HasKeywordUpdated.html",
    "title": "Property HasKeywordUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasKeywordUpdated HasKeywordUpdated Boolean indicating if the keyword state has updated. Declaration public bool HasKeywordUpdated { get; protected set; } Property Value Type Description Boolean True if the keyword value has been updated, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.html",
    "title": "Class KeywordToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Class KeywordToggleControl Represents a control with a checkbox for toggling a keyword on and off. Inheritance Object SimpleControl KeywordToggleControl KeywordToggleListControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class KeywordToggleControl : SimpleControl Remarks With this control, by passing the keyword name you can have a toggle that will enable and disable the keyword on the material. Examples Example usage: this.AddKeywordToggleControl(\"KEYWORD_TO_TOGGLE\"); By default the keyword name will be used as Alias. Constructors Name Description KeywordToggleControl(String) Default constructor of KeywordToggleControl Fields Name Description Keyword Keyword that this toggle sets on and off, once set by the constructor it cannot be changed. Properties Name Description HasKeywordUpdated Boolean indicating if the keyword state has updated. ToggleEnabled Boolean indicating if the toggle is enabled or not. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.Keyword.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.Keyword.html",
    "title": "Field Keyword | Simple Shader Inspectors Documentation",
    "keywords": "Field Keyword Keyword that this toggle sets on and off, once set by the constructor it cannot be changed. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected readonly string Keyword Returns String String containing the keyword."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.ToggleEnabled.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.ToggleEnabled.html",
    "title": "Property ToggleEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Property ToggleEnabled ToggleEnabled Boolean indicating if the toggle is enabled or not. Declaration public bool ToggleEnabled { get; protected set; } Property Value Type Description Boolean True if the toggle is enabled, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls Declaration public void AddControl(SimpleControl control, string alias = \"\") Parameters Type Name Description SimpleControl control Control to add. String alias Optional alias to say where a control is appended after. Implements IControlContainer.AddControl(SimpleControl, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides KeywordToggleControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.Controls.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls under this control. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > All controls that have been added by extension methods."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.-ctor.html",
    "title": "Constructor KeywordToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor KeywordToggleListControl KeywordToggleListControl(String) Default constructor of KeywordToggleListControl Declaration public KeywordToggleListControl(string keyword) Parameters Type Name Description String keyword Keyword name."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.GetControlList.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Implementation needed by IControlContainer to get the object's controls list. Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > Controls Implements IControlContainer.GetControlList()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.html",
    "title": "Class KeywordToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Class KeywordToggleListControl Represents a control with a checkbox for setting a keyword. Also shows and hides a list of controls based on its state. Inheritance Object SimpleControl KeywordToggleControl KeywordToggleListControl Implements IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class KeywordToggleListControl : KeywordToggleControl, IControlContainer Remarks it's effectively a combination of KeywordToggleControl and ControlContainer , where the controls list is enabled based on the keyword enable state. Examples Example usage: this.AddKeywordToggleListControl(\"KEYWORD_TO_TOGGLE\"); Constructors Name Description KeywordToggleListControl(String) Default constructor of KeywordToggleListControl Properties Name Description Controls List of controls under this control. Methods Name Description AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls ControlGUI(MaterialEditor) Draws the control represented by this object. GetControlList() Implementation needed by IControlContainer to get the object's controls list. Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.-ctor.html",
    "title": "Constructor LabelControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor LabelControl LabelControl(String) Default constructor of LabelControl . Declaration public LabelControl(string alias) Parameters Type Name Description String alias Alias of the control."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.html",
    "title": "Class LabelControl | Simple Shader Inspectors Documentation",
    "keywords": "Class LabelControl Represents a label without any property. Inheritance Object SimpleControl LabelControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class LabelControl : SimpleControl Remarks It can be seen ad the Simple Shader Inspectors version of EditorGUILayout.LabelField , with the advantage that it uses Simple Shader Inspectors' localization system for the label string. It is required to give an alias to the control, since it doesn't have anything that it could use as a default. Examples Example usage: this.AddLabelControl(\"AliasToUse\"); Constructors Name Description LabelControl(String) Default constructor of LabelControl . Properties Name Description LabelStyle Style used for the label control. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.WithLabelStyle<T>(T, GUIStyle)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.LabelStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.LabelStyle.html",
    "title": "Property LabelStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property LabelStyle LabelStyle Style used for the label control. Declaration public GUIStyle LabelStyle { get; set; } Property Value Type Description GUIStyle GUIStyle for the label."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.-ctor.html",
    "title": "Constructor LightmapEmissionControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor LightmapEmissionControl LightmapEmissionControl() Default constructor of LightmapEmissionControl . Declaration public LightmapEmissionControl()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.HasLightmapEmissionUpdated.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.HasLightmapEmissionUpdated.html",
    "title": "Property HasLightmapEmissionUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasLightmapEmissionUpdated HasLightmapEmissionUpdated Boolean indicating if the lightmap emission property has updated. Declaration public bool HasLightmapEmissionUpdated { get; protected set; } Property Value Type Description Boolean True if the lightmap emission value has been updated, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.html",
    "title": "Class LightmapEmissionControl | Simple Shader Inspectors Documentation",
    "keywords": "Class LightmapEmissionControl Control that handles the lightmap Emission Property of the material. Inheritance Object SimpleControl LightmapEmissionControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class LightmapEmissionControl : SimpleControl Remarks Is the Simple Shader Inspectors equivalent of MaterialEditor.LightmapEmissionProperty . It does not need an alias in order to work. Examples Example usage: this.AddLightmapEmissionControl(); Constructors Name Description LightmapEmissionControl() Default constructor of LightmapEmissionControl . Properties Name Description HasLightmapEmissionUpdated Boolean indicating if the lightmap emission property has updated. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Resolution.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Resolution.html",
    "title": "Enum Resolution | Simple Shader Inspectors Documentation",
    "keywords": "Enum Resolution Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public enum Resolution Fields Name Description L_1024x1024 M_512x512 S_256x256 XL_2048x2048 XS_128x128 XXL_4096x4096 XXS_64x64"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.RGBASelectorControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.RGBASelectorControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.RGBASelectorControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.RGBASelectorControl.-ctor.html",
    "title": "Constructor RGBASelectorControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor RGBASelectorControl RGBASelectorControl(String) Declaration public RGBASelectorControl(string propertyName) Parameters Type Name Description String propertyName"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.RGBASelectorControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.RGBASelectorControl.html",
    "title": "Class RGBASelectorControl | Simple Shader Inspectors Documentation",
    "keywords": "Class RGBASelectorControl Represents a control that provides a selector for a texture channel. Inheritance Object SimpleControl PropertyControl RGBASelectorControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class RGBASelectorControl : PropertyControl Remarks This control can be used to filter out a mask texture into a the channel that you want. It returns to the property the index of the channel selected, with Red = 0 , Green = 1 , Blue = 2 and Alpha = 3 . This makes the usage of the value fairly easy in shader since to sample the channel you want you just need to do sampledTexture[_SelectedChannel] where sampledTexture if the float4 of your texture after sampling it, and _SelectedChannel is the property given to this control. Examples Example usage: // Adds a new RGBASelectorControl this.AddRGBASelectorControl(\"_TextureProperty\"); Constructors Name Description RGBASelectorControl(String) Methods Name Description ControlGUI(MaterialEditor) Extension Methods Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.AdditionalProperties.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.AdditionalProperties.html",
    "title": "Property AdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalProperties AdditionalProperties Extra properties array. Implementation needed by IAdditionalProperties . Declaration public AdditionalProperty[] AdditionalProperties { get; set; } Property Value Type Description AdditionalProperty [] Array of AdditionalProperties . Implements IAdditionalProperties.AdditionalProperties Remarks The Array will contain the following material properties: [0]: Property used for the enabled state"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides Section.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.-ctor.html",
    "title": "Constructor ActivatableSection | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ActivatableSection ActivatableSection(String, String, Single, Single, Single, Single) Constructor of ActivatableSection used when creating a property driven ActivatableSection. Declaration public ActivatableSection(string activatePropertyName, string showPropertyName, float enableValue = 1F, float disableValue = 0F, float hideValue = 0F, float showValue = 1F) Parameters Type Name Description String activatePropertyName Material property that will drive the section enable state String showPropertyName Material property that will drive the section open state Single enableValue Float value that the material property will have if the section is disabled, optional (default: 0). Single disableValue Float value that the material property will have if the section is enabled, optional (default: 1). Single hideValue Float value that the material property will have if the section is collapsed, optional (default: 0). Single showValue Float value that the material property will have if the section is visible, optional (default: 1). ActivatableSection(String, Single, Single) Default constructor of ActivatableSection . Declaration public ActivatableSection(string activatePropertyName, float enableValue = 1F, float disableValue = 0F) Parameters Type Name Description String activatePropertyName Material property that will drive the section enable state Single enableValue Float value that the material property will have if the section is disabled, optional (default: 0). Single disableValue Float value that the material property will have if the section is enabled, optional (default: 1)."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.disableValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.disableValue.html",
    "title": "Field disableValue | Simple Shader Inspectors Documentation",
    "keywords": "Field disableValue Float value that the Show bool gets converted if false. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected float disableValue Returns Single Value of the activate material property when the section is disabled."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.Enabled.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.Enabled.html",
    "title": "Property Enabled | Simple Shader Inspectors Documentation",
    "keywords": "Property Enabled Enabled Boolean indicating if the section is enabled or not. Declaration public bool Enabled { get; protected set; } Property Value Type Description Boolean True if the section is active, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.enableValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.enableValue.html",
    "title": "Field enableValue | Simple Shader Inspectors Documentation",
    "keywords": "Field enableValue Float value that the Show bool gets converted if true. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected float enableValue Returns Single Value of the activate material property when the section is enabled."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.HasActivatePropertyUpdated.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.HasActivatePropertyUpdated.html",
    "title": "Property HasActivatePropertyUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasActivatePropertyUpdated HasActivatePropertyUpdated Has the property been updated this cycle? Declaration public bool HasActivatePropertyUpdated { get; protected set; } Property Value Type Description Boolean True if the activate property has been updated, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.html",
    "title": "Class ActivatableSection | Simple Shader Inspectors Documentation",
    "keywords": "Class ActivatableSection Section that can be activated or deactivated thanks to a checkbox inside the header. Inheritance Object SimpleControl PropertyControl Section ActivatableSection Implements IControlContainer INonAnimatableProperty IAdditionalProperties Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class ActivatableSection : Section, IControlContainer, INonAnimatableProperty, IAdditionalProperties Remarks This more advanced version of Section has in addition one checkbox to enable/disable the content of the section. When disabled the content is still visible, but cannot be edited. This section requires at least one material property to drive the enabled/disabled state, and it will use this material property name as alias. Examples Example usage: // Add an activatable section this.AddActivatableSection(\"_EnableProperty\"); // Add an activatable section, the property will have the values of 2 and 4 when off and on respectively this.AddActivatableSection(\"_EnableProperty\", 2, 4); // Add an activatable section with the show state being driven by a property this.AddActivatableSection(\"_EnableProperty\", \"_ShowProperty\"); // Add an activatable section, the properties will have set values when on and off, 2/4 for the enable one and 0/1 of the show one. this.AddActivatableSection(\"_EnableProperty\", \"_ShowProperty\", 2, 4, 0, 1); Constructors Name Description ActivatableSection(String, Single, Single) Default constructor of ActivatableSection . ActivatableSection(String, String, Single, Single, Single, Single) Constructor of ActivatableSection used when creating a property driven ActivatableSection. Fields Name Description disableValue Float value that the Show bool gets converted if false. enableValue Float value that the Show bool gets converted if true. Properties Name Description AdditionalProperties Extra properties array. Implementation needed by IAdditionalProperties . Enabled Boolean indicating if the section is enabled or not. HasActivatePropertyUpdated Has the property been updated this cycle? Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String) Chainables.WithLabelStyle<T>(T, GUIStyle) Chainables.WithBackgroundStyle<T>(T, GUIStyle) Chainables.WithAreControlsInHeader<T>(T, Boolean) Chainables.WithIsPropertyAnimatable<T>(T, Boolean) Chainables.WithShowFoldoutArrow<T>(T, Boolean) Chainables.WithBackgroundColor<T>(T, Color)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddActivatableSection.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddActivatableSection.html",
    "title": "Method AddActivatableSection | Simple Shader Inspectors Documentation",
    "keywords": "Method AddActivatableSection AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Declaration public static ActivatableSection AddActivatableSection(this IControlContainer container, string activatePropertyName, string showPropertyName, float enableValue = 1F, float disableValue = 0F, float hideValue = 0F, float showValue = 1F, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String activatePropertyName String showPropertyName Single enableValue Single disableValue Single hideValue Single showValue String appendAfterAlias Returns Type Description ActivatableSection AddActivatableSection(IControlContainer, String, Single, Single, String) Declaration public static ActivatableSection AddActivatableSection(this IControlContainer container, string activatePropertyName, float enableValue = 1F, float disableValue = 0F, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String activatePropertyName Single enableValue Single disableValue String appendAfterAlias Returns Type Description ActivatableSection"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddOrderedSection.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddOrderedSection.html",
    "title": "Method AddOrderedSection | Simple Shader Inspectors Documentation",
    "keywords": "Method AddOrderedSection AddOrderedSection(OrderedSectionGroup, String, String, Single, Single, Single, Single, String) Declaration public static OrderedSection AddOrderedSection(this OrderedSectionGroup container, string activatePropertyName, string showPropertyName, float enableValue = 1F, float disableValue = 0F, float showValue = 1F, float hideValue = 0F, string appendAfterAlias = \"\") Parameters Type Name Description OrderedSectionGroup container String activatePropertyName String showPropertyName Single enableValue Single disableValue Single showValue Single hideValue String appendAfterAlias Returns Type Description OrderedSection AddOrderedSection(OrderedSectionGroup, String, Single, Single, String) Declaration public static OrderedSection AddOrderedSection(this OrderedSectionGroup container, string activatePropertyName, float enableValue = 1F, float disableValue = 0F, string appendAfterAlias = \"\") Parameters Type Name Description OrderedSectionGroup container String activatePropertyName Single enableValue Single disableValue String appendAfterAlias Returns Type Description OrderedSection"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddOrderedSectionGroup.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddOrderedSectionGroup.html",
    "title": "Method AddOrderedSectionGroup | Simple Shader Inspectors Documentation",
    "keywords": "Method AddOrderedSectionGroup AddOrderedSectionGroup(IControlContainer, String, String) Declaration public static OrderedSectionGroup AddOrderedSectionGroup(this IControlContainer container, string alias, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String alias String appendAfterAlias Returns Type Description OrderedSectionGroup"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddSection.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.AddSection.html",
    "title": "Method AddSection | Simple Shader Inspectors Documentation",
    "keywords": "Method AddSection AddSection(IControlContainer, String, Single, Single, String) Declaration public static Section AddSection(this IControlContainer container, string propertyName, float hideValue = 0F, float showValue = 1F, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String propertyName Single hideValue Single showValue String appendAfterAlias Returns Type Description Section AddSection(IControlContainer, String) Declaration public static Section AddSection(this IControlContainer container, string appendAfterAlias = \"\") Parameters Type Name Description IControlContainer container String appendAfterAlias Returns Type Description Section"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.html",
    "title": "Class Chainables | Simple Shader Inspectors Documentation",
    "keywords": "Class Chainables Inheritance Object Chainables Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public static class Chainables Methods Name Description AddActivatableSection(IControlContainer, String, Single, Single, String) AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) AddOrderedSection(OrderedSectionGroup, String, Single, Single, String) AddOrderedSection(OrderedSectionGroup, String, String, Single, Single, Single, Single, String) AddOrderedSectionGroup(IControlContainer, String, String) AddSection(IControlContainer, String) AddSection(IControlContainer, String, Single, Single, String) WithAreControlsInHeader<T>(T, Boolean) WithBackgroundColor<T>(T, Color) WithBackgroundStyle<T>(T, GUIStyle) WithDeleteColor<T>(T, Color) WithDeleteIcon<T>(T, GUIStyle) WithDownColor<T>(T, Color) WithDownIcon<T>(T, GUIStyle) WithIsPropertyAnimatable<T>(T, Boolean) WithLabelStyle<T>(T, GUIStyle) WithShowFoldoutArrow<T>(T, Boolean) WithUpColor<T>(T, Color) WithUpIcon<T>(T, GUIStyle)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithAreControlsInHeader.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithAreControlsInHeader.html",
    "title": "Method WithAreControlsInHeader | Simple Shader Inspectors Documentation",
    "keywords": "Method WithAreControlsInHeader WithAreControlsInHeader<T>(T, Boolean) Declaration public static T WithAreControlsInHeader<T>(this T control, bool property) where T : Section Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithBackgroundColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithBackgroundColor.html",
    "title": "Method WithBackgroundColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithBackgroundColor WithBackgroundColor<T>(T, Color) Declaration public static T WithBackgroundColor<T>(this T control, Color property) where T : Section Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithBackgroundStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithBackgroundStyle.html",
    "title": "Method WithBackgroundStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method WithBackgroundStyle WithBackgroundStyle<T>(T, GUIStyle) Declaration public static T WithBackgroundStyle<T>(this T control, GUIStyle property) where T : Section Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithDeleteColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithDeleteColor.html",
    "title": "Method WithDeleteColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithDeleteColor WithDeleteColor<T>(T, Color) Declaration public static T WithDeleteColor<T>(this T control, Color property) where T : OrderedSection Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithDeleteIcon.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithDeleteIcon.html",
    "title": "Method WithDeleteIcon | Simple Shader Inspectors Documentation",
    "keywords": "Method WithDeleteIcon WithDeleteIcon<T>(T, GUIStyle) Declaration public static T WithDeleteIcon<T>(this T control, GUIStyle property) where T : OrderedSection Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithDownColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithDownColor.html",
    "title": "Method WithDownColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithDownColor WithDownColor<T>(T, Color) Declaration public static T WithDownColor<T>(this T control, Color property) where T : OrderedSection Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithDownIcon.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithDownIcon.html",
    "title": "Method WithDownIcon | Simple Shader Inspectors Documentation",
    "keywords": "Method WithDownIcon WithDownIcon<T>(T, GUIStyle) Declaration public static T WithDownIcon<T>(this T control, GUIStyle property) where T : OrderedSection Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithIsPropertyAnimatable.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithIsPropertyAnimatable.html",
    "title": "Method WithIsPropertyAnimatable | Simple Shader Inspectors Documentation",
    "keywords": "Method WithIsPropertyAnimatable WithIsPropertyAnimatable<T>(T, Boolean) Declaration public static T WithIsPropertyAnimatable<T>(this T control, bool property) where T : Section Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithLabelStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithLabelStyle.html",
    "title": "Method WithLabelStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method WithLabelStyle WithLabelStyle<T>(T, GUIStyle) Declaration public static T WithLabelStyle<T>(this T control, GUIStyle property) where T : Section Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithShowFoldoutArrow.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithShowFoldoutArrow.html",
    "title": "Method WithShowFoldoutArrow | Simple Shader Inspectors Documentation",
    "keywords": "Method WithShowFoldoutArrow WithShowFoldoutArrow<T>(T, Boolean) Declaration public static T WithShowFoldoutArrow<T>(this T control, bool property) where T : Section Parameters Type Name Description T control Boolean property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithUpColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithUpColor.html",
    "title": "Method WithUpColor | Simple Shader Inspectors Documentation",
    "keywords": "Method WithUpColor WithUpColor<T>(T, Color) Declaration public static T WithUpColor<T>(this T control, Color property) where T : OrderedSection Parameters Type Name Description T control Color property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithUpIcon.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Chainables.WithUpIcon.html",
    "title": "Method WithUpIcon | Simple Shader Inspectors Documentation",
    "keywords": "Method WithUpIcon WithUpIcon<T>(T, GUIStyle) Declaration public static T WithUpIcon<T>(this T control, GUIStyle property) where T : OrderedSection Parameters Type Name Description T control GUIStyle property Returns Type Description T Type Parameters Name Description T"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors.Controls.Sections | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors.Controls.Sections Classes ActivatableSection Section that can be activated or deactivated thanks to a checkbox inside the header. Chainables OrderedSection Section that can be hidden and ordered when in groups. OrderedSectionDropdown Dropdown used by the OrderedSectionGroup and used to give the user a searchable dropdown to enable disabled sections. OrderedSectionGroup Control that contains a list of OrderedSections and manages their lifecycle. Section Represents a grouping of controls with an header that can be folded in and out. SectionDropdownItem Dropdown item used by OrderedSectionDropdown for its items"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.AdditionalContent.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.AdditionalContent.html",
    "title": "Property AdditionalContent | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalContent AdditionalContent Extra localization array. Implementation needed by IAdditionalLocalization . Declaration public AdditionalLocalization[] AdditionalContent { get; set; } Property Value Type Description AdditionalLocalization [] Array of AdditionalLocalization Implements IAdditionalLocalization.AdditionalContent Remarks This array will contain 1 element containing the custom path for the ordered section item in the popup menu of the OrderedSectionGroup add button."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.AdditionalProperties.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.AdditionalProperties.html",
    "title": "Property AdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalProperties AdditionalProperties Extra properties array. Implementation needed by IAdditionalProperties . Declaration public AdditionalProperty[] AdditionalProperties { get; set; } Property Value Type Description AdditionalProperty [] Array of AdditionalProperties . Implements IAdditionalProperties.AdditionalProperties Remarks The Array will contain the following material properties: [0]: Property used for the enabled state"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides Section.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.-ctor.html",
    "title": "Constructor OrderedSection | Simple Shader Inspectors Documentation",
    "keywords": "Constructor OrderedSection OrderedSection(String, String, Single, Single, Single, Single) Constructor of OrderedSection used when creating a property driven OrderedSection. Declaration [LimitAccessScope(typeof(OrderedSectionGroup))] public OrderedSection(string activatePropertyName, string showPropertyName, float enableValue = 1F, float disableValue = 0F, float showValue = 1F, float hideValue = 0F) Parameters Type Name Description String activatePropertyName Material property that will drive the section enable state String showPropertyName Material property that will drive the section open state Single enableValue Float value that the material property will have if the section is enabled, optional (default: 1). Single disableValue Float value that the material property will have if the section is disabled, optional (default: 0). Single showValue Float value that the material property will have if the section is visible, optional (default: 1). Single hideValue Float value that the material property will have if the section is collapsed, optional (default: 0). OrderedSection(String, Single, Single) Default constructor of OrderedSection . Declaration [LimitAccessScope(typeof(OrderedSectionGroup))] public OrderedSection(string activatePropertyName, float enableValue = 1F, float disableValue = 0F) Parameters Type Name Description String activatePropertyName Material property that will drive the section enable state Single enableValue Float value that the material property will have if the section is enabled, optional (default: 1). Single disableValue Float value that the material property will have if the section is disabled, optional (default: 0)."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.CustomPopupPath.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.CustomPopupPath.html",
    "title": "Property CustomPopupPath | Simple Shader Inspectors Documentation",
    "keywords": "Property CustomPopupPath CustomPopupPath Custom path for the selection inside the popup of the ordered section group Declaration public string CustomPopupPath { get; } Property Value Type Description String The custom path (does not include the section name itself Remarks The custom path is taken directly from the localization of it, so that different languages can have their own path names. If the path found in the localization equals to the combined \"Alias_Name\" used for finding the localization, it will automatically be assumed that no path has been given"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DeleteColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DeleteColor.html",
    "title": "Property DeleteColor | Simple Shader Inspectors Documentation",
    "keywords": "Property DeleteColor DeleteColor Color of the delete icon. Declaration public Color DeleteColor { get; set; } Property Value Type Description Color Color used to display the down icon."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DeleteIcon.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DeleteIcon.html",
    "title": "Property DeleteIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property DeleteIcon DeleteIcon Style for the delete icon. Declaration public GUIStyle DeleteIcon { get; set; } Property Value Type Description GUIStyle GUIStyle used for the delete icon display."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.disableValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.disableValue.html",
    "title": "Field disableValue | Simple Shader Inspectors Documentation",
    "keywords": "Field disableValue Float value that the Show bool gets converted if false. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected float disableValue Returns Single Value of the activate material property when the section is disabled."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DownColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DownColor.html",
    "title": "Property DownColor | Simple Shader Inspectors Documentation",
    "keywords": "Property DownColor DownColor Color of the down icon. Declaration public Color DownColor { get; set; } Property Value Type Description Color Color used to display the down icon."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DownIcon.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DownIcon.html",
    "title": "Property DownIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property DownIcon DownIcon Style for the down icon. Declaration public GUIStyle DownIcon { get; set; } Property Value Type Description GUIStyle GUIStyle used for the down icon display."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DrawSideButtons.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DrawSideButtons.html",
    "title": "Method DrawSideButtons | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawSideButtons DrawSideButtons() Draws and handles the up, down and delete icon on the side. Declaration protected void DrawSideButtons()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.Enabled.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.Enabled.html",
    "title": "Property Enabled | Simple Shader Inspectors Documentation",
    "keywords": "Property Enabled Enabled Boolean indicating if the section is enabled or not. Declaration public bool Enabled { get; protected set; } Property Value Type Description Boolean True if the section is enabled, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.enableValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.enableValue.html",
    "title": "Field enableValue | Simple Shader Inspectors Documentation",
    "keywords": "Field enableValue Float value that the Show bool gets converted if true. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected float enableValue Returns Single Value of the activate material property when the section is enabled."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasActivatePropertyUpdated.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasActivatePropertyUpdated.html",
    "title": "Property HasActivatePropertyUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasActivatePropertyUpdated HasActivatePropertyUpdated Boolean indicating if the activate property has been updated this cycle. Declaration public bool HasActivatePropertyUpdated { get; protected set; } Property Value Type Description Boolean True if the activate property has been updated, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasAtLeastOneMaterialDisabled.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasAtLeastOneMaterialDisabled.html",
    "title": "Method HasAtLeastOneMaterialDisabled | Simple Shader Inspectors Documentation",
    "keywords": "Method HasAtLeastOneMaterialDisabled HasAtLeastOneMaterialDisabled() Declaration public bool HasAtLeastOneMaterialDisabled() Returns Type Description Boolean"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasSectionTurnedOn.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasSectionTurnedOn.html",
    "title": "Property HasSectionTurnedOn | Simple Shader Inspectors Documentation",
    "keywords": "Property HasSectionTurnedOn HasSectionTurnedOn Boolean indicating if the section has turned on this cycle. Declaration public bool HasSectionTurnedOn { get; set; } Property Value Type Description Boolean True if the section has just been turned on, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.html",
    "title": "Class OrderedSection | Simple Shader Inspectors Documentation",
    "keywords": "Class OrderedSection Section that can be hidden and ordered when in groups. Inheritance Object SimpleControl PropertyControl Section OrderedSection Implements IControlContainer INonAnimatableProperty IAdditionalProperties IAdditionalLocalization Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class OrderedSection : Section, IControlContainer, INonAnimatableProperty, IAdditionalProperties, IAdditionalLocalization Remarks It can be considered an additional evolution of ActivatableSection , but it actually inherits directly from Section . Functionality wise it acts pretty much the same as ActivatableSection , the main difference is in how it does that. Namely instead of having a disabled state, it gets disabled it completely disappears from the ui, resulting in an overall cleaner ui. Unlike other types of sections, this one cannot be added directly to the inspector, instead it has to be added to an OrderedSectionGroup in order to work properly. In fact the only way to enable a previously disabled OrderedSection in the ui is by using the add button provided by OrderedSectionGroup Another quirk of this type of section is that it can be moved up or down relative to the sections of the same group, letting the user order them in whichever way they see fit best. Examples Example usage: // Adds an OrderedSection to the current inspector OrderedSectionGroup group = this.AddOrderedSectionGroup(\"GroupAlias\"); // Adds an OrderedSection using the specified property as activation property group.AddOrderedSection(\"_ActivateProperty\"); // Adds an OrderedSection using the specified property as activation property, // the values for activation are set to 2-3 respectively when disabled and enabled group.AddOrderedSection(\"_ActivateProperty\", 2, 3); // Adds an OrderedSection using the specified properties for activation and folding state group.AddOrderedSection(\"_ActivateProperty\", \"_ShowProperty\"); // Adds an OrderedSection using the specified properties for activation and folding state, // the values for activation are set to 2-3 respectively when disabled and enabled // the values for folding are set to 4-6 respectively when folded in and out group.AddOrderedSection(\"_ActivateProperty\", \"_ShowProperty\", 2, 3, 4, 6); Constructors Name Description OrderedSection(String, Single, Single) Default constructor of OrderedSection . OrderedSection(String, String, Single, Single, Single, Single) Constructor of OrderedSection used when creating a property driven OrderedSection. Fields Name Description disableValue Float value that the Show bool gets converted if false. enableValue Float value that the Show bool gets converted if true. PushState Indicates if the section should be pushed up or down relative to its neighbour sections. Properties Name Description AdditionalContent Extra localization array. Implementation needed by IAdditionalLocalization . AdditionalProperties Extra properties array. Implementation needed by IAdditionalProperties . CustomPopupPath Custom path for the selection inside the popup of the ordered section group DeleteColor Color of the delete icon. DeleteIcon Style for the delete icon. DownColor Color of the down icon. DownIcon Style for the down icon. Enabled Boolean indicating if the section is enabled or not. HasActivatePropertyUpdated Boolean indicating if the activate property has been updated this cycle. HasSectionTurnedOn Boolean indicating if the section has turned on this cycle. SectionPosition integer indicating the position of the section in the group. UpColor Color of the up icon. UpIcon Style for the up icon. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. DrawSideButtons() Draws and handles the up, down and delete icon on the side. HasAtLeastOneMaterialDisabled() PredrawUpdate(MaterialEditor) Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) AdditionalContentExtensions.InitializeLocalizationWithNames(IAdditionalLocalization, String[]) Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.WithUpIcon<T>(T, GUIStyle) Chainables.WithDownIcon<T>(T, GUIStyle) Chainables.WithDeleteIcon<T>(T, GUIStyle) Chainables.WithUpColor<T>(T, Color) Chainables.WithDownColor<T>(T, Color) Chainables.WithDeleteColor<T>(T, Color) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String) Chainables.WithLabelStyle<T>(T, GUIStyle) Chainables.WithBackgroundStyle<T>(T, GUIStyle) Chainables.WithAreControlsInHeader<T>(T, Boolean) Chainables.WithIsPropertyAnimatable<T>(T, Boolean) Chainables.WithShowFoldoutArrow<T>(T, Boolean) Chainables.WithBackgroundColor<T>(T, Color)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.PredrawUpdate.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.PredrawUpdate.html",
    "title": "Method PredrawUpdate | Simple Shader Inspectors Documentation",
    "keywords": "Method PredrawUpdate PredrawUpdate(MaterialEditor) Declaration public void PredrawUpdate(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.PushState.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.PushState.html",
    "title": "Field PushState | Simple Shader Inspectors Documentation",
    "keywords": "Field PushState Indicates if the section should be pushed up or down relative to its neighbour sections. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public int PushState Returns Int32 0 when not moving, -1 when needs to go up, 1 when needs to go down."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.SectionPosition.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.SectionPosition.html",
    "title": "Property SectionPosition | Simple Shader Inspectors Documentation",
    "keywords": "Property SectionPosition SectionPosition integer indicating the position of the section in the group. Declaration public int SectionPosition { get; set; } Property Value Type Description Int32"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.UpColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.UpColor.html",
    "title": "Property UpColor | Simple Shader Inspectors Documentation",
    "keywords": "Property UpColor UpColor Color of the up icon. Declaration public Color UpColor { get; set; } Property Value Type Description Color Color used to display the up icon."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.UpIcon.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.UpIcon.html",
    "title": "Property UpIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property UpIcon UpIcon Style for the up icon. Declaration public GUIStyle UpIcon { get; set; } Property Value Type Description GUIStyle GUIStyle used for the up icon display."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionDropdown.BuildRoot.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionDropdown.BuildRoot.html",
    "title": "Method BuildRoot | Simple Shader Inspectors Documentation",
    "keywords": "Method BuildRoot BuildRoot() Declaration protected override AdvancedDropdownItem BuildRoot() Returns Type Description AdvancedDropdownItem Overrides AdvancedDropdown.BuildRoot()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionDropdown.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionDropdown.-ctor.html",
    "title": "Constructor OrderedSectionDropdown | Simple Shader Inspectors Documentation",
    "keywords": "Constructor OrderedSectionDropdown OrderedSectionDropdown(String, AdvancedDropdownState, IEnumerable<OrderedSection>, Action<OrderedSection>) Main constructor of the OrderedSectionDropdown Declaration public OrderedSectionDropdown(string name, AdvancedDropdownState state, IEnumerable<OrderedSection> sections, Action<OrderedSection> turnOnSection) Parameters Type Name Description String name name visualized in the header AdvancedDropdownState state Advanced dropdown state IEnumerable < OrderedSection > sections enumerable of OrderedSection to display in the dropdown Action < OrderedSection > turnOnSection Function to call when selecting a section"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionDropdown.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionDropdown.html",
    "title": "Class OrderedSectionDropdown | Simple Shader Inspectors Documentation",
    "keywords": "Class OrderedSectionDropdown Dropdown used by the OrderedSectionGroup and used to give the user a searchable dropdown to enable disabled sections. Inheritance Object AdvancedDropdown OrderedSectionDropdown Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class OrderedSectionDropdown : AdvancedDropdown Constructors Name Description OrderedSectionDropdown(String, AdvancedDropdownState, IEnumerable<OrderedSection>, Action<OrderedSection>) Main constructor of the OrderedSectionDropdown Methods Name Description BuildRoot() ItemSelected(AdvancedDropdownItem)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionDropdown.ItemSelected.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionDropdown.ItemSelected.html",
    "title": "Method ItemSelected | Simple Shader Inspectors Documentation",
    "keywords": "Method ItemSelected ItemSelected(AdvancedDropdownItem) Declaration protected override void ItemSelected(AdvancedDropdownItem item) Parameters Type Name Description AdvancedDropdownItem item Overrides AdvancedDropdown.ItemSelected(AdvancedDropdownItem)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(OrderedSection, String) Implementation needed by IControlContainer<T> to add controls. All controls added are stored in Controls Declaration public void AddControl(OrderedSection control, string alias = \"\") Parameters Type Name Description OrderedSection control Control to add. String alias Optional alias to say where a control is appended after. Implements IControlContainer<T>.AddControl(T, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ButtonColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ButtonColor.html",
    "title": "Property ButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property ButtonColor ButtonColor Color of the add button. Declaration public Color ButtonColor { get; set; } Property Value Type Description Color Color used when displaying the add button."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ButtonStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ButtonStyle.html",
    "title": "Property ButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property ButtonStyle ButtonStyle Style for the add button. Declaration public GUIStyle ButtonStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the add button."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the group of sections. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.Controls.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of available Ordered Sections. Declaration public List<OrderedSection> Controls { get; set; } Property Value Type Description List < OrderedSection > A list of OrderedSection containing the sections this control manages."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.-ctor.html",
    "title": "Constructor OrderedSectionGroup | Simple Shader Inspectors Documentation",
    "keywords": "Constructor OrderedSectionGroup OrderedSectionGroup(String) Default constructor of OrderedSectionGroup . Declaration public OrderedSectionGroup(string alias) Parameters Type Name Description String alias Alias of the control"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.GetControlList.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Implementation needed by IControlContainer<T> to get the object's controls list. Declaration public IEnumerable<OrderedSection> GetControlList() Returns Type Description IEnumerable < OrderedSection > Controls Implements IControlContainer<T>.GetControlList()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.html",
    "title": "Class OrderedSectionGroup | Simple Shader Inspectors Documentation",
    "keywords": "Class OrderedSectionGroup Control that contains a list of OrderedSections and manages their lifecycle. Inheritance Object SimpleControl OrderedSectionGroup Implements IControlContainer < OrderedSection > IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class OrderedSectionGroup : SimpleControl, IControlContainer<OrderedSection>, IControlContainer Remarks The main purpose of this control is to manage multiple OrderedSection controls, reordering them when needed, and provide a button to enable disabled ones In practice this control is what makes the entire ordered section system work, and that's the reason to why controls of type OrderedSection can only live inside this control. Examples Example usage: OrderedSectionGroup group = this.AddOrderedSectionGroup(\"GroupAlias\"); group.AddOrderedSection(\"_ActivateProperty1\"); group.AddOrderedSection(\"_ActivateProperty2\"); group.AddOrderedSection(\"_ActivateProperty3\"); Constructors Name Description OrderedSectionGroup(String) Default constructor of OrderedSectionGroup . Properties Name Description ButtonColor Color of the add button. ButtonStyle Style for the add button. Controls List of available Ordered Sections. Methods Name Description AddControl(OrderedSection, String) Implementation needed by IControlContainer<T> to add controls. All controls added are stored in Controls ControlGUI(MaterialEditor) Draws the group of sections. GetControlList() Implementation needed by IControlContainer<T> to get the object's controls list. Explicit Interface Implementations Name Description IControlContainer.AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls only if the parameter is of type OrderedSection IControlContainer.GetControlList() Implementation needed by IControlContainer to get the object's controls list. Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSection(OrderedSectionGroup, String, String, Single, Single, Single, Single, String) Chainables.AddOrderedSection(OrderedSectionGroup, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.VRLabs-SimpleShaderInspectors-IControlContainer-AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.VRLabs-SimpleShaderInspectors-IControlContainer-AddControl.html",
    "title": "Method IControlContainer.AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method IControlContainer.AddControl IControlContainer.AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls only if the parameter is of type OrderedSection Declaration void IControlContainer.AddControl(SimpleControl control, string alias = \"\") Parameters Type Name Description SimpleControl control Control to add. String alias Optional alias to say where a control is appended after. Implements IControlContainer.AddControl(SimpleControl, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.VRLabs-SimpleShaderInspectors-IControlContainer-GetControlList.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.VRLabs-SimpleShaderInspectors-IControlContainer-GetControlList.html",
    "title": "Method IControlContainer.GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method IControlContainer.GetControlList IControlContainer.GetControlList() Implementation needed by IControlContainer to get the object's controls list. Declaration IEnumerable<SimpleControl> IControlContainer.GetControlList() Returns Type Description IEnumerable < SimpleControl > Controls Implements IControlContainer.GetControlList()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls Declaration public void AddControl(SimpleControl control, string alias = \"\") Parameters Type Name Description SimpleControl control Control to add. String alias Optional alias to say where a control is appended after. Implements IControlContainer.AddControl(SimpleControl, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.AreControlsInHeader.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.AreControlsInHeader.html",
    "title": "Property AreControlsInHeader | Simple Shader Inspectors Documentation",
    "keywords": "Property AreControlsInHeader AreControlsInHeader Boolean indicating if child controls will be inside the header background. Declaration public bool AreControlsInHeader { get; set; } Property Value Type Description Boolean True if the child controls are displayed inside the background style of the header, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.BackgroundColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.BackgroundColor.html",
    "title": "Property BackgroundColor | Simple Shader Inspectors Documentation",
    "keywords": "Property BackgroundColor BackgroundColor Background color of the header. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Color Color used when displaying the header background."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.BackgroundStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.BackgroundStyle.html",
    "title": "Property BackgroundStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property BackgroundStyle BackgroundStyle Style of the header background. Declaration public GUIStyle BackgroundStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the header background."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.Controls.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls inside this section. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > List of controls that this section shows/hides."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.-ctor.html",
    "title": "Constructor Section | Simple Shader Inspectors Documentation",
    "keywords": "Constructor Section Section(String, Single, Single) Constructor of Section used when creating a property driven section Declaration public Section(string propertyName, float hideValue = 0F, float showValue = 1F) Parameters Type Name Description String propertyName Material property that will drive the section open state Single hideValue Float value that the material property will have if the section is collapsed, optional (default: 0). Single showValue Float value that the material property will have if the section is visible, optional (default: 1). Section() Default constructor of Section . Declaration public Section()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.DictionaryKey.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.DictionaryKey.html",
    "title": "Field DictionaryKey | Simple Shader Inspectors Documentation",
    "keywords": "Field DictionaryKey String containing the key value that the section will use for the dictionary. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected string DictionaryKey Returns String The key used for the dictionary value."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.DrawControls.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.DrawControls.html",
    "title": "Method DrawControls | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawControls DrawControls(MaterialEditor) Draws the list of controls that can be hidden by this control. Declaration protected void DrawControls(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.FirstCycle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.FirstCycle.html",
    "title": "Field FirstCycle | Simple Shader Inspectors Documentation",
    "keywords": "Field FirstCycle Boolean indicating if it's the first ui update. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected bool FirstCycle Returns Boolean True if it's the first UI update, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.GetControlList.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > Implements IControlContainer.GetControlList()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.HideValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.HideValue.html",
    "title": "Field HideValue | Simple Shader Inspectors Documentation",
    "keywords": "Field HideValue Float value that the Show bool gets converted if false. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected readonly float HideValue Returns Single Value of the material property when the section is closed."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.html",
    "title": "Class Section | Simple Shader Inspectors Documentation",
    "keywords": "Class Section Represents a grouping of controls with an header that can be folded in and out. Inheritance Object SimpleControl PropertyControl Section ActivatableSection OrderedSection Implements IControlContainer INonAnimatableProperty Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class Section : PropertyControl, IControlContainer, INonAnimatableProperty Remarks On bigger shaders it may be needed to organize options in categories to make easier for the user to find the option they want to modify. This control makes you able to organize it with ease, by grouping controls under categories with a dedicated title. The folding state can be controlled either by the control alone, or driven by a material property. In this last case the folding state will stay saved between editor sessions. In case a material property isn't used, a default alias is used. This alias is shared between al sections, so you need to override it if you want to use a different string for each section. Examples Example usage: // Adds a section and sets its alias this.AddSection().WithAlias(\"ExampleAlias\"); // Adds a section that uses a material property for its folding state. this.AddSection(\"_ExampleProperty\"); // Adds a section that uses a material property for its folding state. // When not folded out the property value will be 2, when folded out 6 this.AddSection(\"_ExampleProperty\", 2, 6); Constructors Name Description Section() Default constructor of Section . Section(String, Single, Single) Constructor of Section used when creating a property driven section Fields Name Description DictionaryKey String containing the key value that the section will use for the dictionary. FirstCycle Boolean indicating if it's the first ui update. HideValue Float value that the Show bool gets converted if false. ShowValue Float value that the Show bool gets converted if true. UseDictionary Boolean indicating if the section folding state is driven by an internal dictionary or not. It will be true in case you don't use a material property. Properties Name Description AreControlsInHeader Boolean indicating if child controls will be inside the header background. BackgroundColor Background color of the header. BackgroundStyle Style of the header background. Controls List of controls inside this section. IsPropertyAnimatable Boolean indicating if the folding state material property is animatable or not. LabelStyle Style of the header label. NonAnimatablePropertyChanged Boolean indicating if the folding state material property needs to be updated. Implementation needed by INonAnimatableProperty . Show Bool indicating if the section is folded out or not. ShowFoldoutArrow Boolean indicating if the foldout arrow is enabled or not. Methods Name Description AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls ControlGUI(MaterialEditor) Draws the control represented by this object. DrawControls(MaterialEditor) Draws the list of controls that can be hidden by this control. GetControlList() SetupEnabled(MaterialEditor) Sets the Enabled boolean to the value currently in the source based on the settings of this control. Should only be used inside ControlGUI(MaterialEditor) . UpdateEnabled(MaterialEditor) Updates the source of the Enabled boolean base on the settings of this control. Should only be used inside ControlGUI(MaterialEditor) . UpdateNonAnimatableProperty(MaterialEditor) Updates properties that should not be animated, implementation needed by INonAnimatableProperty Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String) Chainables.WithLabelStyle<T>(T, GUIStyle) Chainables.WithBackgroundStyle<T>(T, GUIStyle) Chainables.WithAreControlsInHeader<T>(T, Boolean) Chainables.WithIsPropertyAnimatable<T>(T, Boolean) Chainables.WithShowFoldoutArrow<T>(T, Boolean) Chainables.WithBackgroundColor<T>(T, Color)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.IsPropertyAnimatable.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.IsPropertyAnimatable.html",
    "title": "Property IsPropertyAnimatable | Simple Shader Inspectors Documentation",
    "keywords": "Property IsPropertyAnimatable IsPropertyAnimatable Boolean indicating if the folding state material property is animatable or not. Declaration public bool IsPropertyAnimatable { get; set; } Property Value Type Description Boolean True if the property can be animated, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.LabelStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.LabelStyle.html",
    "title": "Property LabelStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property LabelStyle LabelStyle Style of the header label. Declaration public GUIStyle LabelStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the header label."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.NonAnimatablePropertyChanged.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.NonAnimatablePropertyChanged.html",
    "title": "Property NonAnimatablePropertyChanged | Simple Shader Inspectors Documentation",
    "keywords": "Property NonAnimatablePropertyChanged NonAnimatablePropertyChanged Boolean indicating if the folding state material property needs to be updated. Implementation needed by INonAnimatableProperty . Declaration public bool NonAnimatablePropertyChanged { get; set; } Property Value Type Description Boolean Implements INonAnimatableProperty.NonAnimatablePropertyChanged"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.SetupEnabled.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.SetupEnabled.html",
    "title": "Method SetupEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Method SetupEnabled SetupEnabled(MaterialEditor) Sets the Enabled boolean to the value currently in the source based on the settings of this control. Should only be used inside ControlGUI(MaterialEditor) . Declaration protected void SetupEnabled(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Remarks This method is available for all section controls inheriting this class and will automatically fetch the current value of the Show boolean based on if the section folding state is handled by a material property or a dictionary value. You should call it inside your override of ControlGUI(MaterialEditor) , possibly at the start of it."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.Show.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.Show.html",
    "title": "Property Show | Simple Shader Inspectors Documentation",
    "keywords": "Property Show Show Bool indicating if the section is folded out or not. Declaration public bool Show { get; protected set; } Property Value Type Description Boolean True if the section is folded out, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ShowFoldoutArrow.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ShowFoldoutArrow.html",
    "title": "Property ShowFoldoutArrow | Simple Shader Inspectors Documentation",
    "keywords": "Property ShowFoldoutArrow ShowFoldoutArrow Boolean indicating if the foldout arrow is enabled or not. Declaration public bool ShowFoldoutArrow { get; set; } Property Value Type Description Boolean True if the foldout arrow in the header is visible, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ShowValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ShowValue.html",
    "title": "Field ShowValue | Simple Shader Inspectors Documentation",
    "keywords": "Field ShowValue Float value that the Show bool gets converted if true. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected readonly float ShowValue Returns Single Value of the material property when the section is open."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UpdateEnabled.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UpdateEnabled.html",
    "title": "Method UpdateEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateEnabled UpdateEnabled(MaterialEditor) Updates the source of the Enabled boolean base on the settings of this control. Should only be used inside ControlGUI(MaterialEditor) . Declaration protected void UpdateEnabled(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Remarks This method is available for all section controls inheriting this class and will automatically update the current value of the Show boolean based on if the section folding state is handled by a material property or a dictionary value. You should call it inside your override of ControlGUI(MaterialEditor) , possibly at the end of it."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UpdateNonAnimatableProperty.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UpdateNonAnimatableProperty.html",
    "title": "Method UpdateNonAnimatableProperty | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateNonAnimatableProperty UpdateNonAnimatableProperty(MaterialEditor) Updates properties that should not be animated, implementation needed by INonAnimatableProperty Declaration public virtual void UpdateNonAnimatableProperty(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Implements INonAnimatableProperty.UpdateNonAnimatableProperty(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UseDictionary.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UseDictionary.html",
    "title": "Field UseDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Field UseDictionary Boolean indicating if the section folding state is driven by an internal dictionary or not. It will be true in case you don't use a material property. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected readonly bool UseDictionary Returns Boolean True if it uses the internal dictionary, false when it uses a material property."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionDropdownItem.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionDropdownItem.-ctor.html",
    "title": "Constructor SectionDropdownItem | Simple Shader Inspectors Documentation",
    "keywords": "Constructor SectionDropdownItem SectionDropdownItem(OrderedSection) Main constructor of SectionDropdownItem Declaration public SectionDropdownItem(OrderedSection section) Parameters Type Name Description OrderedSection section OrderedSection this item represents"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionDropdownItem.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionDropdownItem.html",
    "title": "Class SectionDropdownItem | Simple Shader Inspectors Documentation",
    "keywords": "Class SectionDropdownItem Dropdown item used by OrderedSectionDropdown for its items Inheritance Object AdvancedDropdownItem SectionDropdownItem Implements IComparable Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class SectionDropdownItem : AdvancedDropdownItem, IComparable Constructors Name Description SectionDropdownItem(OrderedSection) Main constructor of SectionDropdownItem Fields Name Description Section"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionDropdownItem.Section.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionDropdownItem.Section.html",
    "title": "Field Section | Simple Shader Inspectors Documentation",
    "keywords": "Field Section Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public readonly OrderedSection Section Returns OrderedSection"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.-ctor.html",
    "title": "Constructor SpaceControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor SpaceControl SpaceControl(Int32) Default constructor of LabelControl . Declaration public SpaceControl(int space = 0) Parameters Type Name Description Int32 space amount of space to use, if set to 0 it defaults to 1 line worth of space."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.html",
    "title": "Class SpaceControl | Simple Shader Inspectors Documentation",
    "keywords": "Class SpaceControl Represents an empty space. Inheritance Object SimpleControl SpaceControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class SpaceControl : SimpleControl Remarks It can be considered the Simple Shader Inspectors equivalent of GUILayout.Space . It does not need an alias in order to work. Examples Example usage: // Adds a space of 1 line worth of pixels this.AddSpaceControl(); // adds a space of 15 pixels this.AddSpaceControl(15); Constructors Name Description SpaceControl(Int32) Default constructor of LabelControl . Properties Name Description Space Amount of space in pixels this control has. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.Space.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.Space.html",
    "title": "Property Space | Simple Shader Inspectors Documentation",
    "keywords": "Property Space Space Amount of space in pixels this control has. Declaration public int Space { get; set; } Property Value Type Description Int32 Pixels of space."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls . These controls are going to be displayed inside the options area, after the tiling and offset option (it enabled). Declaration public void AddControl(SimpleControl control, string alias = \"\") Parameters Type Name Description SimpleControl control Control to add. String alias Optional alias to say where a control is appended after. Implements IControlContainer.AddControl(SimpleControl, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.AdditionalProperties.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.AdditionalProperties.html",
    "title": "Property AdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalProperties AdditionalProperties Extra properties array. Implementation of IAdditionalProperties . Declaration public AdditionalProperty[] AdditionalProperties { get; set; } Property Value Type Description AdditionalProperty [] List of AdditionalProperty used by this control. Implements IAdditionalProperties.AdditionalProperties Remarks The list will store the following properties: [0]: first extra property. [1]: second extra property."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.Controls.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls under this control's options. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > All controls that have been added by extension methods."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.-ctor.html",
    "title": "Constructor TextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor TextureControl TextureControl(String, String, String) Default constructor of TextureControl Declaration public TextureControl(string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description String propertyName Material property name. String extraPropertyName1 First additional material property name. Optional. String extraPropertyName2 Second additional material property name. Optional."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.DrawSideContent.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.DrawSideContent.html",
    "title": "Method DrawSideContent | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawSideContent DrawSideContent(MaterialEditor) Declaration protected virtual void DrawSideContent(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.DrawTextureSingleLine.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.DrawTextureSingleLine.html",
    "title": "Method DrawTextureSingleLine | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawTextureSingleLine DrawTextureSingleLine(MaterialEditor) Declaration protected void DrawTextureSingleLine(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.GetControlList.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Implementation needed by IControlContainer to get the object's controls list. Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > Controls Implements IControlContainer.GetControlList()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.HasCustomInlineContent.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.HasCustomInlineContent.html",
    "title": "Field HasCustomInlineContent | Simple Shader Inspectors Documentation",
    "keywords": "Field HasCustomInlineContent Indicates if controls inheriting from this one have something to display inlined with the texture. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected bool HasCustomInlineContent Returns Boolean True if the control has something to inline to the texture, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.HasExtra1.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.HasExtra1.html",
    "title": "Field HasExtra1 | Simple Shader Inspectors Documentation",
    "keywords": "Field HasExtra1 Indicates if the control has the first extra property. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected bool HasExtra1 Returns Boolean True if the control had the first extra property, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.HasExtra2.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.HasExtra2.html",
    "title": "Field HasExtra2 | Simple Shader Inspectors Documentation",
    "keywords": "Field HasExtra2 Indicates if the control has the second extra property. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected bool HasExtra2 Returns Boolean True if the control had the second extra property, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.HasHDRColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.HasHDRColor.html",
    "title": "Property HasHDRColor | Simple Shader Inspectors Documentation",
    "keywords": "Property HasHDRColor HasHDRColor Boolean that defines if the control needs to render the second material property as an hdr color field, only works if there is only one extra property and it's a color property. Declaration public bool HasHDRColor { get; set; } Property Value Type Description Boolean True if the color property should have an HDR color field, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.html",
    "title": "Class TextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Class TextureControl Represents a control for a texture property with possibility to inline 2 extra properties. Inheritance Object SimpleControl PropertyControl TextureControl GradientTextureControl TextureGeneratorControl Implements IAdditionalProperties IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class TextureControl : PropertyControl, IAdditionalProperties, IControlContainer Remarks It can be considered the Simple Shader Inspector equivalent of MaterialEditor.TexturePropertySingleLine where you can pass a texture property followed by up to 2 additional properties Unlike MaterialEditor.TexturePropertySingleLine it does add the possibility to edit texture tiling and offset, in the form of an optional gear icon on the side (the icon can be changed) Examples Example usage: // Adds a texture control with an additional color and float properties this.AddTextureControl(\"_TextureProperty\", \"_ColorProperty\", \"_FloatProperty\"); // Adds a texture control with an additional color property and editable tiling and offset this.AddTextureControl(\"_TextureProperty\", \"_ColorProperty\").SetShowUvOptions(true); Constructors Name Description TextureControl(String, String, String) Default constructor of TextureControl Fields Name Description HasCustomInlineContent Indicates if controls inheriting from this one have something to display inlined with the texture. HasExtra1 Indicates if the control has the first extra property. HasExtra2 Indicates if the control has the second extra property. IsOptionsButtonPressed Indicates if the options button is pressed and the option area is visible. Properties Name Description AdditionalProperties Extra properties array. Implementation of IAdditionalProperties . Controls List of controls under this control's options. HasHDRColor Boolean that defines if the control needs to render the second material property as an hdr color field, only works if there is only one extra property and it's a color property. OptionsAreaColor Background color for the options area. OptionsAreaStyle Style for the options background area. OptionsButtonColor Color for the options button. OptionsButtonStyle Style for the options button. ShowTilingAndOffset Boolean that defines if the control will show up the texture tiling and offset options in the options area. Methods Name Description AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls . These controls are going to be displayed inside the options area, after the tiling and offset option (it enabled). ControlGUI(MaterialEditor) Draws the control represented by this object. DrawSideContent(MaterialEditor) DrawTextureSingleLine(MaterialEditor) GetControlList() Implementation needed by IControlContainer to get the object's controls list. Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.WithShowTilingAndOffset<T>(T, Boolean) Chainables.WithHasHDRColor<T>(T, Boolean) Chainables.WithOptionsButtonStyle<T>(T, GUIStyle) Chainables.WithOptionsAreaStyle<T>(T, GUIStyle) Chainables.WithOptionsButtonColor<T>(T, Color) Chainables.WithOptionsAreaColor<T>(T, Color) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.IsOptionsButtonPressed.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.IsOptionsButtonPressed.html",
    "title": "Field IsOptionsButtonPressed | Simple Shader Inspectors Documentation",
    "keywords": "Field IsOptionsButtonPressed Indicates if the options button is pressed and the option area is visible. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected bool IsOptionsButtonPressed Returns Boolean True if the button is pressed, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.OptionsAreaColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.OptionsAreaColor.html",
    "title": "Property OptionsAreaColor | Simple Shader Inspectors Documentation",
    "keywords": "Property OptionsAreaColor OptionsAreaColor Background color for the options area. Declaration public Color OptionsAreaColor { get; set; } Property Value Type Description Color Color used when displaying the background for options area."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.OptionsAreaStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.OptionsAreaStyle.html",
    "title": "Property OptionsAreaStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property OptionsAreaStyle OptionsAreaStyle Style for the options background area. Declaration public GUIStyle OptionsAreaStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used for the background of the options area."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.OptionsButtonColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.OptionsButtonColor.html",
    "title": "Property OptionsButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property OptionsButtonColor OptionsButtonColor Color for the options button. Declaration public Color OptionsButtonColor { get; set; } Property Value Type Description Color Color used when displaying the options button."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.OptionsButtonStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.OptionsButtonStyle.html",
    "title": "Property OptionsButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property OptionsButtonStyle OptionsButtonStyle Style for the options button. Declaration public GUIStyle OptionsButtonStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the button."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.ShowTilingAndOffset.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.ShowTilingAndOffset.html",
    "title": "Property ShowTilingAndOffset | Simple Shader Inspectors Documentation",
    "keywords": "Property ShowTilingAndOffset ShowTilingAndOffset Boolean that defines if the control will show up the texture tiling and offset options in the options area. Declaration public bool ShowTilingAndOffset { get; set; } Property Value Type Description Boolean True if the control has to show the uv tiling and offset, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.AdditionalContent.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.AdditionalContent.html",
    "title": "Property AdditionalContent | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalContent AdditionalContent Additional localization strings. Implementation for IAdditionalLocalization . Declaration public AdditionalLocalization[] AdditionalContent { get; set; } Property Value Type Description AdditionalLocalization [] A list of AdditionalLocalization used by the control. Implements IAdditionalLocalization.AdditionalContent Remarks For this specific control this variable should only be used for reading values and not adding more due to the fact that unlike a usual case scenario, here the additional content is stored in multiple variables and put in a single list only when requested by this property."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides TextureControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.-ctor.html",
    "title": "Constructor TextureGeneratorControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor TextureGeneratorControl TextureGeneratorControl(String, String, String) Default constructor of TextureGeneratorControl Declaration public TextureGeneratorControl(string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description String propertyName Material property name. String extraPropertyName1 First additional material property name. Optional. String extraPropertyName2 Second additional material property name. Optional. TextureGeneratorControl(Shader, String, String, String) Default constructor of TextureGeneratorControl Declaration public TextureGeneratorControl(Shader shader, string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description Shader shader Shader used String propertyName Material property name. String extraPropertyName1 First additional material property name. Optional. String extraPropertyName2 Second additional material property name. Optional."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.DrawSideContent.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.DrawSideContent.html",
    "title": "Method DrawSideContent | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawSideContent DrawSideContent(MaterialEditor) Declaration protected override void DrawSideContent(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Overrides TextureControl.DrawSideContent(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorButtonColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorButtonColor.html",
    "title": "Property GeneratorButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorButtonColor GeneratorButtonColor Background color for the texture generator button. Declaration public Color GeneratorButtonColor { get; set; } Property Value Type Description Color Color used when displaying the generator \"open\" button."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorButtonStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorButtonStyle.html",
    "title": "Property GeneratorButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorButtonStyle GeneratorButtonStyle Style for the texture generator button. Declaration public GUIStyle GeneratorButtonStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the generator \"open\" button."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorCloseButtonColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorCloseButtonColor.html",
    "title": "Property GeneratorCloseButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorCloseButtonColor GeneratorCloseButtonColor Background color for the generator close button. Declaration public Color GeneratorCloseButtonColor { get; set; } Property Value Type Description Color Color used when displaying the generator \"close\" button."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorCloseButtonStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorCloseButtonStyle.html",
    "title": "Property GeneratorCloseButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorCloseButtonStyle GeneratorCloseButtonStyle Style for the texture generator close button. Declaration public GUIStyle GeneratorCloseButtonStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the generator \"close\" button."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorColor.html",
    "title": "Property GeneratorColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorColor GeneratorColor Background color for the generator background. Declaration public Color GeneratorColor { get; set; } Property Value Type Description Color Color used when displaying the generator background."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorInputColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorInputColor.html",
    "title": "Property GeneratorInputColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorInputColor GeneratorInputColor Background color for the generator input background. Declaration public Color GeneratorInputColor { get; set; } Property Value Type Description Color Color used when displaying the background of a generator input field."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorInputStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorInputStyle.html",
    "title": "Property GeneratorInputStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorInputStyle GeneratorInputStyle Style for the generator input background. Declaration public GUIStyle GeneratorInputStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the background of a generator input field."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorSaveButtonColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorSaveButtonColor.html",
    "title": "Property GeneratorSaveButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorSaveButtonColor GeneratorSaveButtonColor Background color for the generator save button. Declaration public Color GeneratorSaveButtonColor { get; set; } Property Value Type Description Color Color used when displaying the generator \"save\" button."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorSaveButtonStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorSaveButtonStyle.html",
    "title": "Property GeneratorSaveButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorSaveButtonStyle GeneratorSaveButtonStyle Style for the texture generator save button. Declaration public GUIStyle GeneratorSaveButtonStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the generator \"save\" button."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorStyle.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorStyle.html",
    "title": "Property GeneratorStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorStyle GeneratorStyle Style for the texture generator background. Declaration public GUIStyle GeneratorStyle { get; set; } Property Value Type Description GUIStyle GUIStyle used when displaying the generator background."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.html",
    "title": "Class TextureGeneratorControl | Simple Shader Inspectors Documentation",
    "keywords": "Class TextureGeneratorControl Represents a control for a texture property with possibility to inline 2 extra properties. Also includes a texture generator. Inheritance Object SimpleControl PropertyControl TextureControl TextureGeneratorControl Implements IAdditionalProperties IControlContainer IAdditionalLocalization Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class TextureGeneratorControl : TextureControl, IAdditionalProperties, IControlContainer, IAdditionalLocalization Remarks It is a more complex and specialized version of TextureControl , where on top of the base functionality of TextureControl it also has a full blown texture generator. When using it right away the texture generator will default to a simple 4 channel merger where for each channel you can select a texture, select which channel of the texture use, and use that as the channel for the final generated texture. While this is already a great use of the control and a fairly common one (like merging 4 monochrome texture masks) it is just one possible use, since it can load custom shaders , enabling you to create your own generator, and uses the shader's gui for setting inputs for the generator. Examples Example usage: // Adds a new texture generator control with a texture and color field, using the default merger for the generator this.AddTextureGeneratorControl(\"_TextureProperty\", \"_ColorProperty\"); // Adds a new texture generator control with a texture and color field, using a custom generator this.AddTextureGeneratorControl(myShader, \"_TextureProperty\", \"_ColorProperty\"); Constructors Name Description TextureGeneratorControl(String, String, String) Default constructor of TextureGeneratorControl TextureGeneratorControl(Shader, String, String, String) Default constructor of TextureGeneratorControl Properties Name Description AdditionalContent Additional localization strings. Implementation for IAdditionalLocalization . GeneratorButtonColor Background color for the texture generator button. GeneratorButtonStyle Style for the texture generator button. GeneratorCloseButtonColor Background color for the generator close button. GeneratorCloseButtonStyle Style for the texture generator close button. GeneratorColor Background color for the generator background. GeneratorInputColor Background color for the generator input background. GeneratorInputStyle Style for the generator input background. GeneratorSaveButtonColor Background color for the generator save button. GeneratorSaveButtonStyle Style for the texture generator save button. GeneratorStyle Style for the texture generator background. Inspector Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. DrawSideContent(MaterialEditor) Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) AdditionalContentExtensions.InitializeLocalizationWithNames(IAdditionalLocalization, String[]) Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.WithShowTilingAndOffset<T>(T, Boolean) Chainables.WithHasHDRColor<T>(T, Boolean) Chainables.WithOptionsButtonStyle<T>(T, GUIStyle) Chainables.WithOptionsAreaStyle<T>(T, GUIStyle) Chainables.WithOptionsButtonColor<T>(T, Color) Chainables.WithOptionsAreaColor<T>(T, Color) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.WithGeneratorButtonStyle<T>(T, GUIStyle) Chainables.WithGeneratorSaveButtonStyle<T>(T, GUIStyle) Chainables.WithGeneratorCloseButtonStyle<T>(T, GUIStyle) Chainables.WithGeneratorStyle<T>(T, GUIStyle) Chainables.WithGeneratorInputStyle<T>(T, GUIStyle) Chainables.WithGeneratorButtonColor<T>(T, Color) Chainables.WithGeneratorSaveButtonColor<T>(T, Color) Chainables.WithGeneratorCloseButtonColor<T>(T, Color) Chainables.WithGeneratorColor<T>(T, Color) Chainables.WithGeneratorInputColor<T>(T, Color) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.Inspector.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.Inspector.html",
    "title": "Property Inspector | Simple Shader Inspectors Documentation",
    "keywords": "Property Inspector Inspector Declaration public override ISimpleShaderInspector Inspector { get; set; } Property Value Type Description ISimpleShaderInspector Overrides SimpleControl.Inspector"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.-ctor.html",
    "title": "Constructor TilingAndOffsetControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor TilingAndOffsetControl TilingAndOffsetControl(String) Default constructor of TilingAndOffsetControl Declaration public TilingAndOffsetControl(string propertyName) Parameters Type Name Description String propertyName Material property name."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.html",
    "title": "Class TilingAndOffsetControl | Simple Shader Inspectors Documentation",
    "keywords": "Class TilingAndOffsetControl Represents a control for a texture tiling and offset field. Inheritance Object SimpleControl PropertyControl TilingAndOffsetControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class TilingAndOffsetControl : PropertyControl Constructors Name Description TilingAndOffsetControl(String) Default constructor of TilingAndOffsetControl Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.-ctor.html",
    "title": "Constructor ToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ToggleControl ToggleControl(String, Single, Single) Default constructor of ToggleControl Declaration public ToggleControl(string propertyName, float falseValue = 0F, float trueValue = 1F) Parameters Type Name Description String propertyName Material property name. Single falseValue Float value that the material property will have if the checkbox is not checked. Optional (default: 0). Single trueValue Float value that the material property will have if the checkbox is checked. Optional (default: 1)."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.FalseValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.FalseValue.html",
    "title": "Field FalseValue | Simple Shader Inspectors Documentation",
    "keywords": "Field FalseValue Float value that the Enabled bool gets converted if false. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected readonly float FalseValue Returns Single Float value of the property if the toggle is disabled."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.html",
    "title": "Class ToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Class ToggleControl Represents a control with a checkbox for setting a float property to 2 defined values. Inheritance Object SimpleControl PropertyControl ToggleControl ToggleListControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class ToggleControl : PropertyControl Remarks This control can be used to set a float property between 2 values, which can come useful when there's a need to toggle on and off features using a float value in shader. Both the enabled and disabled state can be set to give the material property a specific float value. If not set in the constructor they will be set to 0 for disabled and 1 for enabled. Examples Example usage: // adds a toggle that toggles between 0 and 1 this.AddToggleControl(\"_ExampleProperty\"); // adds a toggle that toggles between 3 and 7 this.AddToggleControl(\"_ExampleProperty\", 3, 7); Constructors Name Description ToggleControl(String, Single, Single) Default constructor of ToggleControl Fields Name Description FalseValue Float value that the Enabled bool gets converted if false. TrueValue Float value that the Enabled bool gets converted if true. Properties Name Description ToggleEnabled Boolean indicating if the toggle is enabled or not. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.ToggleEnabled.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.ToggleEnabled.html",
    "title": "Property ToggleEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Property ToggleEnabled ToggleEnabled Boolean indicating if the toggle is enabled or not. Declaration public bool ToggleEnabled { get; } Property Value Type Description Boolean True if the toggle is enabled, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.TrueValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.TrueValue.html",
    "title": "Field TrueValue | Simple Shader Inspectors Documentation",
    "keywords": "Field TrueValue Float value that the Enabled bool gets converted if true. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected readonly float TrueValue Returns Single Float value of the property if the toggle is enabled"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls Declaration public void AddControl(SimpleControl control, string alias = \"\") Parameters Type Name Description SimpleControl control Control to add. String alias Optional alias to say where a control is appended after. Implements IControlContainer.AddControl(SimpleControl, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides ToggleControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.Controls.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls that can be hidden by this control. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl >"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.-ctor.html",
    "title": "Constructor ToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ToggleListControl ToggleListControl(String, Single, Single) Default constructor of ToggleListControl Declaration public ToggleListControl(string propertyName, float falseValue = 0F, float trueValue = 1F) Parameters Type Name Description String propertyName Material property name. Single falseValue Float value that the material property will have if the checkbox is not checked. Optional (default: 0). Single trueValue Float value that the material property will have if the checkbox is checked. Optional (default: 1)."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.GetControlList.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Implementation needed by IControlContainer to get the object's controls list. Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > Controls Implements IControlContainer.GetControlList()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.html",
    "title": "Class ToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Class ToggleListControl Represents a control with a checkbox for setting a float property to 2 defined values. Also shows and hides a list of controls based on its state. Inheritance Object SimpleControl PropertyControl ToggleControl ToggleListControl Implements IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class ToggleListControl : ToggleControl, IControlContainer Remarks It's effectively a combination of ToggleListControl and ControlContainer , where the controls list is displayed only when the toggle is enabled. Examples Example usage: // adds a toggle that toggles between 0 and 1 this.AddToggleListControl(\"_ExampleProperty\"); // adds a toggle that toggles between 3 and 7 this.AddToggleListControl(\"_ExampleProperty\", 3, 7); Constructors Name Description ToggleListControl(String, Single, Single) Default constructor of ToggleListControl Properties Name Description Controls List of controls that can be hidden by this control. Methods Name Description AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. All controls added are stored in Controls ControlGUI(MaterialEditor) Draws the control represented by this object. GetControlList() Implementation needed by IControlContainer to get the object's controls list. Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.-ctor.html",
    "title": "Constructor VectorControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor VectorControl VectorControl(String, Boolean, Boolean, Boolean, Boolean) Default constructor of VectorControl Declaration public VectorControl(string propertyName, bool isXVisible = true, bool isYVisible = true, bool isZVisible = true, bool isWVisible = true) Parameters Type Name Description String propertyName Material property name. Boolean isXVisible Shows the x component. Optional (Default true). Boolean isYVisible Shows the y component. Optional (Default true). Boolean isZVisible Shows the z component. Optional (Default true). Boolean isWVisible Shows the w component. Optional (Default true)."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.html",
    "title": "Class VectorControl | Simple Shader Inspectors Documentation",
    "keywords": "Class VectorControl Represents a vector control. Inheritance Object SimpleControl PropertyControl VectorControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class VectorControl : PropertyControl Remarks While using a PropertyControl for a vector property can work just fine, it will default to displaying all 4 float values, even if the shader property represents a float2 or float3. This is due to unity treating all of them as a Vector4 inside inspectors, resulting on having a 4 float display. With this control you have the ability to fine tune which of the 4 floats to show. This can also be useful if you pack different values into a single Vector4 for various reasons, cause you can just create different vector controls where each one access different parts of the Vector4, so you can manage them independently inside your editor. Examples Example usage: // adds a vector control this.AddVectorControl(\"ExampleVector\"); // adds a vector control where only the y and w values are displayed this.AddVectorControl(\"ExampleVector\", false, true, false, true); Constructors Name Description VectorControl(String, Boolean, Boolean, Boolean, Boolean) Default constructor of VectorControl Properties Name Description IsWVisible Visibility state of the w value IsXVisible Visibility state of the x value IsYVisible Visibility state of the y value IsZVisible Visibility state of the z value Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsWVisible.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsWVisible.html",
    "title": "Property IsWVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsWVisible IsWVisible Visibility state of the w value Declaration public bool IsWVisible { get; protected set; } Property Value Type Description Boolean True if the w value is visible, false otherwise"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsXVisible.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsXVisible.html",
    "title": "Property IsXVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsXVisible IsXVisible Visibility state of the x value Declaration public bool IsXVisible { get; protected set; } Property Value Type Description Boolean True if the x value is visible, false otherwise"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsYVisible.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsYVisible.html",
    "title": "Property IsYVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsYVisible IsYVisible Visibility state of the y value Declaration public bool IsYVisible { get; protected set; } Property Value Type Description Boolean True if the y value is visible, false otherwise"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsZVisible.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsZVisible.html",
    "title": "Property IsZVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsZVisible IsZVisible Visibility state of the z value Declaration public bool IsZVisible { get; protected set; } Property Value Type Description Boolean True if the z value is visible, false otherwise"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.AdditionalContent.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.AdditionalContent.html",
    "title": "Property AdditionalContent | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalContent AdditionalContent Additional localization needed by the control, Implementation required by the IAdditionalLocalization interface. Declaration public AdditionalLocalization[] AdditionalContent { get; set; } Property Value Type Description AdditionalLocalization [] An array of AdditionalLocalization Implements IAdditionalLocalization.AdditionalContent Remarks The array has the following values: [0] : ApplyVertexStreamsButton"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.AddVertexStream.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.AddVertexStream.html",
    "title": "Method AddVertexStream | Simple Shader Inspectors Documentation",
    "keywords": "Method AddVertexStream AddVertexStream(ParticleSystemVertexStream) Adds a vertex stream to the list of used streams. Declaration public VertexStreamsControl AddVertexStream(ParticleSystemVertexStream stream) Parameters Type Name Description ParticleSystemVertexStream stream Vertex stream to add. Returns Type Description VertexStreamsControl This control."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.-ctor.html",
    "title": "Constructor VertexStreamsControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor VertexStreamsControl VertexStreamsControl(String) Default constructor of VertexStreamsControl . Declaration public VertexStreamsControl(string alias) Parameters Type Name Description String alias Alias needed by the control"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.html",
    "title": "Class VertexStreamsControl | Simple Shader Inspectors Documentation",
    "keywords": "Class VertexStreamsControl Control for viewing and setting particle vertex streams used Inheritance Object SimpleControl VertexStreamsControl Implements IAdditionalLocalization Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class VertexStreamsControl : SimpleControl, IAdditionalLocalization Remarks When making particle shaders there may be a need to set the particles vertex streams so that the shader can access the data it needs. Using this control you can easily view which vertex streams are needed and set them in the particle systems that have a material using this shader, in a similar way the standard unity particle shader inspector does. Since the control does not use any material property, it requires an alias in order to work. Examples Example usage: this.AddVertexStreamsControl(\"AliasToUse\"); Constructors Name Description VertexStreamsControl(String) Default constructor of VertexStreamsControl . Properties Name Description AdditionalContent Additional localization needed by the control, Implementation required by the IAdditionalLocalization interface. Methods Name Description AddVertexStream(ParticleSystemVertexStream) Adds a vertex stream to the list of used streams. ControlGUI(MaterialEditor) Draws the control represented by this object. RemoveVertexStream(ParticleSystemVertexStream) Removes a vertex stream from the list of used streams. Extension Methods AdditionalContentExtensions.InitializeLocalizationWithNames(IAdditionalLocalization, String[]) Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.RemoveVertexStream.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.RemoveVertexStream.html",
    "title": "Method RemoveVertexStream | Simple Shader Inspectors Documentation",
    "keywords": "Method RemoveVertexStream RemoveVertexStream(ParticleSystemVertexStream) Removes a vertex stream from the list of used streams. Declaration public VertexStreamsControl RemoveVertexStream(ParticleSystemVertexStream stream) Parameters Type Name Description ParticleSystemVertexStream stream Vertex stream to remove. Returns Type Description VertexStreamsControl This control."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.DefaultGeneratorGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.DefaultGeneratorGUI.html",
    "title": "Class DefaultGeneratorGUI | Simple Shader Inspectors Documentation",
    "keywords": "Class DefaultGeneratorGUI Inheritance Object ShaderGUI DefaultGeneratorGUI Namespace : VRLabs.SimpleShaderInspectors Syntax public class DefaultGeneratorGUI : ShaderGUI Methods Name Description OnGUI(MaterialEditor, MaterialProperty[])"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.DefaultGeneratorGUI.OnGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.DefaultGeneratorGUI.OnGUI.html",
    "title": "Method OnGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method OnGUI OnGUI(MaterialEditor, MaterialProperty[]) Declaration public override void OnGUI(MaterialEditor materialEditor, MaterialProperty[] properties) Parameters Type Name Description MaterialEditor materialEditor MaterialProperty [] properties Overrides ShaderGUI.OnGUI(MaterialEditor, MaterialProperty[])"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Extensions.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Extensions.html",
    "title": "Class Extensions | Simple Shader Inspectors Documentation",
    "keywords": "Class Extensions Static class containing all control extension methods in the base namespace of Simple Shader Inspectors. Inheritance Object Extensions Namespace : VRLabs.SimpleShaderInspectors Syntax public static class Extensions Methods Name Description WithAlias<T>(T, String) Set a custom alias for control localization. WithEnabled<T>(T, Boolean) Set if the control is enabled. WithVisibility<T>(T, Boolean) Set if the control is visible."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Extensions.WithAlias.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Extensions.WithAlias.html",
    "title": "Method WithAlias | Simple Shader Inspectors Documentation",
    "keywords": "Method WithAlias WithAlias<T>(T, String) Set a custom alias for control localization. Declaration public static T WithAlias<T>(this T control, string alias) where T : SimpleControl Parameters Type Name Description T control The control this extension method is used on. String alias Name used for localization. Returns Type Description T The control modified. Type Parameters Name Description T Type of the control. Has to be child of SimpleControl."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Extensions.WithEnabled.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Extensions.WithEnabled.html",
    "title": "Method WithEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Method WithEnabled WithEnabled<T>(T, Boolean) Set if the control is enabled. Declaration public static T WithEnabled<T>(this T control, bool enabled) where T : SimpleControl Parameters Type Name Description T control The control this extension method is used on. Boolean enabled If the control is enabled. Returns Type Description T The control modified. Type Parameters Name Description T Type of the control. Has to be child of SimpleControl."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Extensions.WithVisibility.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Extensions.WithVisibility.html",
    "title": "Method WithVisibility | Simple Shader Inspectors Documentation",
    "keywords": "Method WithVisibility WithVisibility<T>(T, Boolean) Set if the control is visible. Declaration public static T WithVisibility<T>(this T control, bool visible) where T : SimpleControl Parameters Type Name Description T control The control this extension method is used on. Boolean visible If the control is visible. Returns Type Description T The control modified. Type Parameters Name Description T Type of the control. Has to be child of SimpleControl."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.FluentSetAttribute.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.FluentSetAttribute.html",
    "title": "Class FluentSetAttribute | Simple Shader Inspectors Documentation",
    "keywords": "Class FluentSetAttribute Attribute for properties that is used when generating chainables. Inheritance Object Attribute FluentSetAttribute Implements _Attribute Namespace : VRLabs.SimpleShaderInspectors Syntax [AttributeUsage(AttributeTargets.Property)] public class FluentSetAttribute : Attribute, _Attribute Remarks The attribute by itself does nothing, but it is used by the chainables generator tool to generate extension methods for properties that have it"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors Classes AdditionalContentExtensions Static class containing extension methods that manipulate AdditionalLocalization or AdditionalLocalization objects or arrays. AdditionalLocalization This class is a simple class containing a Name used for finding the localization content and a GUIContent object containing said content. AdditionalProperty This class defines an additional property. Chainables ContainerExtensions Extension methods for dealing with IControlContainer type of objects DefaultGeneratorGUI Extensions Static class containing all control extension methods in the base namespace of Simple Shader Inspectors. FluentSetAttribute Attribute for properties that is used when generating chainables. LimitAccessScopeAttribute Attribute for constructors indicating that the chainable constructor can only be used from a specific type instead of the default IControlContainer type. Localization Static helper class used for managing localizations. LocalizationFile LocalizationSearchers MaterialArrayHelper Helper class for handling Material arrays. PropertyControl Represents a general purpose control for a property that will be drawn based on the property type. PropertyInfo SerializedDictionaries Class used to save the dictionaries used by the API SettingsFile Shaders Default compute shader assets and settings natively available in Simple Shader Inspectors. SimpleControl Base class of all controls used by Simple Shader Inspectors. SimpleShaderInspector Default base class for creating new inspectors. SSIConstants Constants used across the library. SSIGUIHelper Helper class containing utility methods for IMGUI. SSIHelper Static class containing utility functions for Controls and Inspectors. StaticDictionaries Static class containing dictionaries that can be used by controls for various needs. StaticDictionaries.Startup Styles Default styles available natively in SimpleShaderInspectors. TextureGeneratorShaderInspector Base class for creating new inspectors for shaders meant to be used in the texture generator control Textures Default textures available natively in Simple Shader Inspectors. TimedDictionary<TKey, TValue> Class used to identify a dictionary that also contains the date of last edit. Structs SerializedDictionaries.BoolItem SerializedDictionaries.IntItem Interfaces IAdditionalLocalization Interface used to define the need for a control to use additional localization content IAdditionalProperties Interface used to define the need for additional material properties to handle. IControlContainer Interface that defines an object that contains a list of SimpleControls of type SimpleControl to draw. IControlContainer<T> Interface that defines an object that contains a list of SimpleControls of a specified type to draw. INonAnimatableProperty Interface that defines an object that has a property that shouldn't be animated by the animation window ISimpleShaderInspector Interface indicating that the object is a valid Simple Shader Inspector and can use its features."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.IAdditionalLocalization.AdditionalContent.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.IAdditionalLocalization.AdditionalContent.html",
    "title": "Property AdditionalContent | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalContent AdditionalContent Array containing the additional localization elements needed by the control. Declaration AdditionalLocalization[] AdditionalContent { get; set; } Property Value Type Description AdditionalLocalization [] Remarks Is up to the control to set the array size and the unique names for each content string based on the control needs"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.IAdditionalLocalization.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.IAdditionalLocalization.html",
    "title": "Interface IAdditionalLocalization | Simple Shader Inspectors Documentation",
    "keywords": "Interface IAdditionalLocalization Interface used to define the need for a control to use additional localization content Namespace : VRLabs.SimpleShaderInspectors Syntax public interface IAdditionalLocalization Remarks If a control needs more localized content than the one given by default, it can implement this interface to let the inspector know that it needs more than one localized content. Properties Name Description AdditionalContent Array containing the additional localization elements needed by the control. Extension Methods AdditionalContentExtensions.InitializeLocalizationWithNames(IAdditionalLocalization, String[])"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.IAdditionalProperties.AdditionalProperties.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.IAdditionalProperties.AdditionalProperties.html",
    "title": "Property AdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalProperties AdditionalProperties Array containing all additional properties the control needs. Declaration AdditionalProperty[] AdditionalProperties { get; set; } Property Value Type Description AdditionalProperty [] Remarks Is up to the control to initialize the array and assign the property names it needs to fetch."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.IAdditionalProperties.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.IAdditionalProperties.html",
    "title": "Interface IAdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Interface IAdditionalProperties Interface used to define the need for additional material properties to handle. Namespace : VRLabs.SimpleShaderInspectors Syntax public interface IAdditionalProperties Remarks When a control needs more than a single property to do its job, implementing this interface will let the inspector know this need. Properties Name Description AdditionalProperties Array containing all additional properties the control needs."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.IControlContainer.AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.IControlContainer.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl, String) Method used to add a control to the list of controls that are under this object Declaration void AddControl(SimpleControl control, string alias = \"\") Parameters Type Name Description SimpleControl control Control to add String alias Alias to append after. Remarks Simple Shader Inspectors needs an endpoint to add controls inside IControlContainer objects using Chainable methods, and this is the one it uses. This approach is preferable compared to defining a list because it will leave the control the freedom to handle how to store ad manage controls passed by the inspector. The optional alias string should be used to place the control after the control with said alias, and if the alias is null or empty it should be placed at the end."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.IControlContainer.GetControlList.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.IControlContainer.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Method used to get the list of stored controls. Declaration IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > An IEnumerable of the controls stored in this object. Remarks Just like AddControl(SimpleControl, String) this is used by Simple Shader Inspector to have a way to retrieve controls stored inside this object, to then do operations with it (for example, fetching the current localization content needed by the controls)."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.IControlContainer.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.IControlContainer.html",
    "title": "Interface IControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Interface IControlContainer Interface that defines an object that contains a list of SimpleControls of type SimpleControl to draw. Namespace : VRLabs.SimpleShaderInspectors Syntax public interface IControlContainer Methods Name Description AddControl(SimpleControl, String) Method used to add a control to the list of controls that are under this object GetControlList() Method used to get the list of stored controls. Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.IControlContainer-1.AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.IControlContainer-1.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(T, String) Generic version of AddControl(SimpleControl, String) . Declaration void AddControl(T control, string alias = \"\") Parameters Type Name Description T control Control to add. String alias Alias to append after. Remarks The optional alias string should be used to place the control after the control with said alias, and if the alias is null or empty it should be placed at the end."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.IControlContainer-1.GetControlList.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.IControlContainer-1.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Generic version of GetControlList() . Declaration IEnumerable<T> GetControlList() Returns Type Description IEnumerable <T> An IEnumerable of the controls stored in this object."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.IControlContainer-1.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.IControlContainer-1.html",
    "title": "Interface IControlContainer<T> | Simple Shader Inspectors Documentation",
    "keywords": "Interface IControlContainer<T> Interface that defines an object that contains a list of SimpleControls of a specified type to draw. Namespace : VRLabs.SimpleShaderInspectors Syntax public interface IControlContainer<T> : IControlContainer where T : SimpleControl Type Parameters T Remarks This generic version of IControlContainer makes possible to define a stricter set of control types to be contained. Methods Name Description AddControl(T, String) Generic version of AddControl(SimpleControl, String) . GetControlList() Generic version of GetControlList() . Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.html",
    "title": "Interface INonAnimatableProperty | Simple Shader Inspectors Documentation",
    "keywords": "Interface INonAnimatableProperty Interface that defines an object that has a property that shouldn't be animated by the animation window Namespace : VRLabs.SimpleShaderInspectors Syntax public interface INonAnimatableProperty Remarks In some cases you don't want to record changes of a property inside an animation. This will let the inspector know that. Bare in mind that this will not assure that the property will not be recorded since is up to the inspector to satisfy the condition, and the user could still edit the animation manually. Properties Name Description NonAnimatablePropertyChanged Boolean indicating if a non animatable material property need to be updated. Methods Name Description UpdateNonAnimatableProperty(MaterialEditor) Updates the value of the non animatable property"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.NonAnimatablePropertyChanged.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.NonAnimatablePropertyChanged.html",
    "title": "Property NonAnimatablePropertyChanged | Simple Shader Inspectors Documentation",
    "keywords": "Property NonAnimatablePropertyChanged NonAnimatablePropertyChanged Boolean indicating if a non animatable material property need to be updated. Declaration bool NonAnimatablePropertyChanged { get; set; } Property Value Type Description Boolean"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.UpdateNonAnimatableProperty.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.UpdateNonAnimatableProperty.html",
    "title": "Method UpdateNonAnimatableProperty | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateNonAnimatableProperty UpdateNonAnimatableProperty(MaterialEditor) Updates the value of the non animatable property Declaration void UpdateNonAnimatableProperty(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.ISimpleShaderInspector.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.ISimpleShaderInspector.html",
    "title": "Interface ISimpleShaderInspector | Simple Shader Inspectors Documentation",
    "keywords": "Interface ISimpleShaderInspector Interface indicating that the object is a valid Simple Shader Inspector and can use its features. Namespace : VRLabs.SimpleShaderInspectors Syntax public interface ISimpleShaderInspector : IControlContainer Remarks By implementing this interface you can create your own inspector that uses the Simple Shader Inspectors library. It can be useful when you need some really custom behaviour, at the cost oh having to manage the controls initialization, property fetching etc. It can be a good starting point to see the source code of SimpleShaderInspector . Properties Name Description Materials Array of the materials selected. Shader Shader this inspector is viewing. Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.ISimpleShaderInspector.Materials.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.ISimpleShaderInspector.Materials.html",
    "title": "Property Materials | Simple Shader Inspectors Documentation",
    "keywords": "Property Materials Materials Array of the materials selected. Declaration Material[] Materials { get; } Property Value Type Description Material []"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.ISimpleShaderInspector.Shader.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.ISimpleShaderInspector.Shader.html",
    "title": "Property Shader | Simple Shader Inspectors Documentation",
    "keywords": "Property Shader Shader Shader this inspector is viewing. Declaration Shader Shader { get; } Property Value Type Description Shader"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.LimitAccessScopeAttribute.BaseType.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.LimitAccessScopeAttribute.BaseType.html",
    "title": "Property BaseType | Simple Shader Inspectors Documentation",
    "keywords": "Property BaseType BaseType Declaration public Type BaseType { get; } Property Value Type Description Type"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.LimitAccessScopeAttribute.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.LimitAccessScopeAttribute.-ctor.html",
    "title": "Constructor LimitAccessScopeAttribute | Simple Shader Inspectors Documentation",
    "keywords": "Constructor LimitAccessScopeAttribute LimitAccessScopeAttribute(Type) Declaration public LimitAccessScopeAttribute(Type type) Parameters Type Name Description Type type"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.LimitAccessScopeAttribute.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.LimitAccessScopeAttribute.html",
    "title": "Class LimitAccessScopeAttribute | Simple Shader Inspectors Documentation",
    "keywords": "Class LimitAccessScopeAttribute Attribute for constructors indicating that the chainable constructor can only be used from a specific type instead of the default IControlContainer type. Inheritance Object Attribute LimitAccessScopeAttribute Implements _Attribute Namespace : VRLabs.SimpleShaderInspectors Syntax [AttributeUsage(AttributeTargets.Constructor)] public class LimitAccessScopeAttribute : Attribute, _Attribute Remarks Sometimes you may need to limit which controls implementing IControlContainer can use the chainable version of the constructor, by having this attribute you can modify the generated chainable constructor to reflect those needs. Constructors Name Description LimitAccessScopeAttribute(Type) Properties Name Description BaseType"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Localization.ApplyLocalization.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Localization.ApplyLocalization.html",
    "title": "Method ApplyLocalization | Simple Shader Inspectors Documentation",
    "keywords": "Method ApplyLocalization ApplyLocalization(IEnumerable<SimpleControl>, String, Boolean, Boolean) Apply Localization strings to a list of controls. Declaration public static void ApplyLocalization(this IEnumerable<SimpleControl> controls, string localizationFilePath, bool writeIfNotFound = false, bool recursive = true) Parameters Type Name Description IEnumerable < SimpleControl > controls Controls to apply a localization String localizationFilePath Path of the localization file Boolean writeIfNotFound Generate empty fields / new localization file if the provided one is missing or incomplete. Boolean recursive If the localization setup should be done recursively on all children of a control ApplyLocalization(SimpleControl, String, Boolean, Boolean) Apply Localization strings to a control. Declaration public static void ApplyLocalization(this SimpleControl control, string localizationFilePath, bool writeIfNotFound = false, bool recursive = false) Parameters Type Name Description SimpleControl control Control to apply a localization String localizationFilePath Path of the localization file Boolean writeIfNotFound Generate empty fields / new localization file if the provided one is missing or incomplete. Boolean recursive If the localization setup should be done recursively on all children of a control"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Localization.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Localization.html",
    "title": "Class Localization | Simple Shader Inspectors Documentation",
    "keywords": "Class Localization Static helper class used for managing localizations. Inheritance Object Localization Namespace : VRLabs.SimpleShaderInspectors Syntax public static class Localization Methods Name Description ApplyLocalization(IEnumerable<SimpleControl>, String, Boolean, Boolean) Apply Localization strings to a list of controls. ApplyLocalization(SimpleControl, String, Boolean, Boolean) Apply Localization strings to a control."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.LocalizationFile.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.LocalizationFile.-ctor.html",
    "title": "Constructor LocalizationFile | Simple Shader Inspectors Documentation",
    "keywords": "Constructor LocalizationFile LocalizationFile() Declaration public LocalizationFile()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.LocalizationFile.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.LocalizationFile.html",
    "title": "Class LocalizationFile | Simple Shader Inspectors Documentation",
    "keywords": "Class LocalizationFile Inheritance Object LocalizationFile Namespace : VRLabs.SimpleShaderInspectors Syntax [Serializable] public class LocalizationFile Constructors Name Description LocalizationFile() Fields Name Description Properties"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.LocalizationFile.Properties.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.LocalizationFile.Properties.html",
    "title": "Field Properties | Simple Shader Inspectors Documentation",
    "keywords": "Field Properties Namespace : VRLabs.SimpleShaderInspectors Syntax public PropertyInfo[] Properties Returns PropertyInfo []"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.LocalizationSearchers.FindPropertyByName.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.LocalizationSearchers.FindPropertyByName.html",
    "title": "Method FindPropertyByName | Simple Shader Inspectors Documentation",
    "keywords": "Method FindPropertyByName FindPropertyByName(IEnumerable<PropertyInfo>, String) Declaration public static PropertyInfo FindPropertyByName(this IEnumerable<PropertyInfo> properties, string name) Parameters Type Name Description IEnumerable < PropertyInfo > properties String name Returns Type Description PropertyInfo FindPropertyByName((String, String)[], String) Declaration public static string FindPropertyByName(this (string, string)[] properties, string name) Parameters Type Name Description (T1, T2) < String , String >[] properties String name Returns Type Description String"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.LocalizationSearchers.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.LocalizationSearchers.html",
    "title": "Class LocalizationSearchers | Simple Shader Inspectors Documentation",
    "keywords": "Class LocalizationSearchers Inheritance Object LocalizationSearchers Namespace : VRLabs.SimpleShaderInspectors Syntax public static class LocalizationSearchers Methods Name Description FindPropertyByName(IEnumerable<PropertyInfo>, String) FindPropertyByName((String, String)[], String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.html",
    "title": "Class MaterialArrayHelper | Simple Shader Inspectors Documentation",
    "keywords": "Class MaterialArrayHelper Helper class for handling Material arrays. Inheritance Object MaterialArrayHelper Namespace : VRLabs.SimpleShaderInspectors Syntax public static class MaterialArrayHelper Remarks Managing multiple materials inside the inspector could become slightly annoying, these extension functions will make this process less annoying by automatically looping the materials array to and do the operations you want Methods Name Description IsKeywordMixedValue(Material[], String) Gets the mixed value state of a keyword on the materials array SetColor(IEnumerable<Material>, String, Color) Set color to all materials in the array. SetFloat(IEnumerable<Material>, String, Single) Set float to all materials in the array. SetInt(IEnumerable<Material>, String, Int32) Set int to all materials in the array. SetKeyword(IEnumerable<Material>, String, Boolean) Sets a keyword state to all materials in the array. SetOverrideTag(IEnumerable<Material>, String, String) Set override tag to all materials in the array. SetRenderQueue(IEnumerable<Material>, Int32) Set render queue to all materials in the array. SetShader(IEnumerable<Material>, Shader) Set shader to all materials in the array. SetTexture(IEnumerable<Material>, String, Texture) Set texture to all materials in the array. SetVector(IEnumerable<Material>, String, Vector4) Set vector to all materials in the array."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.IsKeywordMixedValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.IsKeywordMixedValue.html",
    "title": "Method IsKeywordMixedValue | Simple Shader Inspectors Documentation",
    "keywords": "Method IsKeywordMixedValue IsKeywordMixedValue(Material[], String) Gets the mixed value state of a keyword on the materials array Declaration public static bool IsKeywordMixedValue(this Material[] materials, string keyword) Parameters Type Name Description Material [] materials Material array this method extends to. String keyword The keyword to check against. Returns Type Description Boolean True if the keyword has mixed values, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetColor.html",
    "title": "Method SetColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetColor SetColor(IEnumerable<Material>, String, Color) Set color to all materials in the array. Declaration public static void SetColor(this IEnumerable<Material> materials, string name, Color value) Parameters Type Name Description IEnumerable < Material > materials Material array this method extends to. String name Name of the Color. Color value Value of the Color."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetFloat.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetFloat.html",
    "title": "Method SetFloat | Simple Shader Inspectors Documentation",
    "keywords": "Method SetFloat SetFloat(IEnumerable<Material>, String, Single) Set float to all materials in the array. Declaration public static void SetFloat(this IEnumerable<Material> materials, string name, float value) Parameters Type Name Description IEnumerable < Material > materials Material array this method extends to. String name Name of the float. Single value Value of the float."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetInt.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetInt.html",
    "title": "Method SetInt | Simple Shader Inspectors Documentation",
    "keywords": "Method SetInt SetInt(IEnumerable<Material>, String, Int32) Set int to all materials in the array. Declaration public static void SetInt(this IEnumerable<Material> materials, string name, int value) Parameters Type Name Description IEnumerable < Material > materials Material array this method extends to. String name Name of the int. Int32 value Value of the int."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetKeyword.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetKeyword.html",
    "title": "Method SetKeyword | Simple Shader Inspectors Documentation",
    "keywords": "Method SetKeyword SetKeyword(IEnumerable<Material>, String, Boolean) Sets a keyword state to all materials in the array. Declaration public static void SetKeyword(this IEnumerable<Material> materials, string keyword, bool state) Parameters Type Name Description IEnumerable < Material > materials Material array this method extends to. String keyword The keyword that is being toggled. Boolean state Toggle value."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetOverrideTag.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetOverrideTag.html",
    "title": "Method SetOverrideTag | Simple Shader Inspectors Documentation",
    "keywords": "Method SetOverrideTag SetOverrideTag(IEnumerable<Material>, String, String) Set override tag to all materials in the array. Declaration public static void SetOverrideTag(this IEnumerable<Material> materials, string tagName, string value) Parameters Type Name Description IEnumerable < Material > materials Material array this method extends to. String tagName Name of the tag. String value Value of the tag."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetRenderQueue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetRenderQueue.html",
    "title": "Method SetRenderQueue | Simple Shader Inspectors Documentation",
    "keywords": "Method SetRenderQueue SetRenderQueue(IEnumerable<Material>, Int32) Set render queue to all materials in the array. Declaration public static void SetRenderQueue(this IEnumerable<Material> materials, int queue) Parameters Type Name Description IEnumerable < Material > materials Material array this method extends to. Int32 queue Render queue value."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetShader.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetShader.html",
    "title": "Method SetShader | Simple Shader Inspectors Documentation",
    "keywords": "Method SetShader SetShader(IEnumerable<Material>, Shader) Set shader to all materials in the array. Declaration public static void SetShader(this IEnumerable<Material> materials, Shader shader) Parameters Type Name Description IEnumerable < Material > materials Material array this method extends to. Shader shader Shader to apply."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetTexture.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetTexture.html",
    "title": "Method SetTexture | Simple Shader Inspectors Documentation",
    "keywords": "Method SetTexture SetTexture(IEnumerable<Material>, String, Texture) Set texture to all materials in the array. Declaration public static void SetTexture(this IEnumerable<Material> materials, string name, Texture value) Parameters Type Name Description IEnumerable < Material > materials Material array this method extends to. String name Name of the texture. Texture value Value of the texture."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetVector.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.MaterialArrayHelper.SetVector.html",
    "title": "Method SetVector | Simple Shader Inspectors Documentation",
    "keywords": "Method SetVector SetVector(IEnumerable<Material>, String, Vector4) Set vector to all materials in the array. Declaration public static void SetVector(this IEnumerable<Material> materials, string name, Vector4 value) Parameters Type Name Description IEnumerable < Material > materials Material array this method extends to. String name Name of the Vector4. Vector4 value Value of the Vector4."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.PropertyControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.PropertyControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.PropertyControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.PropertyControl.-ctor.html",
    "title": "Constructor PropertyControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor PropertyControl PropertyControl(String) Default constructor of PropertyControl . Declaration public PropertyControl(string propertyName) Parameters Type Name Description String propertyName Material property name."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.PropertyControl.HasPropertyUpdated.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.PropertyControl.HasPropertyUpdated.html",
    "title": "Property HasPropertyUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasPropertyUpdated HasPropertyUpdated Boolean indicating if this control updated its property value. Declaration public bool HasPropertyUpdated { get; protected set; } Property Value Type Description Boolean True if the property value has been updated, false otherwise."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.PropertyControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.PropertyControl.html",
    "title": "Class PropertyControl | Simple Shader Inspectors Documentation",
    "keywords": "Class PropertyControl Represents a general purpose control for a property that will be drawn based on the property type. Inheritance Object SimpleControl PropertyControl ColorControl ConditionalControlContainer EnumControl<TEnum> RGBASelectorControl Section TextureControl TilingAndOffsetControl ToggleControl VectorControl Namespace : VRLabs.SimpleShaderInspectors Syntax public class PropertyControl : SimpleControl Remarks You can see this control as the Simple Shader Inspectors equivalent of MaterialEditor.ShaderProperty since it draws all properties in a generic way. Examples Initialize the control inside the inspector: this.AddPropertyControl(\"_ExampleProperty\"); Constructors Name Description PropertyControl(String) Default constructor of PropertyControl . Properties Name Description HasPropertyUpdated Boolean indicating if this control updated its property value. Property MaterialProperty related to the property shown by this control. PropertyName Name of the property shown by this control. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean) See Also SimpleControl"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.PropertyControl.Property.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.PropertyControl.Property.html",
    "title": "Property Property | Simple Shader Inspectors Documentation",
    "keywords": "Property Property Property MaterialProperty related to the property shown by this control. Declaration public MaterialProperty Property { get; protected set; } Property Value Type Description MaterialProperty MaterialProperty fetched by the inspector based on PropertyName ."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.PropertyControl.PropertyName.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.PropertyControl.PropertyName.html",
    "title": "Property PropertyName | Simple Shader Inspectors Documentation",
    "keywords": "Property PropertyName PropertyName Name of the property shown by this control. Declaration public string PropertyName { get; protected set; } Property Value Type Description String string containing the name of the property."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.PropertyInfo.DisplayName.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.PropertyInfo.DisplayName.html",
    "title": "Field DisplayName | Simple Shader Inspectors Documentation",
    "keywords": "Field DisplayName Namespace : VRLabs.SimpleShaderInspectors Syntax public string DisplayName Returns String"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.PropertyInfo.Equals.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.PropertyInfo.Equals.html",
    "title": "Method Equals | Simple Shader Inspectors Documentation",
    "keywords": "Method Equals Equals(PropertyInfo) Declaration public bool Equals(PropertyInfo other) Parameters Type Name Description PropertyInfo other Returns Type Description Boolean Implements IEquatable<T>.Equals(T) Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.PropertyInfo.GetHashCode.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.PropertyInfo.GetHashCode.html",
    "title": "Method GetHashCode | Simple Shader Inspectors Documentation",
    "keywords": "Method GetHashCode GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.PropertyInfo.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.PropertyInfo.html",
    "title": "Class PropertyInfo | Simple Shader Inspectors Documentation",
    "keywords": "Class PropertyInfo Inheritance Object PropertyInfo Implements IEquatable < PropertyInfo > Namespace : VRLabs.SimpleShaderInspectors Syntax [Serializable] public class PropertyInfo : IEquatable<PropertyInfo> Fields Name Description DisplayName Name Tooltip Methods Name Description Equals(Object) Equals(PropertyInfo) GetHashCode()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.PropertyInfo.Name.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.PropertyInfo.Name.html",
    "title": "Field Name | Simple Shader Inspectors Documentation",
    "keywords": "Field Name Namespace : VRLabs.SimpleShaderInspectors Syntax public string Name Returns String"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.PropertyInfo.Tooltip.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.PropertyInfo.Tooltip.html",
    "title": "Field Tooltip | Simple Shader Inspectors Documentation",
    "keywords": "Field Tooltip Namespace : VRLabs.SimpleShaderInspectors Syntax public string Tooltip Returns String"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.boolDictionary.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.boolDictionary.html",
    "title": "Field boolDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Field boolDictionary list for the bool dictionary Namespace : VRLabs.SimpleShaderInspectors Syntax public List<SerializedDictionaries.BoolItem> boolDictionary Returns List < SerializedDictionaries.BoolItem >"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.date.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.date.html",
    "title": "Field date | Simple Shader Inspectors Documentation",
    "keywords": "Field date Namespace : VRLabs.SimpleShaderInspectors Syntax public long date Returns Int64"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.html",
    "title": "Struct SerializedDictionaries.BoolItem | Simple Shader Inspectors Documentation",
    "keywords": "Struct SerializedDictionaries.BoolItem Namespace : VRLabs.SimpleShaderInspectors Syntax [Serializable] public struct BoolItem Fields Name Description date key value"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.key.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.key.html",
    "title": "Field key | Simple Shader Inspectors Documentation",
    "keywords": "Field key Namespace : VRLabs.SimpleShaderInspectors Syntax public string key Returns String"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.value.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.BoolItem.value.html",
    "title": "Field value | Simple Shader Inspectors Documentation",
    "keywords": "Field value Namespace : VRLabs.SimpleShaderInspectors Syntax public bool value Returns Boolean"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.-ctor.html",
    "title": "Constructor SerializedDictionaries | Simple Shader Inspectors Documentation",
    "keywords": "Constructor SerializedDictionaries SerializedDictionaries() Declaration public SerializedDictionaries()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.html",
    "title": "Class SerializedDictionaries | Simple Shader Inspectors Documentation",
    "keywords": "Class SerializedDictionaries Class used to save the dictionaries used by the API Inheritance Object Object ScriptableObject SerializedDictionaries Namespace : VRLabs.SimpleShaderInspectors Syntax public class SerializedDictionaries : ScriptableObject Remarks The API provides dictionaries to store data by identifier up to 30 days, those dictionaries are automatically saved into this asset. Constructors Name Description SerializedDictionaries() Fields Name Description boolDictionary list for the bool dictionary intDictionary Methods Name Description SetBoolDictionary(List<(String, Boolean, DateTime)>) SetIntDictionary(List<(String, Int32, DateTime)>)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.intDictionary.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.intDictionary.html",
    "title": "Field intDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Field intDictionary Namespace : VRLabs.SimpleShaderInspectors Syntax public List<SerializedDictionaries.IntItem> intDictionary Returns List < SerializedDictionaries.IntItem >"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.date.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.date.html",
    "title": "Field date | Simple Shader Inspectors Documentation",
    "keywords": "Field date Namespace : VRLabs.SimpleShaderInspectors Syntax public long date Returns Int64"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.html",
    "title": "Struct SerializedDictionaries.IntItem | Simple Shader Inspectors Documentation",
    "keywords": "Struct SerializedDictionaries.IntItem Namespace : VRLabs.SimpleShaderInspectors Syntax [Serializable] public struct IntItem Fields Name Description date key value"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.key.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.key.html",
    "title": "Field key | Simple Shader Inspectors Documentation",
    "keywords": "Field key Namespace : VRLabs.SimpleShaderInspectors Syntax public string key Returns String"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.value.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.IntItem.value.html",
    "title": "Field value | Simple Shader Inspectors Documentation",
    "keywords": "Field value Namespace : VRLabs.SimpleShaderInspectors Syntax public int value Returns Int32"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.SetBoolDictionary.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.SetBoolDictionary.html",
    "title": "Method SetBoolDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Method SetBoolDictionary SetBoolDictionary(List<(String, Boolean, DateTime)>) Declaration public void SetBoolDictionary(List<(string, bool, DateTime)> list) Parameters Type Name Description List < (T1, T2, T3) < String , Boolean , DateTime >> list"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.SetIntDictionary.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SerializedDictionaries.SetIntDictionary.html",
    "title": "Method SetIntDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Method SetIntDictionary SetIntDictionary(List<(String, Int32, DateTime)>) Declaration public void SetIntDictionary(List<(string, int, DateTime)> list) Parameters Type Name Description List < (T1, T2, T3) < String , Int32 , DateTime >> list"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SettingsFile.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SettingsFile.html",
    "title": "Class SettingsFile | Simple Shader Inspectors Documentation",
    "keywords": "Class SettingsFile Inheritance Object SettingsFile Namespace : VRLabs.SimpleShaderInspectors Syntax [Serializable] public class SettingsFile Fields Name Description SelectedLanguage"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SettingsFile.SelectedLanguage.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SettingsFile.SelectedLanguage.html",
    "title": "Field SelectedLanguage | Simple Shader Inspectors Documentation",
    "keywords": "Field SelectedLanguage Namespace : VRLabs.SimpleShaderInspectors Syntax public string SelectedLanguage Returns String"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Shaders.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Shaders.html",
    "title": "Class Shaders | Simple Shader Inspectors Documentation",
    "keywords": "Class Shaders Default compute shader assets and settings natively available in Simple Shader Inspectors. Inheritance Object Shaders Namespace : VRLabs.SimpleShaderInspectors Syntax public static class Shaders Properties Name Description RGBAPacker Compute shader that packs 4 texture channels into a single texture."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Shaders.RGBAPacker.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Shaders.RGBAPacker.html",
    "title": "Property RGBAPacker | Simple Shader Inspectors Documentation",
    "keywords": "Property RGBAPacker RGBAPacker Compute shader that packs 4 texture channels into a single texture. Declaration public static Shader RGBAPacker { get; } Property Value Type Description Shader"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.Content.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.Content.html",
    "title": "Property Content | Simple Shader Inspectors Documentation",
    "keywords": "Property Content Content Localized GuiContent set by the inspector. Declaration public GUIContent Content { get; set; } Property Value Type Description GUIContent A GUIContent that is fetched by the inspector using the control's alias containing the localized string that will be displayed."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.ControlAlias.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.ControlAlias.html",
    "title": "Property ControlAlias | Simple Shader Inspectors Documentation",
    "keywords": "Property ControlAlias ControlAlias Name used for localization. Declaration public string ControlAlias { get; set; } Property Value Type Description String String containing the alias used for localization. Remarks By default the alias should be set by the constructor and modified with the chainable method. Is up to the controls derived from this class to decide what should be used as default value, just keep in mind that using hardcoded strings means that all instances of that class would share the same localization string unless is used in the inspector. Controls using a MaterialProperty should use the material property name as alias (which should be done by default if you inherit from PropertyControl and pass the property name to the base constructor), meanwhile controls that do not use a MaterialProperty should include a string in the constructor to pass as alias."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.ControlGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Content of the control that is drawn. Declaration protected abstract void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.-ctor.html",
    "title": "Constructor SimpleControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor SimpleControl SimpleControl(String) Default constructor of SimpleControl Declaration protected SimpleControl(string alias) Parameters Type Name Description String alias Material property name."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.DrawControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.DrawControl.html",
    "title": "Method DrawControl | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawControl DrawControl(MaterialEditor) Content of the control that is drawn. Declaration public void DrawControl(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.html",
    "title": "Class SimpleControl | Simple Shader Inspectors Documentation",
    "keywords": "Class SimpleControl Base class of all controls used by Simple Shader Inspectors. Inheritance Object SimpleControl ControlContainer HelpBoxControl HorizontalContainer KeywordToggleControl LabelControl LightmapEmissionControl OrderedSectionGroup SpaceControl VertexStreamsControl PropertyControl Namespace : VRLabs.SimpleShaderInspectors Syntax public abstract class SimpleControl Constructors Name Description SimpleControl(String) Default constructor of SimpleControl Properties Name Description Content Localized GuiContent set by the inspector. ControlAlias Name used for localization. Inspector Inspector that contains this control. IsEnabled Boolean that defines if the control is enabled. IsVisible Boolean that defines if the control is visible. Methods Name Description ControlGUI(MaterialEditor) Content of the control that is drawn. DrawControl(MaterialEditor) Content of the control that is drawn. Extension Methods Localization.ApplyLocalization(SimpleControl, String, Boolean, Boolean) Extensions.WithAlias<T>(T, String) Extensions.WithVisibility<T>(T, Boolean) Extensions.WithEnabled<T>(T, Boolean)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.Inspector.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.Inspector.html",
    "title": "Property Inspector | Simple Shader Inspectors Documentation",
    "keywords": "Property Inspector Inspector Inspector that contains this control. Declaration public virtual ISimpleShaderInspector Inspector { get; set; } Property Value Type Description ISimpleShaderInspector"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.IsEnabled.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.IsEnabled.html",
    "title": "Property IsEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Property IsEnabled IsEnabled Boolean that defines if the control is enabled. Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean True if the control should be enabled, false otherwise (default: true)."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.IsVisible.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleControl.IsVisible.html",
    "title": "Property IsVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsVisible IsVisible Boolean that defines if the control is visible. Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean True if the control should be visible, false otherwise (default: true)."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. Declaration public void AddControl(SimpleControl control, string alias = \"\") Parameters Type Name Description SimpleControl control Control to add. String alias Optional alias to say where a control is appended after. Implements IControlContainer.AddControl(SimpleControl, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.CheckChanges.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.CheckChanges.html",
    "title": "Method CheckChanges | Simple Shader Inspectors Documentation",
    "keywords": "Method CheckChanges CheckChanges(MaterialEditor) Check changes happened to properties. Declaration protected virtual void CheckChanges(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor material editor that uses this GUI. Remarks This method is called after drawing all controls, and can be used to check if anything important has been changed by the user and some operations are needed to be done (for example the user has changed a property to a certain value and therefore some controls need to be enabled or disables)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Controls.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > List of control that the inspector had to draw."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.CustomLocalizationShaderName.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.CustomLocalizationShaderName.html",
    "title": "Property CustomLocalizationShaderName | Simple Shader Inspectors Documentation",
    "keywords": "Property CustomLocalizationShaderName CustomLocalizationShaderName String containing a custom folder name for localization of shaders. Declaration protected string CustomLocalizationShaderName { get; set; } Property Value Type Description String Path relative to the folder containing localization files Remarks This string does NOT contain the entire path string, just a sub path from ShaderFolderName/Localization/ ."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.DefaultBgColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.DefaultBgColor.html",
    "title": "Property DefaultBgColor | Simple Shader Inspectors Documentation",
    "keywords": "Property DefaultBgColor DefaultBgColor Default gui background color. Declaration public static Color DefaultBgColor { get; set; } Property Value Type Description Color Default gui background color. Remarks This static property makes easy to reset the background color inside a control without the need to locally store the default background color before changing it."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Footer.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Footer.html",
    "title": "Method Footer | Simple Shader Inspectors Documentation",
    "keywords": "Method Footer Footer() Draw method that is used after drawing controls in the inspector. Declaration protected virtual void Footer() Remarks This method is called at the end of the inspector, either at the bottom (in unity 2018.4) or right after the last control (in unity 2019.2+)."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.GetControlList.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Implementation needed by IControlContainer to get the object's controls list. Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > This inspector's controls list Implements IControlContainer.GetControlList()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Header.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Header.html",
    "title": "Method Header | Simple Shader Inspectors Documentation",
    "keywords": "Method Header Header() Draw method that is used before drawing controls in the inspector. Declaration protected virtual void Header() Remarks This method is called before drawing any control (but after the language selector) and can be used to draw any kind of static stuff, like a title or a logo visualization."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.html",
    "title": "Class SimpleShaderInspector | Simple Shader Inspectors Documentation",
    "keywords": "Class SimpleShaderInspector Default base class for creating new inspectors. Inheritance Object ShaderGUI SimpleShaderInspector Implements ISimpleShaderInspector IControlContainer Namespace : VRLabs.SimpleShaderInspectors Syntax public abstract class SimpleShaderInspector : ShaderGUI, ISimpleShaderInspector, IControlContainer Remarks If you want to make an inspector with Simple Shader Inspectors you need to either derive from this class, or create your own implementing ISimpleShaderInspector , but in this second case you need to implement a lot of stuff manually, so it isn't advised unless you need really custom inspector behaviours. Properties Name Description Controls List of controls. CustomLocalizationShaderName String containing a custom folder name for localization of shaders. DefaultBgColor Default gui background color. Materials Array of selected materials NeedsNonAnimatableUpdate Boolean value that defines if the inspector should check for non animatable properties. Shader Shader currently used Methods Name Description AddControl(SimpleControl, String) Implementation needed by IControlContainer to add controls. CheckChanges(MaterialEditor) Check changes happened to properties. Footer() Draw method that is used after drawing controls in the inspector. GetControlList() Implementation needed by IControlContainer to get the object's controls list. Header() Draw method that is used before drawing controls in the inspector. OnGUI(MaterialEditor, MaterialProperty[]) Method called when updating UI. Cannot be overridden in child classes, leave it alone. Start() Initialization method where all the controls are instanced. You need to override it. StartChecks(MaterialEditor) Checks done on the first cycle before UI is drawn. Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Materials.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Materials.html",
    "title": "Property Materials | Simple Shader Inspectors Documentation",
    "keywords": "Property Materials Materials Array of selected materials Declaration public Material[] Materials { get; } Property Value Type Description Material [] Array containing the materials currently selected by the inspector. Implements ISimpleShaderInspector.Materials"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.NeedsNonAnimatableUpdate.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.NeedsNonAnimatableUpdate.html",
    "title": "Property NeedsNonAnimatableUpdate | Simple Shader Inspectors Documentation",
    "keywords": "Property NeedsNonAnimatableUpdate NeedsNonAnimatableUpdate Boolean value that defines if the inspector should check for non animatable properties. Declaration protected bool NeedsNonAnimatableUpdate { get; set; } Property Value Type Description Boolean True if non animatable properties should be granted their need to update outside of the animation recording, false otherwise. (default: false) Remarks Due to the cost of Reflection needed to get non animatable properties to be updated without animation recording the change, by default this behaviour is not enabled."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.OnGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.OnGUI.html",
    "title": "Method OnGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method OnGUI OnGUI(MaterialEditor, MaterialProperty[]) Method called when updating UI. Cannot be overridden in child classes, leave it alone. Declaration public sealed override void OnGUI(MaterialEditor materialEditor, MaterialProperty[] properties) Parameters Type Name Description MaterialEditor materialEditor material editor that uses this GUI. MaterialProperty [] properties List of MaterialProperties currently available on the selected shader. Overrides ShaderGUI.OnGUI(MaterialEditor, MaterialProperty[])"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Shader.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Shader.html",
    "title": "Property Shader | Simple Shader Inspectors Documentation",
    "keywords": "Property Shader Shader Shader currently used Declaration public Shader Shader { get; } Property Value Type Description Shader Contains the shader this inspector is viewing at the moment. Implements ISimpleShaderInspector.Shader"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Start.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Start.html",
    "title": "Method Start | Simple Shader Inspectors Documentation",
    "keywords": "Method Start Start() Initialization method where all the controls are instanced. You need to override it. Declaration protected abstract void Start() Remarks This method is called only once at the beginning of the inspector lifecycle, and it should be used to create all controls that are needed, and set properties like NeedsNonAnimatableUpdate or CustomLocalizationShaderName if a value different than the default one is needed. Keep in mind that MaterialProperties inside controls at this stage have not been filled in yet, so any attempt to use them would result in a NullReferenceException"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.StartChecks.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.StartChecks.html",
    "title": "Method StartChecks | Simple Shader Inspectors Documentation",
    "keywords": "Method StartChecks StartChecks(MaterialEditor) Checks done on the first cycle before UI is drawn. Declaration protected virtual void StartChecks(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor material editor that uses this GUI. Remarks This method is called after the Start() function, and at this stage material properties have been fetched and can be used for whatever is needed."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIConstants.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIConstants.html",
    "title": "Class SSIConstants | Simple Shader Inspectors Documentation",
    "keywords": "Class SSIConstants Constants used across the library. Inheritance Object SSIConstants Namespace : VRLabs.SimpleShaderInspectors Syntax public static class SSIConstants Remarks These constants are the default one used, when you embed the library you have the option to change some of these defaults to whatever you want Fields Name Description RESOURCES_FOLDER Default name of the subfolder of the Resources folder containing all the resources needed for the library. WINDOW_PATH Default path in the menu to place all windows menu options."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIConstants.RESOURCES_FOLDER.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIConstants.RESOURCES_FOLDER.html",
    "title": "Field RESOURCES_FOLDER | Simple Shader Inspectors Documentation",
    "keywords": "Field RESOURCES_FOLDER Default name of the subfolder of the Resources folder containing all the resources needed for the library. Namespace : VRLabs.SimpleShaderInspectors Syntax public const string RESOURCES_FOLDER = \"SSI\" Returns String Remarks A custom folder name is needed to differentiate different installed versions of the libraries from multiple shaders, you HAVE to use a different name when embedding the library to your shader project, or else conflicts may arise whenever someone who already has the official library will also download your shader, especially when the 2 versions don't match up."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIConstants.WINDOW_PATH.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIConstants.WINDOW_PATH.html",
    "title": "Field WINDOW_PATH | Simple Shader Inspectors Documentation",
    "keywords": "Field WINDOW_PATH Default path in the menu to place all windows menu options. Namespace : VRLabs.SimpleShaderInspectors Syntax public const string WINDOW_PATH = \"VRLabs/Simple Shader Inspectors\" Returns String"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.GetControlRectForSingleLine.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.GetControlRectForSingleLine.html",
    "title": "Method GetControlRectForSingleLine | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlRectForSingleLine GetControlRectForSingleLine() Public reimplementation of Unity's internal equivalent function. Declaration public static Rect GetControlRectForSingleLine() Returns Type Description Rect A rect of the size for a single line object."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.html",
    "title": "Class SSIGUIHelper | Simple Shader Inspectors Documentation",
    "keywords": "Class SSIGUIHelper Helper class containing utility methods for IMGUI. Inheritance Object SSIGUIHelper Namespace : VRLabs.SimpleShaderInspectors Syntax public static class SSIGUIHelper Methods Name Description GetControlRectForSingleLine() Public reimplementation of Unity's internal equivalent function. TexturePropertyWithHDRColorFixed(MaterialEditor, GUIContent, MaterialProperty, MaterialProperty, Boolean) Draw a texture property with an HDR color field, it's the same as MaterialEditor.TexturePropertyWithHDRColor but it adds a fix for usage under indentation that would normally break it."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.TexturePropertyWithHDRColorFixed.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.TexturePropertyWithHDRColorFixed.html",
    "title": "Method TexturePropertyWithHDRColorFixed | Simple Shader Inspectors Documentation",
    "keywords": "Method TexturePropertyWithHDRColorFixed TexturePropertyWithHDRColorFixed(MaterialEditor, GUIContent, MaterialProperty, MaterialProperty, Boolean) Draw a texture property with an HDR color field, it's the same as MaterialEditor.TexturePropertyWithHDRColor but it adds a fix for usage under indentation that would normally break it. Declaration public static Rect TexturePropertyWithHDRColorFixed(this MaterialEditor editor, GUIContent label, MaterialProperty textureProp, MaterialProperty colorProperty, bool showAlpha) Parameters Type Name Description MaterialEditor editor material editor GUIContent label label to show MaterialProperty textureProp texture material property MaterialProperty colorProperty color material property Boolean showAlpha show alpha channel Returns Type Description Rect Rect used to display the TextureProperty."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.FetchProperties.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.FetchProperties.html",
    "title": "Method FetchProperties | Simple Shader Inspectors Documentation",
    "keywords": "Method FetchProperties FetchProperties(IEnumerable<SimpleControl>, MaterialProperty[]) Fetches properties for all the given controls. Declaration public static void FetchProperties(this IEnumerable<SimpleControl> controls, MaterialProperty[] properties) Parameters Type Name Description IEnumerable < SimpleControl > controls Controls needing to fetch properties. MaterialProperty [] properties Property array to fetch properties from. FetchProperties(IEnumerable<SimpleControl>, MaterialProperty[], out List<String>) Fetches properties for all the given controls. Declaration public static void FetchProperties(this IEnumerable<SimpleControl> controls, MaterialProperty[] properties, out List<string> missingProperties) Parameters Type Name Description IEnumerable < SimpleControl > controls Controls needing to fetch properties. MaterialProperty [] properties Property array to fetch properties from. List < String > missingProperties (Out) Properties defined in the inspector that are missing in the shader"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.FindNonAnimatablePropertyControls.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.FindNonAnimatablePropertyControls.html",
    "title": "Method FindNonAnimatablePropertyControls | Simple Shader Inspectors Documentation",
    "keywords": "Method FindNonAnimatablePropertyControls FindNonAnimatablePropertyControls(IEnumerable<SimpleControl>) Finds all controls that implement the INonAnimatableProperty interface. Declaration public static IEnumerable<INonAnimatableProperty> FindNonAnimatablePropertyControls(this IEnumerable<SimpleControl> controls) Parameters Type Name Description IEnumerable < SimpleControl > controls Controls to search from Returns Type Description IEnumerable < INonAnimatableProperty > An enumerable containing all INonAnimatableProperty instances found"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.GetTextureDestinationPath.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.GetTextureDestinationPath.html",
    "title": "Method GetTextureDestinationPath | Simple Shader Inspectors Documentation",
    "keywords": "Method GetTextureDestinationPath GetTextureDestinationPath(Material, String) Get a path to save a texture relative to the material. Declaration public static string GetTextureDestinationPath(Material mat, string name) Parameters Type Name Description Material mat Material. String name Name of the texture. Returns Type Description String A path for the texture to save."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.html",
    "title": "Class SSIHelper | Simple Shader Inspectors Documentation",
    "keywords": "Class SSIHelper Static class containing utility functions for Controls and Inspectors. Inheritance Object SSIHelper Namespace : VRLabs.SimpleShaderInspectors Syntax public static class SSIHelper Methods Name Description FetchProperties(IEnumerable<SimpleControl>, MaterialProperty[]) Fetches properties for all the given controls. FetchProperties(IEnumerable<SimpleControl>, MaterialProperty[], out List<String>) Fetches properties for all the given controls. FindNonAnimatablePropertyControls(IEnumerable<SimpleControl>) Finds all controls that implement the INonAnimatableProperty interface. GetTextureDestinationPath(Material, String) Get a path to save a texture relative to the material. IsSrgb(Texture2D) Check if the texture is in srgb. SaveAndGetTexture(RenderTexture, String, TextureWrapMode, Boolean) Saves a RenderTexture to a specified path, and returns a reference of the new asset. SaveAndGetTexture(Texture2D, String, TextureWrapMode, Boolean) Saves a texture to a specified path, and returns a reference of the new asset. SaveTexture(RenderTexture, String, TextureWrapMode, Boolean) Saves a RenderTexture to a specified path. SaveTexture(Texture2D, String, TextureWrapMode, Boolean) Saves a texture to a specified path. SetInspector(IEnumerable<SimpleControl>, ISimpleShaderInspector, Boolean) Set the inspector of each control of the list. SetTextureImporterAlpha(Texture2D, Boolean) Set the texture alphaIsTransparency value. SetTextureImporterReadable(Texture2D, Boolean) Set the texture readable state. UpdateNonAnimatableProperties(IEnumerable<INonAnimatableProperty>, MaterialEditor, Boolean) Updates properties that are set to not be recorded during animation recording."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.IsSrgb.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.IsSrgb.html",
    "title": "Method IsSrgb | Simple Shader Inspectors Documentation",
    "keywords": "Method IsSrgb IsSrgb(Texture2D) Check if the texture is in srgb. Declaration public static bool IsSrgb(this Texture2D texture) Parameters Type Name Description Texture2D texture Texture. Returns Type Description Boolean"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.SaveAndGetTexture.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.SaveAndGetTexture.html",
    "title": "Method SaveAndGetTexture | Simple Shader Inspectors Documentation",
    "keywords": "Method SaveAndGetTexture SaveAndGetTexture(Texture2D, String, TextureWrapMode, Boolean) Saves a texture to a specified path, and returns a reference of the new asset. Declaration public static Texture2D SaveAndGetTexture(Texture2D texture, string path, TextureWrapMode mode = TextureWrapMode.Repeat, bool linear = false) Parameters Type Name Description Texture2D texture Texture to save. String path path where you want to save the texture. TextureWrapMode mode Texture wrap mode (default: Repeat). Boolean linear If the texture should be saved as linear Returns Type Description Texture2D A Texture2D that references the newly created asset. SaveAndGetTexture(RenderTexture, String, TextureWrapMode, Boolean) Saves a RenderTexture to a specified path, and returns a reference of the new asset. Declaration public static Texture2D SaveAndGetTexture(RenderTexture texture, string path, TextureWrapMode mode = TextureWrapMode.Repeat, bool linear = false) Parameters Type Name Description RenderTexture texture Texture to save. String path path where you want to save the texture. TextureWrapMode mode Texture wrap mode (default: Repeat). Boolean linear If the texture should be saved as linear Returns Type Description Texture2D A Texture2D that references the newly created asset."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.SaveTexture.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.SaveTexture.html",
    "title": "Method SaveTexture | Simple Shader Inspectors Documentation",
    "keywords": "Method SaveTexture SaveTexture(Texture2D, String, TextureWrapMode, Boolean) Saves a texture to a specified path. Declaration public static void SaveTexture(Texture2D texture, string path, TextureWrapMode mode = TextureWrapMode.Repeat, bool linear = false) Parameters Type Name Description Texture2D texture Texture to save. String path path where you want to save the texture. TextureWrapMode mode Texture wrap mode (default: Repeat). Boolean linear If the texture should be saved as linear. SaveTexture(RenderTexture, String, TextureWrapMode, Boolean) Saves a RenderTexture to a specified path. Declaration public static void SaveTexture(RenderTexture texture, string path, TextureWrapMode mode = TextureWrapMode.Repeat, bool linear = false) Parameters Type Name Description RenderTexture texture Texture to save. String path path where you want to save the texture. TextureWrapMode mode Texture wrap mode (default: Repeat). Boolean linear If the texture should be saved as linear."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.SetInspector.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.SetInspector.html",
    "title": "Method SetInspector | Simple Shader Inspectors Documentation",
    "keywords": "Method SetInspector SetInspector(IEnumerable<SimpleControl>, ISimpleShaderInspector, Boolean) Set the inspector of each control of the list. Declaration public static void SetInspector(this IEnumerable<SimpleControl> controls, ISimpleShaderInspector inspector, bool recursive = true) Parameters Type Name Description IEnumerable < SimpleControl > controls Controls this method extends from. ISimpleShaderInspector inspector Inspector to set Boolean recursive Is the set recursive to child controls"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.SetTextureImporterAlpha.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.SetTextureImporterAlpha.html",
    "title": "Method SetTextureImporterAlpha | Simple Shader Inspectors Documentation",
    "keywords": "Method SetTextureImporterAlpha SetTextureImporterAlpha(Texture2D, Boolean) Set the texture alphaIsTransparency value. Declaration public static void SetTextureImporterAlpha(Texture2D texture, bool alphaIsTransparency) Parameters Type Name Description Texture2D texture Texture. Boolean alphaIsTransparency alphaIsTransparency option to set."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.SetTextureImporterReadable.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.SetTextureImporterReadable.html",
    "title": "Method SetTextureImporterReadable | Simple Shader Inspectors Documentation",
    "keywords": "Method SetTextureImporterReadable SetTextureImporterReadable(Texture2D, Boolean) Set the texture readable state. Declaration public static void SetTextureImporterReadable(Texture2D texture, bool isReadable) Parameters Type Name Description Texture2D texture Texture. Boolean isReadable Does the texture need to be readable."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.UpdateNonAnimatableProperties.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.SSIHelper.UpdateNonAnimatableProperties.html",
    "title": "Method UpdateNonAnimatableProperties | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateNonAnimatableProperties UpdateNonAnimatableProperties(IEnumerable<INonAnimatableProperty>, MaterialEditor, Boolean) Updates properties that are set to not be recorded during animation recording. Declaration public static void UpdateNonAnimatableProperties(IEnumerable<INonAnimatableProperty> controls, MaterialEditor materialEditor, bool updateOutsideAnimation = true) Parameters Type Name Description IEnumerable < INonAnimatableProperty > controls Controls to check. MaterialEditor materialEditor Material editor. Boolean updateOutsideAnimation If the animations will actually be changed outside of animation recording"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.StaticDictionaries.BoolDictionary.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.StaticDictionaries.BoolDictionary.html",
    "title": "Property BoolDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Property BoolDictionary BoolDictionary Dictionary containing boolean values. Declaration public static TimedDictionary<string, bool> BoolDictionary { get; } Property Value Type Description TimedDictionary < String , Boolean >"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.StaticDictionaries.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.StaticDictionaries.html",
    "title": "Class StaticDictionaries | Simple Shader Inspectors Documentation",
    "keywords": "Class StaticDictionaries Static class containing dictionaries that can be used by controls for various needs. Inheritance Object StaticDictionaries Namespace : VRLabs.SimpleShaderInspectors Syntax public static class StaticDictionaries Properties Name Description BoolDictionary Dictionary containing boolean values. IntDictionary Dictionary containing integer values."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.StaticDictionaries.IntDictionary.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.StaticDictionaries.IntDictionary.html",
    "title": "Property IntDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Property IntDictionary IntDictionary Dictionary containing integer values. Declaration public static TimedDictionary<string, int> IntDictionary { get; } Property Value Type Description TimedDictionary < String , Int32 >"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.StaticDictionaries.Startup.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.StaticDictionaries.Startup.html",
    "title": "Class StaticDictionaries.Startup | Simple Shader Inspectors Documentation",
    "keywords": "Class StaticDictionaries.Startup Inheritance Object StaticDictionaries.Startup Namespace : VRLabs.SimpleShaderInspectors Syntax [InitializeOnLoad] public class Startup"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.BoldCenter.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.BoldCenter.html",
    "title": "Property BoldCenter | Simple Shader Inspectors Documentation",
    "keywords": "Property BoldCenter BoldCenter Style of a bold label with a center anchor. Declaration public static GUIStyle BoldCenter { get; } Property Value Type Description GUIStyle"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.BoldLeft.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.BoldLeft.html",
    "title": "Property BoldLeft | Simple Shader Inspectors Documentation",
    "keywords": "Property BoldLeft BoldLeft Style of a bold label with a left anchor. Declaration public static GUIStyle BoldLeft { get; } Property Value Type Description GUIStyle"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.BottomCenterLabel.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.BottomCenterLabel.html",
    "title": "Property BottomCenterLabel | Simple Shader Inspectors Documentation",
    "keywords": "Property BottomCenterLabel BottomCenterLabel Style of a label with a center anchor. Declaration public static GUIStyle BottomCenterLabel { get; } Property Value Type Description GUIStyle"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.Box.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.Box.html",
    "title": "Property Box | Simple Shader Inspectors Documentation",
    "keywords": "Property Box Box Box-like Style. Declaration public static GUIStyle Box { get; } Property Value Type Description GUIStyle"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.BoxHeavyBorder.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.BoxHeavyBorder.html",
    "title": "Property BoxHeavyBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property BoxHeavyBorder BoxHeavyBorder Style for a box. The border is less transparent than background. Declaration public static GUIStyle BoxHeavyBorder { get; } Property Value Type Description GUIStyle Remarks The border, being less transparent than the background, will result lighter than the background on dark themes, darker than the background on light themes, and with a less vivid color compared to the background when a custom background color is used."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.BoxLightBorder.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.BoxLightBorder.html",
    "title": "Property BoxLightBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property BoxLightBorder BoxLightBorder Style for a box. The border is more transparent than background. Declaration public static GUIStyle BoxLightBorder { get; } Property Value Type Description GUIStyle Remarks The border, being more transparent than the background, will result darker than the background on dark themes, lighter than the background on light themes, and with a more vivid color compared to the background when a custom background color is used."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.Bubble.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.Bubble.html",
    "title": "Property Bubble | Simple Shader Inspectors Documentation",
    "keywords": "Property Bubble Bubble Style that uses the same background of a button. Declaration public static GUIStyle Bubble { get; } Property Value Type Description GUIStyle"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.CenterLabel.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.CenterLabel.html",
    "title": "Property CenterLabel | Simple Shader Inspectors Documentation",
    "keywords": "Property CenterLabel CenterLabel Style of a label with a center anchor. Declaration public static GUIStyle CenterLabel { get; } Property Value Type Description GUIStyle"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.CreateStyleFromSprite.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.CreateStyleFromSprite.html",
    "title": "Method CreateStyleFromSprite | Simple Shader Inspectors Documentation",
    "keywords": "Method CreateStyleFromSprite CreateStyleFromSprite(String, String, String, String) Creates a GUIStyle using the given sprite names. Declaration public static GUIStyle CreateStyleFromSprite(string normal, string active = null, string focused = null, string hover = null) Parameters Type Name Description String normal Sprite to use on normal state. String active Sprite to use on active state. String focused Sprite to use on focused state. String hover Sprite to use on hover state. Returns Type Description GUIStyle The generated GUIStyle CreateStyleFromSprite(RectOffset, String, String, String, String) Creates a GUIStyle using the given sprite names and padding. Declaration public static GUIStyle CreateStyleFromSprite(RectOffset padding, string normal, string active = null, string focused = null, string hover = null) Parameters Type Name Description RectOffset padding Padding of the GUIStyle. String normal Sprite to use on normal state. String active Sprite to use on active state. String focused Sprite to use on focused state. String hover Sprite to use on hover state. Returns Type Description GUIStyle The generated GUIStyle"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.DeleteIcon.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.DeleteIcon.html",
    "title": "Property DeleteIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property DeleteIcon DeleteIcon Style for a delete button. Declaration public static GUIStyle DeleteIcon { get; } Property Value Type Description GUIStyle"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.DownIcon.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.DownIcon.html",
    "title": "Property DownIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property DownIcon DownIcon Style for a down button. Declaration public static GUIStyle DownIcon { get; } Property Value Type Description GUIStyle"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.GearIcon.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.GearIcon.html",
    "title": "Property GearIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property GearIcon GearIcon Style for a gear icon. Declaration public static GUIStyle GearIcon { get; } Property Value Type Description GUIStyle"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.html",
    "title": "Class Styles | Simple Shader Inspectors Documentation",
    "keywords": "Class Styles Default styles available natively in SimpleShaderInspectors. Inheritance Object Styles Namespace : VRLabs.SimpleShaderInspectors Syntax public static class Styles Properties Name Description BoldCenter Style of a bold label with a center anchor. BoldLeft Style of a bold label with a left anchor. BottomCenterLabel Style of a label with a center anchor. Box Box-like Style. BoxHeavyBorder Style for a box. The border is less transparent than background. BoxLightBorder Style for a box. The border is more transparent than background. Bubble Style that uses the same background of a button. CenterLabel Style of a label with a center anchor. DeleteIcon Style for a delete button. DownIcon Style for a down button. GearIcon Style for a gear icon. MultilineLabel Style of a label that can take multiple lines. RightLabel Style of a label with a right anchor. SSILogoDark Simple Shader Inspectors logo for dark theme. SSILogoLight Simple Shader Inspectors logo for light theme. TextureBoxHeavyBorder Style for a box pointing to a texture upwards. The border is less transparent than background. TextureBoxLightBorder Style for a box pointing to a texture upwards. The border is more transparent than background. UpIcon Style for a up button. Methods Name Description CreateStyleFromSprite(String, String, String, String) Creates a GUIStyle using the given sprite names. CreateStyleFromSprite(RectOffset, String, String, String, String) Creates a GUIStyle using the given sprite names and padding."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.MultilineLabel.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.MultilineLabel.html",
    "title": "Property MultilineLabel | Simple Shader Inspectors Documentation",
    "keywords": "Property MultilineLabel MultilineLabel Style of a label that can take multiple lines. Declaration public static GUIStyle MultilineLabel { get; } Property Value Type Description GUIStyle"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.RightLabel.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.RightLabel.html",
    "title": "Property RightLabel | Simple Shader Inspectors Documentation",
    "keywords": "Property RightLabel RightLabel Style of a label with a right anchor. Declaration public static GUIStyle RightLabel { get; } Property Value Type Description GUIStyle"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.SSILogoDark.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.SSILogoDark.html",
    "title": "Property SSILogoDark | Simple Shader Inspectors Documentation",
    "keywords": "Property SSILogoDark SSILogoDark Simple Shader Inspectors logo for dark theme. Declaration public static Texture2D SSILogoDark { get; } Property Value Type Description Texture2D"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.SSILogoLight.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.SSILogoLight.html",
    "title": "Property SSILogoLight | Simple Shader Inspectors Documentation",
    "keywords": "Property SSILogoLight SSILogoLight Simple Shader Inspectors logo for light theme. Declaration public static Texture2D SSILogoLight { get; } Property Value Type Description Texture2D"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.TextureBoxHeavyBorder.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.TextureBoxHeavyBorder.html",
    "title": "Property TextureBoxHeavyBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property TextureBoxHeavyBorder TextureBoxHeavyBorder Style for a box pointing to a texture upwards. The border is less transparent than background. Declaration public static GUIStyle TextureBoxHeavyBorder { get; } Property Value Type Description GUIStyle Remarks The border, being less transparent than the background, will result lighter than the background on dark themes, darker than the background on light themes, and with a less vivid color compared to the background when a custom background color is used."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.TextureBoxLightBorder.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.TextureBoxLightBorder.html",
    "title": "Property TextureBoxLightBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property TextureBoxLightBorder TextureBoxLightBorder Style for a box pointing to a texture upwards. The border is more transparent than background. Declaration public static GUIStyle TextureBoxLightBorder { get; } Property Value Type Description GUIStyle Remarks The border, being more transparent than the background, will result darker than the background on dark themes, lighter than the background on light themes, and with a more vivid color compared to the background when a custom background color is used."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Styles.UpIcon.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Styles.UpIcon.html",
    "title": "Property UpIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property UpIcon UpIcon Style for a up button. Declaration public static GUIStyle UpIcon { get; } Property Value Type Description GUIStyle"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.AddControl.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.AddControl.html",
    "title": "Method AddControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControl AddControl(SimpleControl, String) Declaration public void AddControl(SimpleControl control, string alias = \"\") Parameters Type Name Description SimpleControl control String alias Implements IControlContainer.AddControl(SimpleControl, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.CheckChanges.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.CheckChanges.html",
    "title": "Method CheckChanges | Simple Shader Inspectors Documentation",
    "keywords": "Method CheckChanges CheckChanges(MaterialEditor) Check changes happened to properties. Declaration protected virtual void CheckChanges(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor material editor that uses this GUI. Remarks This method is used the same way as CheckChanges(MaterialEditor) ."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.Controls.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > List of control that the inspector had to draw."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.GetControlList.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.GetControlList.html",
    "title": "Method GetControlList | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlList GetControlList() Declaration public IEnumerable<SimpleControl> GetControlList() Returns Type Description IEnumerable < SimpleControl > Implements IControlContainer.GetControlList()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.html",
    "title": "Class TextureGeneratorShaderInspector | Simple Shader Inspectors Documentation",
    "keywords": "Class TextureGeneratorShaderInspector Base class for creating new inspectors for shaders meant to be used in the texture generator control Inheritance Object ShaderGUI TextureGeneratorShaderInspector Implements ISimpleShaderInspector IControlContainer Namespace : VRLabs.SimpleShaderInspectors Syntax public abstract class TextureGeneratorShaderInspector : ShaderGUI, ISimpleShaderInspector, IControlContainer Remarks The TextureGeneratorControl uses shaders outputs to create textures, and uses their inspectors as options ui. Using inspectors inherited from this one will let the control get and give some needed data, as well as letting the user know that the shader is not supposed to be used for a material. Properties Name Description Controls List of controls. Materials Array of selected materials Shader Shader currently used Methods Name Description AddControl(SimpleControl, String) CheckChanges(MaterialEditor) Check changes happened to properties. GetControlList() OnGUI(MaterialEditor, MaterialProperty[]) Start() Initialization method where all the controls are instanced. You need to override it. StartChecks(MaterialEditor) Checks done on the first cycle before UI is drawn. Extension Methods Chainables.AddPropertyControl(IControlContainer, String, String) Chainables.AddColorControl(IControlContainer, String, Boolean, String) Chainables.AddConditionalControlContainer(IControlContainer, String, Single, String) Chainables.AddControlContainer(IControlContainer, String) Chainables.AddEnumControl<TEnum>(IControlContainer, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String) Chainables.AddGradientTextureControl(IControlContainer, String, String, String, String, String) Chainables.AddHelpBoxControl(IControlContainer, String, String) Chainables.AddHorizontalContainer(IControlContainer, String) Chainables.AddKeywordToggleControl(IControlContainer, String, String) Chainables.AddKeywordToggleListControl(IControlContainer, String, String) Chainables.AddLabelControl(IControlContainer, String, String) Chainables.AddLightmapEmissionControl(IControlContainer, String) Chainables.AddRGBASelectorControl(IControlContainer, String, String) Chainables.AddSpaceControl(IControlContainer, Int32, String) Chainables.AddTextureControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, String, String, String, String) Chainables.AddTextureGeneratorControl(IControlContainer, Shader, String, String, String, String) Chainables.AddTilingAndOffsetControl(IControlContainer, String, String) Chainables.AddToggleControl(IControlContainer, String, Single, Single, String) Chainables.AddToggleListControl(IControlContainer, String, Single, Single, String) Chainables.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean, String) Chainables.AddVertexStreamsControl(IControlContainer, String, String) Chainables.AddActivatableSection(IControlContainer, String, String, Single, Single, Single, Single, String) Chainables.AddActivatableSection(IControlContainer, String, Single, Single, String) Chainables.AddOrderedSectionGroup(IControlContainer, String, String) Chainables.AddSection(IControlContainer, String, Single, Single, String) Chainables.AddSection(IControlContainer, String)"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.Materials.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.Materials.html",
    "title": "Property Materials | Simple Shader Inspectors Documentation",
    "keywords": "Property Materials Materials Array of selected materials Declaration public Material[] Materials { get; } Property Value Type Description Material [] Array containing the materials currently selected by the inspector. Implements ISimpleShaderInspector.Materials"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.OnGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.OnGUI.html",
    "title": "Method OnGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method OnGUI OnGUI(MaterialEditor, MaterialProperty[]) Declaration public override void OnGUI(MaterialEditor materialEditor, MaterialProperty[] properties) Parameters Type Name Description MaterialEditor materialEditor MaterialProperty [] properties Overrides ShaderGUI.OnGUI(MaterialEditor, MaterialProperty[])"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.Shader.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.Shader.html",
    "title": "Property Shader | Simple Shader Inspectors Documentation",
    "keywords": "Property Shader Shader Shader currently used Declaration public Shader Shader { get; } Property Value Type Description Shader Contains the shader this inspector is viewing at the moment. Implements ISimpleShaderInspector.Shader"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.Start.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.Start.html",
    "title": "Method Start | Simple Shader Inspectors Documentation",
    "keywords": "Method Start Start() Initialization method where all the controls are instanced. You need to override it. Declaration protected abstract void Start() Remarks This method is used the same way as Start() ."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.StartChecks.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TextureGeneratorShaderInspector.StartChecks.html",
    "title": "Method StartChecks | Simple Shader Inspectors Documentation",
    "keywords": "Method StartChecks StartChecks(MaterialEditor) Checks done on the first cycle before UI is drawn. Declaration protected virtual void StartChecks(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor material editor that uses this GUI. Remarks This method is used the same way as StartChecks(MaterialEditor) ."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Textures.ColorIcon.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Textures.ColorIcon.html",
    "title": "Property ColorIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property ColorIcon ColorIcon Texture used for a color selector internal part. Declaration public static Texture2D ColorIcon { get; } Property Value Type Description Texture2D"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Textures.ColorIconBorder.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Textures.ColorIconBorder.html",
    "title": "Property ColorIconBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property ColorIconBorder ColorIconBorder Texture used for a color selector border. Declaration public static Texture2D ColorIconBorder { get; } Property Value Type Description Texture2D"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Textures.ColorIconBorderSelected.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Textures.ColorIconBorderSelected.html",
    "title": "Property ColorIconBorderSelected | Simple Shader Inspectors Documentation",
    "keywords": "Property ColorIconBorderSelected ColorIconBorderSelected Texture used for a color selector border when selected. Declaration public static Texture2D ColorIconBorderSelected { get; } Property Value Type Description Texture2D"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Textures.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Textures.html",
    "title": "Class Textures | Simple Shader Inspectors Documentation",
    "keywords": "Class Textures Default textures available natively in Simple Shader Inspectors. Inheritance Object Textures Namespace : VRLabs.SimpleShaderInspectors Syntax public static class Textures Properties Name Description ColorIcon Texture used for a color selector internal part. ColorIconBorder Texture used for a color selector border. ColorIconBorderSelected Texture used for a color selector border when selected."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.ClearOld.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.ClearOld.html",
    "title": "Method ClearOld | Simple Shader Inspectors Documentation",
    "keywords": "Method ClearOld ClearOld() Clears values older than 30 days from the dictionary. Declaration public void ClearOld()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.-ctor.html",
    "title": "Constructor TimedDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Constructor TimedDictionary TimedDictionary() Default constructor Declaration public TimedDictionary()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.GetSerializedDictionary.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.GetSerializedDictionary.html",
    "title": "Method GetSerializedDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Method GetSerializedDictionary GetSerializedDictionary() Gets a list of all values stored in the dictionary in an easier to serialize form. Declaration public List<(TKey, TValue, DateTime)> GetSerializedDictionary() Returns Type Description List < (T1, T2, T3) <TKey, TValue, DateTime >> A list with the data"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.html",
    "title": "Class TimedDictionary<TKey, TValue> | Simple Shader Inspectors Documentation",
    "keywords": "Class TimedDictionary<TKey, TValue> Class used to identify a dictionary that also contains the date of last edit. Inheritance Object TimedDictionary<TKey, TValue> Namespace : VRLabs.SimpleShaderInspectors Syntax public class TimedDictionary<TKey, TValue> Type Parameters TKey Type of the key TValue Type of the value Constructors Name Description TimedDictionary() Default constructor Properties Name Description Keys Keys stored in the dictionary Methods Name Description ClearOld() Clears values older than 30 days from the dictionary. GetSerializedDictionary() Gets a list of all values stored in the dictionary in an easier to serialize form. SetValue(TKey, TValue) Set value with the specified key SetValue(TKey, TValue, DateTime) Set value and inserted date with the specified key. should be used only when loading the dictionary from storage. TryGetValue(TKey, out TValue) Try to get the value with the specified key"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.Keys.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.Keys.html",
    "title": "Property Keys | Simple Shader Inspectors Documentation",
    "keywords": "Property Keys Keys Keys stored in the dictionary Declaration public Dictionary<TKey, (DateTime, TValue)>.KeyCollection Keys { get; } Property Value Type Description Dictionary.KeyCollection <>"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.SetValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.SetValue.html",
    "title": "Method SetValue | Simple Shader Inspectors Documentation",
    "keywords": "Method SetValue SetValue(TKey, TValue) Set value with the specified key Declaration public void SetValue(TKey key, TValue value) Parameters Type Name Description TKey key Key to use TValue value value to insert SetValue(TKey, TValue, DateTime) Set value and inserted date with the specified key. should be used only when loading the dictionary from storage. Declaration public void SetValue(TKey key, TValue value, DateTime date) Parameters Type Name Description TKey key Key to use TValue value value to insert DateTime date date to insert"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.TryGetValue.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.TimedDictionary-2.TryGetValue.html",
    "title": "Method TryGetValue | Simple Shader Inspectors Documentation",
    "keywords": "Method TryGetValue TryGetValue(TKey, out TValue) Try to get the value with the specified key Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key Key to get the value from TValue value return value Returns Type Description Boolean true if the value was in the dictionary, false otherwise"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Tools.EmbedLibraryEditor.CreateGUI.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Tools.EmbedLibraryEditor.CreateGUI.html",
    "title": "Method CreateGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method CreateGUI CreateGUI() Declaration public void CreateGUI()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Tools.EmbedLibraryEditor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Tools.EmbedLibraryEditor.html",
    "title": "Class EmbedLibraryEditor | Simple Shader Inspectors Documentation",
    "keywords": "Class EmbedLibraryEditor Editor window that embeds the Simple Shader Inspectors library into any custom editor folder with customized namespace. Inheritance Object Object ScriptableObject EditorWindow EmbedLibraryEditor Namespace : VRLabs.SimpleShaderInspectors.Tools Syntax public class EmbedLibraryEditor : EditorWindow Methods Name Description CreateGUI()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Tools.ExtensionsGeneratorWindow.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Tools.ExtensionsGeneratorWindow.html",
    "title": "Class ExtensionsGeneratorWindow | Simple Shader Inspectors Documentation",
    "keywords": "Class ExtensionsGeneratorWindow Editor window that embeds the Simple Shader Inspectors library into any custom editor folder with customized namespace. Inheritance Object Object ScriptableObject EditorWindow ExtensionsGeneratorWindow Namespace : VRLabs.SimpleShaderInspectors.Tools Syntax public class ExtensionsGeneratorWindow : EditorWindow"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Tools.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Tools.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors.Tools | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors.Tools Classes EmbedLibraryEditor Editor window that embeds the Simple Shader Inspectors library into any custom editor folder with customized namespace. ExtensionsGeneratorWindow Editor window that embeds the Simple Shader Inspectors library into any custom editor folder with customized namespace. LocalizationEditorWindow Editor window that enables the user to modify json localization data."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Tools.LocalizationEditorWindow.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Tools.LocalizationEditorWindow.html",
    "title": "Class LocalizationEditorWindow | Simple Shader Inspectors Documentation",
    "keywords": "Class LocalizationEditorWindow Editor window that enables the user to modify json localization data. Inheritance Object Object ScriptableObject EditorWindow LocalizationEditorWindow Namespace : VRLabs.SimpleShaderInspectors.Tools Syntax public class LocalizationEditorWindow : EditorWindow"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientBlendMode.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientBlendMode.html",
    "title": "Enum GradientBlendMode | Simple Shader Inspectors Documentation",
    "keywords": "Enum GradientBlendMode Enum indicating the blend mode of the gradient texture. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax public enum GradientBlendMode Fields Name Description Fixed Linear"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.AddKey.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.AddKey.html",
    "title": "Method AddKey | Simple Shader Inspectors Documentation",
    "keywords": "Method AddKey AddKey(Color, Single) Adds a new key, and removes any key that is in the same time. Declaration public int AddKey(Color color, float time) Parameters Type Name Description Color color Color of the key Single time Time of the key Returns Type Description Int32 The key index"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.BlendMode.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.BlendMode.html",
    "title": "Field BlendMode | Simple Shader Inspectors Documentation",
    "keywords": "Field BlendMode Blend mode between keys. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax public GradientBlendMode BlendMode Returns GradientBlendMode"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.Color.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.Color.html",
    "title": "Field Color | Simple Shader Inspectors Documentation",
    "keywords": "Field Color Color of the key. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax [SerializeField] public Color Color Returns Color"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.-ctor.html",
    "title": "Constructor ColorKey | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ColorKey ColorKey(Color, Single) Default constructor of GradientTexture.ColorKey Declaration public ColorKey(Color color, float time) Parameters Type Name Description Color color Color of the key. Single time Time of the key."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.html",
    "title": "Struct GradientTexture.ColorKey | Simple Shader Inspectors Documentation",
    "keywords": "Struct GradientTexture.ColorKey Structure containing a color and a float indicating at which time the color is. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax [Serializable] public struct ColorKey Constructors Name Description ColorKey(Color, Single) Default constructor of GradientTexture.ColorKey Fields Name Description Color Color of the key. Time Time of the key."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.Time.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.Time.html",
    "title": "Field Time | Simple Shader Inspectors Documentation",
    "keywords": "Field Time Time of the key. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax [SerializeField] public float Time Returns Single"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.-ctor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.-ctor.html",
    "title": "Constructor GradientTexture | Simple Shader Inspectors Documentation",
    "keywords": "Constructor GradientTexture GradientTexture(Int32) Default constructor. Declaration public GradientTexture(int width) Parameters Type Name Description Int32 width With of the result gradient texture."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.Evaluate.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.Evaluate.html",
    "title": "Method Evaluate | Simple Shader Inspectors Documentation",
    "keywords": "Method Evaluate Evaluate(Single) Returns a color at the specified time. Declaration public Color Evaluate(float time) Parameters Type Name Description Single time Time of the color to sample. Returns Type Description Color Color at selected time."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.GetTexture.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.GetTexture.html",
    "title": "Method GetTexture | Simple Shader Inspectors Documentation",
    "keywords": "Method GetTexture GetTexture() Get gradient texture. Declaration public Texture2D GetTexture() Returns Type Description Texture2D Texture of the gradient."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.html",
    "title": "Class GradientTexture | Simple Shader Inspectors Documentation",
    "keywords": "Class GradientTexture Utility class used when creating gradient editors. Inheritance Object GradientTexture Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax public class GradientTexture Constructors Name Description GradientTexture(Int32) Default constructor. Fields Name Description BlendMode Blend mode between keys. Keys List of gradient keys. Methods Name Description AddKey(Color, Single) Adds a new key, and removes any key that is in the same time. Evaluate(Single) Returns a color at the specified time. GetTexture() Get gradient texture. RemoveKey(Int32) Removes a key at the selected index. UpdateKeyColor(Int32, Color) Updates the key color. UpdateKeyTime(Int32, Single) Updates the key time position. UpdateTexture() Updates the internal gradient Texture. UpdateTextureWidth(Int32) Updates the width of the result texture."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.Keys.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.Keys.html",
    "title": "Field Keys | Simple Shader Inspectors Documentation",
    "keywords": "Field Keys List of gradient keys. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax public List<GradientTexture.ColorKey> Keys Returns List < GradientTexture.ColorKey >"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.RemoveKey.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.RemoveKey.html",
    "title": "Method RemoveKey | Simple Shader Inspectors Documentation",
    "keywords": "Method RemoveKey RemoveKey(Int32) Removes a key at the selected index. Declaration public void RemoveKey(int index) Parameters Type Name Description Int32 index Index of the key to remove."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateKeyColor.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateKeyColor.html",
    "title": "Method UpdateKeyColor | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateKeyColor UpdateKeyColor(Int32, Color) Updates the key color. Declaration public void UpdateKeyColor(int index, Color col) Parameters Type Name Description Int32 index Index of the key. Color col Color of the key."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateKeyTime.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateKeyTime.html",
    "title": "Method UpdateKeyTime | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateKeyTime UpdateKeyTime(Int32, Single) Updates the key time position. Declaration public int UpdateKeyTime(int index, float time) Parameters Type Name Description Int32 index Index of the key to update. Single time New time. Returns Type Description Int32 The new index of the key."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateTexture.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateTexture.html",
    "title": "Method UpdateTexture | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateTexture UpdateTexture() Updates the internal gradient Texture. Declaration public void UpdateTexture()"
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateTextureWidth.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateTextureWidth.html",
    "title": "Method UpdateTextureWidth | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateTextureWidth UpdateTextureWidth(Int32) Updates the width of the result texture. Declaration public void UpdateTextureWidth(int width) Parameters Type Name Description Int32 width Width."
  },
  "Next/api/VRLabs.SimpleShaderInspectors.Utility.html": {
    "href": "Next/api/VRLabs.SimpleShaderInspectors.Utility.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors.Utility | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors.Utility Classes GradientTexture Utility class used when creating gradient editors. Structs GradientTexture.ColorKey Structure containing a color and a float indicating at which time the color is. Enums GradientBlendMode Enum indicating the blend mode of the gradient texture."
  },
  "Next/guides/ControlsDevelopment/FirstControl.html": {
    "href": "Next/guides/ControlsDevelopment/FirstControl.html",
    "title": "First control | Simple Shader Inspectors Documentation",
    "keywords": "First Control Controls are the central piece of Simple Shader Inspectors, so it's only natural that at some point you may need to make your own controls if you're doing something particular with your shader and you want an user friendly way to control it in the inspector. And luckily making a customized control is not too hard. Caution Unlike just using the API, making custom controls will require you to have a basic knowledge on how to manually display stuff in the inspector using MaterialProperty , MaterialEditor and how the IMGUI systems works. First things first, let's look at an empty template: using UnityEditor; using UnityEngine; using VRLabs.SimpleShaderInspectors; namespace TestControlNamespace { public class MyCustomControl : PropertyControl { public MyCustomControl(string propertyName) : base(propertyName) { } protected override void ControlGUI(MaterialEditor materialEditor) { } } } As we can see the class MyCustomControl inherits from PropertyControl , which is the base class for all controls that use one material property. Note You can inherit from other controls as well if you want to inherit some of their specific functionalities. Caution If you want to make a control that doesn't use any material property, the base class should be SimpleControl . PropertyControl also inherits from this class. When inheriting from PropertyControl you will always need to override the ControlGUI method. This method is what gets called each time the inspector has to draw your control, therefore all the GUI stuff goes there. The constructor should always call the base constructor to correctly initialize the PropertyName string (you can initialize it manually if you want, it's just simpler to pass the string to the base constructor). After that, you're free to do whatever you want with the constructor. Let's start customize it to our needs, we will make a control that will only take 1 texture and diplays it, but also had an additional label in the row below for a longer description. To do that we need an additional string containing the text we wanna show: public class MyCustomControl : PropertyControl { public string ExtraText { get; protected set; } Tip We have the set as protected cause we don't want it be modified from the outside, but we still want to it to be usable if someone will ever inherit from this control. Now we need the constructor to initialize the label as well. public MyCustomControl(string propertyName, string extraText) : base(propertyName) { ExtraText = extraText; } Now we need to draw them in the ControlGUI method: protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); materialEditor.TexturePropertySingleLine(Content, Property); HasPropertyUpdated = EditorGUI.EndChangeCheck(); GUILayout.Label(ExtraText); } As you see, we did not fetch the material property, cause it gets automatically fetched for us by the inspector, so we get right to the draw part and we do a BeginChangeCheck so that everything we do next will be tracked for changes. Then we draw our texture property, end the change check assigning the result to HasPropertyUpdated , and draw our additional label. You can see that we use the Content field inherited from PropertyControl as a label for our texture. This is cause the localization system fetched the localized control string for us, so we don't need to worry about it. Note In this example the additional label uses a predefined string, this is not optimal if we will have multiple localizations, here we will revisit the control to add support for another localized string. As a final touch let's make the user able to decide whether or not he wants to display the additional label: public string ExtraText { get; protected set; } public bool IsExtraLabelVisible { get; set; } public MyCustomControl(string propertyName, string extraText, bool isExtraLabelVisible = true) : base(propertyName) { ExtraText = extraText; IsExtraLabelVisible = isExtraLabelVisible; } Note Doing bool isExtraLabelVisible = true makes so the parameter is not required to make the method call, and if the parameter is not given a default value is used instead (in this case true ). protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); materialEditor.TexturePropertySingleLine(Content, Property); HasPropertyUpdated = EditorGUI.EndChangeCheck(); if (IsExtraLabelVisible) { GUILayout.Label(ExtraText); } } Adding the New Control extension method At this state, the control technically already works, but it's a fairly different experience using this compared to the default ones, since we have to manually call the constructor and assign the control to the list in the inspector. This is because there are no Extension methods to create and assign the control. Simple Shader Inspectors comes with a tool that will automatically generate all extension methods required from a namespace, and saves it into a class. It can be found at VRLabs/Simple Shader Inspectors/Generate Extension Methods . Once opened you will need to select what base library namespace it's going to use from a list (more copies of the library in different namespaces can exist) and which namespace you want to check for controls (for your controls, it should always be a different namespace from the one the library resides). When clicking Generate extension methods you will be prompted to select a folder, select one that is under an Editor folder. The norm is to have a folder called Autogenerated to where generated scripts will be put. The tool will generate all extension methods for constructors and properties marked with the FluentSet attribute for all controls inside the selected namespace and subnamespaces. Generating an extension set method for a property Usually you want the extension method to exactly match the constructor parameters, but in our case we did not put the boolean for the label. This is intentional, cause now we're gonna move that boolean out of the constructor and add the FluentSet attribute to the property definition. public string ExtraText { get; protected set; } [FluentSet] public bool IsExtraLabelVisible { get; set; } public MyCustomControl(string propertyName, string extraText) : base(propertyName) { ExtraText = extraText; IsExtraLabelVisible = true; } By adding the FluentSet attribute you're telling the generator script to also generate an extension method for this property (you will need to run the generator script again). Now the question is: when should a field be initialized with a parameter in the constructor vs having an extension method? It depends, on classes that are not meant to have child classes or has fields where it's required to have a value different from a default in order to work, then initializing them with a dedicated parameter in the constructor makes sense, in other cases you may just give a default value to it in the constructor and let the user decide if he wants to modify it by calling an extension method. You can also have both at the same time, if you so desire. Final example class using UnityEditor; using UnityEngine; using VRLabs.SimpleShaderInspectors; namespace TestControlNamespace { public class MyCustomControl : PropertyControl { public string ExtraText { get; protected set; } [FluentSet] public bool IsExtraLabelVisible { get; set; } public MyCustomControl(string propertyName, string extraText) : base(propertyName) { ExtraText = extraText; IsExtraLabelVisible = true; } protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); materialEditor.TexturePropertySingleLine(Content, Property); HasPropertyUpdated = EditorGUI.EndChangeCheck(); if (IsExtraLabelVisible) { GUILayout.Label(ExtraText); } } } }"
  },
  "Next/guides/ControlsDevelopment/IAdditionalLocalization.html": {
    "href": "Next/guides/ControlsDevelopment/IAdditionalLocalization.html",
    "title": "Using IAdditionalLocalization | Simple Shader Inspectors Documentation",
    "keywords": "Using IAdditionalLocalization In the last example we could not have localized content for the extra label cause by default each control only has a single Content property. This is quite limiting in case you want to make a control that handles multiple material properties at once (in this case you will need another interface as well), or that needs some extra text for various reasons. And is here that the IAdditionalLocalization comes into play. This interface is used to let the localization system know that the control that implements it needs more than one localization string. public class MyCustomControl : PropertyControl, IAdditionalLocalization { public AdditionalLocalization[] AdditionalContent { get; set; } Implementing the interface will add the AdditionalContent array of type AdditionalLocalization . This type only contains the Name string which contains the name of the additional content, and the GUIContent we want to retrieve. To use it, we just need to initialize the array with the number of additional strings we want, and assign the names: public MyCustomControl(string propertyName, string extraText) : base(propertyName) { ExtraText = extraText; IsExtraLabelVisible = true; AdditionalContent = new AdditionalLocalization[1]; AdditionalContent[0] = new AdditionalLocalization { Name = \"extraProperty\" }; } Tip If you have questions about the way the AdditionalLocalization object has been initialized here, check this page . Note The localization system when searching for strings of the extra localization will combine the control alias and the extra localization name in this way: Alias_AdditionalContentName . This is ensure that each control instance has a unique full name if they have different aliases. Caution If you have more than 1 or 2 additional content to fetch, manually instancing each element may become annoying and bloat your constructor a bit too much. in this case you can have a static array of strings with all your names in the order you want to access them, and in the constructor use InizializeLocalizationWithNames then we just need to use the Content inside the AdditionalContent array we created where we need it, in our case inside the Label call: if (IsExtraLabelVisible) { GUILayout.Label(AdditionalContent[0].Content); } Now the label field will also have its own localized content. Note With this change ExtraText becomes useless, so you can safely remove any reference of it on constructors/methods With this system you can add as much text as you want in your own controls with full support for localization, and is fairly easy to just plug it in and have it working."
  },
  "Next/guides/ControlsDevelopment/IAdditionalProperties.html": {
    "href": "Next/guides/ControlsDevelopment/IAdditionalProperties.html",
    "title": "Using IAdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Using IAdditionalProperties In some cases you may need to use multiple material properties in a single control. An example is making a texture control similar in functionality to MaterialEditor.TexturePropertySingleLine . Just like the IAdditionalLocalization interface can make you get multiple localized strings, IAdditionalProperties can be used for material properties themselves. The biggest difference is that in this case you need a way to get the material property name of the additional properties from the inspector. This time let's check the TextureControl code that Simple Shader Inspectors comes with, since it uses this interface to have 2 extra properties. The file can be found inside \"VRLabs/SimpleShaderInspectors/Editor/Controls/TextureControl.cs\" . Tip This is also a good time to see a real control use case instead of examples that are done for the sake of an example. First let's look at the implementation of the IAdditionalProperties interface. public class TextureControl : PropertyControl, IAdditionalProperties, IControlContainer { //.. public AdditionalProperty[] AdditionalProperties { get; set; } //.. As you can see, to implement the interface we need to add an array of type AdditionalProperty[] , which will contain both our property name string and out material property that will automatically be fetched by the inspector. let's now check in the constructor: public TextureControl(string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) : base(propertyName) { AdditionalProperties = new AdditionalProperty[2]; AdditionalProperties[0] = new AdditionalProperty(extraPropertyName1); if (!string.IsNullOrWhiteSpace(extraPropertyName1)) HasExtra1 = true; AdditionalProperties[1] = new AdditionalProperty(extraPropertyName2); if (!string.IsNullOrWhiteSpace(extraPropertyName2)) HasExtra2 = true; //.. Here the array is initialized with an array length of 2, and then we initialize both of them by giving them the name of the material property they need to fetch. (we are purposely ignoring the 2 extra checks since they're out of the scope of this page). Now during ControlGUI we can use them as we wish (the example below is taken from the DrawTextureSingleLine method, but that method is called inside ControlGUI so for our example is the same thing). protected void DrawTextureSingleLine(MaterialEditor materialEditor) { //.. if (HasExtra2) { materialEditor.TexturePropertySingleLine(Content, Property, AdditionalProperties[0].Property, AdditionalProperties[1].Property); } else if (HasExtra1) { if (AdditionalProperties[0].Property.type == MaterialProperty.PropType.Color && HasHDRColor) materialEditor.TexturePropertyWithHDRColorFixed(Content, Property, AdditionalProperties[0].Property, true); else materialEditor.TexturePropertySingleLine(Content, Property, AdditionalProperties[0].Property); } else { materialEditor.TexturePropertySingleLine(Content, Property); } //.. Overuse of IAdditionalProperties interface While this is incredibly useful in a lot of cases, a serious risk of abusing this interface is creating giant controls that handle half of the inspector alone. Let's take in consideration an hypotetical control that has 2 textures, one for a color map and one for a normal map, at first look it would make sense to merge them in a single control, due to their frequent use together, but it's really not. Before including more properties to a control, ask yourself the following questions: Are these properties directly correlated to each other in some way? Do they lose their overall meaning if split apart in 2 completely different areas of the inspector? If the answer is no to one of them, you probably should consider other options to handle them instead of including them in a single control. In case of the official texture control the answer to them is: Yes, because the second and third properties in this control should be used for properties that directly manipulate the texture (for example a texture color, or a normal map intensity). Yes, because if, for example, you put your texture field at the beginning and its color at the end of the inspector, when you reach the color you have no real reference to what that color modifies, maybe wrongly implying that the color is for standalone effects when in reality it just applies a tint to the texture. If we take into consideration our dual texture control the answers differ a bit: Not really, the 2 textures are used together really often, but they represent really different informations. No, if they are in 2 different areas of the inspector they still have their full meaning, and having them separated marks even more their independent functions. At worst the inspector would look a bit messy if they're not in the same general area. As third general rule: if you have more than 5-6 properties in a single control, there's a good chance you're doing something conceptually wrong. And if all those properties are really that intertwined between each other, let us know what the hell you're doing with that shader, cause we're definitely curious to see it."
  },
  "Next/guides/ControlsDevelopment/IControlContainer.html": {
    "href": "Next/guides/ControlsDevelopment/IControlContainer.html",
    "title": "Using IControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Using IControlContainer Sometimes you may want to have a control being able to manage additional controls under it, for example you want a control that will show another control if its property value is above a certain threshold. This would technically be possible by just checking the value change in the inspector and enabling/disabling the controls that should be affected, but that requires to write code to handle that for every occasion, and we want it to be automatic. To do that we will need to use the IControlContainer interface. Let's take our custom control template and implement the IControlContainer interface: using System.Collections.Generic; using UnityEditor; using VRLabs.SimpleShaderInspectors; namespace TestControlNamespace { public class MyCustomControl : PropertyControl, IControlContainer { public MyCustomControl(string propertyName) : base(propertyName) { } protected override void ControlGUI(MaterialEditor materialEditor) { } public void AddControl(SimpleControl control, string alias = \"\") { } public IEnumerable<SimpleControl> GetControlList() { } } } The implement the interface you need to implement the AddControl and GetControlList methods in you class. The first method is generally used in the generated extension methods to add a new control under this one, meanwhile the second one is used when the inspector fetches properties. How you store those controls is up to you, in this case we will use a list. And in the meantime, we also add a simple range property and get the control to do something: using System.Collections.Generic; using UnityEditor; using VRLabs.SimpleShaderInspectors; namespace TestControlNamespace { public class MyCustomControl : PropertyControl, IControlContainer { public List<SimpleControl> Controls { get; set; } public MyCustomControl(string propertyName) : base(propertyName) { Controls = new List<SimpleControl>(); } protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); materialEditor.RangeProperty(Property, Content.text); HasPropertyUpdated = EditorGUI.EndChangeCheck(); } public void AddControl(SimpleControl control, string alias = \"\") => Controls.AddControl(control, alias); public IEnumerable<SimpleControl> GetControlList() => Controls; } } Some notable mentions here: The 2 methods implementation being done in an unusual way, this is for the most part just a \"shortcut\" that can be done when the method implementation consist in only one operation (if you're not comfortable with it, you can just write it like you're used to, the result is the same). We use Controls.AddControl(control, alias) to add the control in the list. AddControl applied to this list is a method that automatically adds the control after a control with the given alias, this should be the default implementation of an IControlContainer AddControl , and eventual custom implementations (if you don't use something that can be cast into an IList ) should be implemented in a similar way. The RangeProperty method for some reason doesn't have an overload that accepts a GUIContent , so we had to pass just the text string of it (unity pls fix this thanks). Now our control properly displays any float property that is being given to it, but if you add any control to this one they will simply not display, that's cause it's our responsibility to handle that: materialEditor.RangeProperty(Property, Content.text); HasPropertyUpdated = EditorGUI.EndChangeCheck(); if (Property.floatValue > 0.5f) { foreach (SimpleControl control in Controls) { control.DrawControl(materialEditor); } } } We first check if the property has its value above 0.5 and cycle all controls inside our list to draw them. If you try to move the slider around you will see that other controls added to this control will show up as soon as you surpass 0.5 . Tip As you probably noticed, we use the DrawControl method to display a control's content, but we usually override ControlGUI when deciding what to display in our controls. This is cause DrawControl internally calls ControlGUI , but it also does additional checks, like checking if the control should be visible to begin with, or if should be in a disabled state. Finished example class using System.Collections.Generic; using UnityEditor; using VRLabs.SimpleShaderInspectors; namespace TestControlNamespace { public class MyCustomControl : PropertyControl, IControlContainer { public List<SimpleControl> Controls { get; set; } public MyCustomControl(string propertyName) : base(propertyName) { Controls = new List<SimpleControl>(); } protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); materialEditor.RangeProperty(Property, Content.text); HasPropertyUpdated = EditorGUI.EndChangeCheck(); if (Property.floatValue > 0.5f) { foreach (SimpleControl control in Controls) { control.DrawControl(materialEditor); } } } public void AddControl(SimpleControl control, string alias = \"\") => Controls.AddControl(control, alias); public IEnumerable<SimpleControl> GetControlList() => Controls; } }"
  },
  "Next/guides/ControlsDevelopment/INonAnimatableProperty.html": {
    "href": "Next/guides/ControlsDevelopment/INonAnimatableProperty.html",
    "title": "Using INonAnimatableProperty | Simple Shader Inspectors Documentation",
    "keywords": "Using INonAnimatableProperty When you're recording an animation every change you do gets recorded, material property changes included. But sometimes you don't want certain properties to be animated, cause maybe you're using them in a way that animating them would look weird, or simply is not something you want to be recorded if you happen to change it while the animation is recording. The INonAnimatableProperty interface will help you with that by giving you the possibily separate the code that updates the property in a dedicated method that will never get called when the animation is recording, and notify the inspector that it needs to update a property outside the recording Tip SimpleShaderInspector keeps track of controls with this interface and when it detects that some of them need to write updates to a property it will stop the animation recording if it was running, updates the non animatable property values, and then restarts the animation recording if it was stopped. Warning Due to the need of using Reflection to stop and restart the animation recording, with the consequent performance cost, this system is disabled by default in any inspector and to activate it the user needs to set the HasNonAnimatableProperties inspector property to true during startup. If a non animatable property control is used when the system is disabled, the update code will run without checking the recording state. Let's take our template code with INonAnimatableProperty implemented: using UnityEditor; using VRLabs.SimpleShaderInspectors; public class MyCustomControl : PropertyControl, INonAnimatableProperty { public bool NonAnimatablePropertyChanged { get; set; } public MyCustomControl(string propertyName) : base(propertyName) { } protected override void ControlGUI(MaterialEditor materialEditor) { } public void UpdateNonAnimatableProperty(MaterialEditor materialEditor) { } } INonAnimatableProperty requires you to implement 1 property and one method: NonAnimatablePropertyChanged is used to let the inspector know that in this frame a material property needs to update outside of the recording. UpdateNonAnimatableProperty is where we update the value of our MaterialProperty without being recorded. Let's add a basic slider functionality o the class: using UnityEditor; using VRLabs.SimpleShaderInspectors; public class MyCustomControl : PropertyControl, INonAnimatableProperty { public bool NonAnimatablePropertyChanged { get; set; } public MyCustomControl(string propertyName) : base(propertyName) { } protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); materialEditor.RangeProperty(Property, Content.text); HasPropertyUpdated = EditorGUI.EndChangeCheck(); } public void UpdateNonAnimatableProperty(MaterialEditor materialEditor) { } } In this current state the control will still record the changes into the animation for 2 reasons: We don't tell the inspector that we have a property to update outside of it We're updating the property inside ControlGUI The first one is easy to solve, we just need to set NonAnimatablePropertyChanged to true if the property has changed: HasPropertyUpdated = EditorGUI.EndChangeCheck(); NonAnimatablePropertyChanged = HasPropertyUpdated; As for the second one, things may get a bit trickier. We cannot rely on materialEditor to draw our property, cause the property will get automatically updated, so we need to do it ourself with EditorGUILayout . We also need to store the value we get back so that we can apply it to the property afterwards: public bool NonAnimatablePropertyChanged { get; set; } private float _newValue; protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); _newValue = EditorGUILayout.Slider(Content, Property.floatValue, Property.rangeLimits.x, Property.rangeLimits.y); HasPropertyUpdated = EditorGUI.EndChangeCheck(); NonAnimatablePropertyChanged = HasPropertyUpdated; } And then we update the material property value inside UpdateNonAnimatableProperty : public void UpdateNonAnimatableProperty(MaterialEditor materialEditor) { Property.floatValue = _newValue; } And with this, now our material property should update correctly without being recorded in the animation. Finished example class using UnityEditor; using VRLabs.SimpleShaderInspectors; public class MyCustomControl : PropertyControl, INonAnimatableProperty { public bool NonAnimatablePropertyChanged { get; set; } private float _newValue; public MyCustomControl(string propertyName) : base(propertyName) { } protected override void ControlGUI(MaterialEditor materialEditor) { EditorGUI.BeginChangeCheck(); _newValue = EditorGUILayout.Slider(Content, Property.floatValue, Property.rangeLimits.x, Property.rangeLimits.y); HasPropertyUpdated = EditorGUI.EndChangeCheck(); NonAnimatablePropertyChanged = HasPropertyUpdated; } public void UpdateNonAnimatableProperty(MaterialEditor materialEditor) { Property.floatValue = _newValue; } }"
  },
  "Next/guides/index.html": {
    "href": "Next/guides/index.html",
    "title": "Welcome to the General Guides Section | Simple Shader Inspectors Documentation",
    "keywords": "Welcome to the General Guides Section Here you will find general guides on how to use Simple Shader Inspectors. If you're a first time user you may want how to get started here"
  },
  "Next/guides/InspectorDevelopment/BasicControls.html": {
    "href": "Next/guides/InspectorDevelopment/BasicControls.html",
    "title": "Basic controls | Simple Shader Inspectors Documentation",
    "keywords": "Basic Controls On Simple Shader Inspectors you show fields using different types of controls based on what you need to display. Need to show a texture? use TextureControl , want a color instead? use ColorControl and so on. If you check the API you will see that you have a fair amount of options regarding controls to use, included some really specific (but powerful) ones, but here we summarize some of the most basics ones that you will probably end up using a lot. PropertyControl AddPropertyControl(propertyName); This is the definition of basic, will just display the material property like the inspector would do automatically (it uses MaterialEditor.ShaderProperty ). It can come really useful when a property doesn't need anything fancy to display and is already nicely done automatically, for example a range property. This is also the base control that all controls that use material properties inherit from. It also has an optional settings area that contains tiling and offset settings and can contain other controls as well. TextureControl AddTextureControl(texturePropertyName, extraPropertyName1, extraPropertyName2); TextureControl , as the name says, is used to display textures. Internally uses materialEditor.TexturePropertySingleLine to display its properties, and like the latter can take up to 2 extra properties to show in the same line as the texture. Tip Despite having up to 3 properties, you still only have access to the usual HasPropertyUpdated bool to check if any of the 3 properties changed. ColorControl AddColorControl(string colorPropertyName); While you can show color properties just fine with a PropertyControl you end up having the color box taking up the entirety of the row, and that doesn't match with the color box that is being shown with a TextureControl . So this control fixes that. It can also take an additional boolean value to indicate if the color box (and color picker) needs to handle the alpha channel (by default it's set to true ). LabelControl AddLabelControl(string alias); It's one of those controls that does not use any property and instead requires you to insert an Alias to get its own localization. In this case it draws a simple label with nothing more going on."
  },
  "Next/guides/InspectorDevelopment/ChainingMethods.html": {
    "href": "Next/guides/InspectorDevelopment/ChainingMethods.html",
    "title": "Chaining methods | Simple Shader Inspectors Documentation",
    "keywords": "Chaining methods Let's take the following line from our example inspector in getting started : _floatControl = this.AddPropertyControl(\"_FloatProperty\").WithAlias(\"MyFloatProperty\"); In this single line there's quite a bit going on. first it creates a new PropertyControl for our _FloatProperty and assigns it to an internal list. Then it takes this control and change its Alias to \"MyFloatProperty\" . Finally the control is assigned to our local _floatControl field. If you ever used the method syntax in LINQ you are probably already familiar with this, but if you never used it you may be slightly confused by the above line, since usually you would be more used to something like this: _floatControl = new PropertyControl(\"_FloatProperty\"); _floatControl.PropertyAlias = \"MyFloatProperty\"; this.Controls.Add(_floatControl); In terms of what they do they are equivalent, but in the first case we use methods that give the control itself as a return value, giving you the possibility to \"chain up\" another method call to do something else, or to assign that control to a variable to use later. By manipulating controls this way we can reduce the code needed to do the same amount of things, and keep it relatively simple to read. The advantages of it become more apparent on more complex controls where you want to optionally modify different stuff on the spot: _section = this.AddSection(\"MySectionAlias\").WithBackgroundColor(Color.red) .WithIncludeControlsInHeader(true).WithShowFoldoutArrow(false).WithEnabled(false); _section = new Section(); _section.PropertyAlias = \"MySectionAlias\"; _section.BackgroundColor = Color.red; _section.AreControlsInside = true; _section.ShowFoldoutArrow = false; _section.IsEnabled = false; this.Controls.Add(_section); As you can see, in this case we saved the need to write up a fairly sizeable amount of code just to initialize our _section control by chaining up method calls. Tip The Section control is a particular control that can help you a lot to organize an inspector, we talk more in depth about it in this page . Every control can have its own dedicated extension methods, and controls derived from other controls also inherit them. If you want to know what extension methods a control has you can check up the API. Default extension methods These extension methods are available to all controls since they are inherited from the SimpleControl base class: WithAlias(string alias) Set a custom alias for control localization. This is like a unique identifier that the inspector can use when looking for localization data. WithVisible(bool visible) Set if the control should be visible or not. WithEnabled(bool enabled) Set if the control should be enabled or not. Extension constructor methods As we saw until now, to avoid having to manually assign a control to the internal list of the inspector we use this.Add*YourControlNameHere* , this internally creates a new control and assigns it to the object in which you called the method from (in our case this , or in other words out inspector). This is not limited to the inspector itself, since these methods will work on anything that implements the IControlContainer interface ( SimpleShaderInspector itself implements this interface). This means that controls themself can contain more controls inside themself, and they will control how to display them. Tip Extension methods like the ones we've seen here are particular, they're technically not part of the class itself, but can be applied to that class as if it was part of it. The main limitation is that since extension methods are not part of the class they can only access to public properties or methods of the class they're targeting. This is also the reason to why we need to use this. when calling one of these methods in the inspector. For example if we have a ToggleDropdownControl called toggle we can add a PropertyControl in it by doing: toggle.AddPropertyControl(\"_MyPropertyName\"); Tip ToggleDropdownControl is a toggle that when enabled will display other controls underneath itself, is useful when you need to make some properties visible only if something is enabled."
  },
  "Next/guides/InspectorDevelopment/DistributingYourShader.html": {
    "href": "Next/guides/InspectorDevelopment/DistributingYourShader.html",
    "title": "Distributing your shader | Simple Shader Inspectors Documentation",
    "keywords": "Distributing Your Shader If you're making a customized shader inspector you probably belong in 1 of these 2 categories: you're making a shader for internal use in your dev team and you need to be sure that's easy to use for your artists. you're making a shader with the purpose of distributing it. In the first case you're good to go, as long as you included the Simple Shader Inspectors package in your team's project it will work fine. However in the second case you'll have the problem of distributing it, since it has our library as a dependency, and be sure that it won't cause problems in the eventuality that the end user's project already has some shader using our library, which may end up causing duplicate script errors or incompatibilities. Currently these are the ways we currently encourage to distribute our library with your shaders: Reference to our package Repository The first and simplest way is to not include our library directly but inform the end user that Simple Shader Inspectors is a requirement for your shader in order to work. Pros: Is the easiest method. Slimmer package. Cons: Is responsibility of the user to install our library, resulting in higher chance of user error. If some breaking changes happen within our library, you will have to update your editor to support it, or you end up having users downloading the latest version of our library and having it not work with your shader. Include our code in your unity package Since Simple Shader Inspector is under MIT, you can freely include it in your unitypackage. If your main distribution method is Github (or equivalents), you can also include it in just the release package without the need to include it in your source code as well (in this case mention it in your README). Warning If you choose this method, please be sure to leave it in its default location and that its component's GUID did not change (you can test that by deleting our package and then reimport it, if you get console warning about duplicate GUID it means that unity changed that, in this case please move everything in a new project with our package installed first). Pros: The user doesn't have to do additional steps. Doesn't need to be included in the source code itself as long as its included in the downloadable package. Cons: It has the possibility of ending up with duplicate scripts if the user has also installed a shader that did not respected the above warning. If the user downloads a shader that uses a newer version of our library it will override the version you have included, and if the newer version has some breaking changes, your inspector won't work, so you need to keep your shader inspector up to date with our library version. Embed our code in your editor folder This is by far the safest way to include our library in your shader, by making a copy of the necessary code into a separate folder inside your shader, under your namespace. We also included a tool to help you in the process by automatically copying the classes in your editor folder and change namespace to one defined by you. Remember to update your inspector's namespace using references. Pros: As long as you put your original namespace, you won't have code conflicts even if there are multiple copies of it from different shaders. The user doesn't have to do additional steps. Cons: If you want to use newer versions of Simple Shader Inspectors you will need to redo the entire process. The user may not understand that your shader is actually using an additional library and may confuse eventual bugs inside our library as bug in your shader inspector. Final thoughts As you can see there are multiple takes on the situation, each with pros and cons, choose one depending on your workflow. For example if you have a large audience not including the library at all and just mention that it has a requirement could end up in receiving a lot help requests from users unaware of the requirement, cause they may have downloaded your shader without consulting the README first. In our experiments we found out that embedding the code tends to be best compromise in terms of advantages vs disadvantages, especially considering that the embedding process can be done via editor tool. On top of that if you operate this way is fairly easy to check what we changed between versions if you use some kind of version control system, since you would be seeing exactly what files where changed,"
  },
  "Next/guides/InspectorDevelopment/GettingStarted.html": {
    "href": "Next/guides/InspectorDevelopment/GettingStarted.html",
    "title": "Getting started | Simple Shader Inspectors Documentation",
    "keywords": "Getting Started First of all, we need to import the unity package with the asset, if you haven't downloaded yet go here and grab the latest version. Once everything is imported let's start building out first inspector! Creating a new Inspector If you made shader inspectors before you know that we usually inherit from ShaderGUI to build an inspector. But in our case we will need to inherit from SimpleShaderInspector instead. SimpleShaderInspector itself is derived from ShaderGUI so Unity will recognize it as a valid shader inspector and assign it to shaders that will ask for it. Here is an example custom inspector: using UnityEditor; using VRLabs.SimpleShaderInspectors; using VRLabs.SimpleShaderInspectors.Controls; public class TestShaderInspector : SimpleShaderInspector { protected override void Start() { } } As you can see, there is no OnGUI override, but there is a Start override instead. The concept of Simple Shader Inspectors is to declare the controls we want to draw and which MaterialProperties they control, and leaving the actual drawing and checking of material property changes to the inspector. Let's say that we have a MaterialProperty named \"_FloatProperty\" that we want to display, all we need to do is: protected override void Start() { this.AddPropertyControl(\"_FloatProperty\"); } AddPropertyControl is the most basic control available and is comparable to MaterialEditor.ShaderProperty in terms of what it draws to the ui. Notice the keyword this used at the beginning. if you've done a bit of programming before you should know that normally you can omit it, but in our case is necessary to use it, and if you try to remove it you will encounter a compilation error. In this page we explain why we need it, but it's not necessary to know right now. Localization If you try to check how the inspector looks now when you select a material you will notice 2 things: It shows the property with its default name. Now in your shader's folder you have a Localization folder. If you go into the Localization folder and then select the folder with the same name of your shader, you see that you have a English.json and a Settings.json file. The latter one is used by the inspector and we can leave that be, what we are interested in is the English.json file. This file contains all the controls needed text to display and is initially built based on what controls are declared in the inspector. If we open the one we generated it will only include an entry with 3 strings: { \"Properties\": [ { \"Name\": \"_FloatProperty\", \"DisplayName\": \"_FloatProperty\", \"Tooltip\": \"\" } ] } As you add more controls into the inspector, more entries will appear here. By default the Name will be the control alias. This alias depending on the type of control can be either a material property name (if the control has one), or an arbitrary name. In any case you can change an alias by calling WithAlias(newName) . protected override void Start() { this.AddPropertyControl(\"_FloatProperty\").WithAlias(\"MyFloatProperty\"); } Tip We will talk about .WithAlias and similarly structured methods in this page . After we reopened the inspector again with this change it will update the localization file: { \"Properties\": [ { \"Name\": \"MyFloatProperty\", \"DisplayName\": \"MyFloatProperty\", \"Tooltip\": \"\" }, { \"Name\": \"_FloatProperty\", \"DisplayName\": \"_FloatProperty\", \"Tooltip\": \"\" } ] } As you can see the new name entry has been added. This comes really handy when you have multiple controls that take in the same property, since by default they would use the same entry. Note The inspector will never delete old/unused entries to avoid losing stuff that you may need in the future, so is your job to clean up unwanted entries. Let's clean up the file and set both DisplayName and Tooltip to what we want to show: { \"Properties\": [ { \"Name\": \"MyFloatProperty\", \"DisplayName\": \"Awesome float property\", \"Tooltip\": \"Nice tooltip!\" } ] } Now is time for the fun part, duplicate English.json and rename it to Not english.json and modity it like this: { \"Properties\": [ { \"Name\": \"MyFloatProperty\", \"DisplayName\": \"Aledoye flget prodfrghy\", \"Tooltip\": \"I can't write!\" } ] } Now if you reload the inspector you will see this: If you select the dropdown that just appeard you will see a new option: Not english . By selecting that the inspector will immediately swap out the localization with what you have selected. The inspector will keep the selected language until you change it back (that's what Settings.json is used for). This is really useful in case you want to target multiple countries with your shader and also cleans up the inspector script from having a wall of text with all the label names and tooltips. Localization Editor Window Editing localization files manually can become quite annoying over time, especially when the inspector starts to grow bigger and bigger. Fortunately, you don't have to edit them manually, but you can use the localization editor window provided by Simple Shader Inspectors. You can find it in VRLabs/Simple Shader Inspectors/Localization file editor . After you open the window there will be only one button that will prompt you to select the localization file to add, and once opened you will be greeted by a way more manageable UI with a list of the properties available and an area where you can edit the selected one. Check changes Now we know how to show a control for a property and how to change its label content, but what about doing something specific in case a property has changed? Before doing anything, you should really check in the API if there is a control that already does what you want by its own. In case the answer is no or you simply want to set some values for various reasons you will need to override the CheckChanges method: protected override void StartChecks(MaterialEditor materialEditor) { } In here you can check if any control had property changes and react accordingly. Warning Despite looking really similar to OnGUI you should avoid drawing stuff in here directly. Right now we do not have any control available globally to check, and also have nothing we can do as a reaction, so let's modify the Start like this: private PropertyControl _floatControl; private LabelControl _labelControl; protected override void Start() { _floatControl = this.AddPropertyControl(\"_FloatProperty\").WithAlias(\"MyFloatProperty\"); _labelControl = this.AddLabelControl(\"MyLabel\"); } { \"Properties\": [ { \"Name\": \"MyLabel\", \"DisplayName\": \"Awesome label!\", \"Tooltip\": \"Nice tooltip!\" }, { \"Name\": \"MyFloatProperty\", \"DisplayName\": \"Awesome float property\", \"Tooltip\": \"Nice tooltip!\" } ] } Tip LabelControl is a basic control that just displays a label, the string passed is the Alias used for localization. All controls that do not contain a property will require an Alias. Now that we assigned those 2 controls to a variable we can check the changes of the first one: protected override void CheckChanges(MaterialEditor materialEditor) { if (_floatControl.HasPropertyUpdated) { _labelControl.SetEnabled(_floatControl.Property.floatValue > 1); } } Here we check if _floatControl had a change and if it had one we set the enabled state of _labelControl to true if the property value is above 1 or false otherwise. Tip Almost all controls give you direct access to their MaterialProperty with the Property field. Some controls may give you access to additional MaterialProperty objects they manage. You can see if a control gives you access to additional properties by checking the API. Now we can go back to our inspector and see that now the label gets correctly disabled or enabled based on the value of _floatProperty. Checks during inspector initialization Now we can check whenever a property changes value and react consequently, but it doesn't react during initialization. The first idea is to do the preliminary checks inside the Start function, but if you already tried that you noticed that whenever you try to access a material property you will get a NullRefereneException . This is normal, cause while we did initialized controls correctly, the inspector did not have the time to fetch the desired material property yet. That's where the StartChecks override comes in. This function is still called during the first initialization, but in this phase material properties will have been fetched. So we can put all our needed checks there. You can also put here all checks you want to do only during initialization that require a value from a material property. protected override void StartChecks(MaterialEditor materialEditor) { _labelControl.SetEnabled(_floatControl.Property.floatValue > 1); } Now the inspector responds correctly during initialization as well. Finished example class This is our final result for this first inspector: using UnityEditor; using VRLabs.SimpleShaderInspectors; using VRLabs.SimpleShaderInspectors.Controls; public class TestShaderInspector : SimpleShaderInspector { private PropertyControl _floatControl; private LabelControl _labelControl; protected override void Start() { _floatControl = this.AddPropertyControl(\"_FloatProperty\").WithAlias(\"MyFloatProperty\"); _labelControl = this.AddLabelControl(\"MyLabel\"); } protected override void StartChecks(MaterialEditor materialEditor) { _labelControl.SetEnabled(_floatControl.Property.floatValue > 1); } protected override void CheckChanges(MaterialEditor materialEditor) { if (_floatControl.HasPropertyUpdated) { _labelControl.SetEnabled(_floatControl.Property.floatValue > 1); } } } From here you can continue by adding more controls and checks as you need them. Tip In this example we ended up assigning all created controls to local variables, but as you saw in the first steps of the guide you don't need to assign every control to have it shown."
  },
  "Next/guides/InspectorDevelopment/Sections.html": {
    "href": "Next/guides/InspectorDevelopment/Sections.html",
    "title": "Sections | Simple Shader Inspectors Documentation",
    "keywords": "Sections Sections are a family of controls that help organizing your inspector by grouping controls in dropdowns with nice headers, and they're so awesome that we needed to make a dedicated section just for them (no pun intended, ok maybe a bit). The main concept is simple: you create a section based on your needs, and then you add a number of controls to it with the usual Add*YourControlNameHere* , but applied to your section control instead of this . You can even add a section inside your section if you want. Right now there are 3 types of sections available and they each have their own use case. Section AddSection(); This is the basic section with no fancy extras to it, and, as we already seen with the LabelControl , since it doesn't have any material property it will have a default Alias that will be the same for every section control, so it's advised to assign a custom one. It also is the base class of the other 2 types of sections, so everything that is available here will be available on those as well. Practically speaking it doesn't have too much in terms of functionality, click on the header to toggle the visibility on and off, and that's it . You do however have quite a bit of appearance customizability with its extension methods. For example you can change the color of the header background with .WithBackgroundColor or change the label style with .WithLabelStyle , or you can change the background itself by changing its style with .WithBackgroundStyle . ActivatableSection AddActivatableSection( string activatePropertyName, float enableValue = 0, float disableValue = 1); This type of section on top of having everything the basic Section has it also has an additional checkbox in its header, and this checkbox is driven by the property you pass it during creation. Also unlike the basic Section this one has a property and as a consequence it won't be required to set an Alias . The checkbox will control if the content of the section will be enabled or not, and in case it is disabled all the controls under this section will be disabled and not modifiable. Currently this section does not have chainable methods on top of what is already available from Section . OrderedSection AddOrderedSection(string activatePropertyName, float enableValue = 1, float disableValue = 0); This type of section could be interpreted as a different implementation of ActivatableSection since it works similarly on the surface, but there's one problem, you can't create it with the usual this.AddOrderedSection this time. Caution You could create a new OrderedSection using its default constructor, but you should not do that. You would not get a working section out of that anyways. The only legitimate way to create an OrderedSection is to call the .AddOrderedSection from an OrderedSectionGroup control that will manage its lifecycle. So the question now is: what is an OrderedSectionGroup ? First of all, it's a control, and therefore is used like all other controls. That said when first created without any OrderedSection assigned to it will just do nothing, but as soon as you add an OrderedSection to it a button will appear, and clicking it will generate a popup where you can select any disabled OrderedSection it has. Any enabled OrderedSection will be above this button. The section itself looks mostly like the basic Section , but it has some additional buttons on the right side. The 2 arrows allow you to reorded the section relative to the other sections inside the OrderedSectionGroup , meanwhile the x button will disable the section, making it completely disappear from the inspector until you re-enable it from the section group button. All of these icons can be customized by making a new style for them with a different background image. Using properties for Visibility All the sections we've seen keep memorized their visibility state per each material internally, while this is good enough for the majority of use cases, it can lose the memorized state when if you haven't edited the material in a while, since the data regarding the state is removed after 30 days of not being used, resulting on all sections being closed when that happens. As an alternative solution for that (or in case you want to keep the visibility state tracked in a MaterialProperty ) you can use pass another property to the constructor. This property will be used to keep track of the visibility state, and you can also add 2 float values to tell the section what value should set when visible and what value set when not visible. Note A basic Section created this way will use the visibility property Alias and not rely on the default one. Caution You can create float properties in you shader property list without using them in the shader code, just to keep track of the visibility state of section. Just beware that is usually not considered best practice to do that. When using this method to create sections you also can decide if the property used for the visibility state will be recorded or not when you're recording an animation by using WithIsPropertyAnimatable ."
  },
  "Next/guides/InspectorDevelopment/TextureGenerator.html": {
    "href": "Next/guides/InspectorDevelopment/TextureGenerator.html",
    "title": "Customizing The Texture Generator | Simple Shader Inspectors Documentation",
    "keywords": "Customizing The Texture Generator The TextureGeneratorControl is a really particular control, not only it is a good example of the level of complexity that a single control can reach in terms of functionality, but it is also an example of how is possible to make controls driven mainly by data and therefore customizable for the specific need. For example if there's a need to take a color mask and apply a specific color for each channel, we can just make a shader that does that and give it to the texture generator. But what do you need to do in order to accomplish that? Creating the shader First of all, you need the shader that does what you want. We won't go too much into the details on how a shader works here since there are better guides elsewhere for that, but we will run down the main things that are important to get the shader to work in our context. First of all, create the shader and call it however you want, in our case we call it maskColorizer . Then just paste this code: Shader \"Hidden/VRLabs/GeneratorShaders/MaskColorizer\" { Properties { _MainTex (\"Mask\", 2D) = \"white\" {} } SubShader { Lighting Off Blend One Zero Pass { CGPROGRAM #include \"UnityCustomRenderTexture.cginc\" #pragma vertex CustomRenderTextureVertexShader #pragma fragment frag #pragma target 3.0 UNITY_DECLARE_TEX2D(_MainTex); float4 _MainTex_ST; fixed4 frag (v2f_customrendertexture i) : SV_Target { return float4(0,0,0,0); } ENDCG } } This code template is used for the shader to work with the texture generator, since it has to render to a Custom Render Texture. Note To avoid to clutter up the shader selector in a material, we start the shader path with Hidden/ , since the shader is not meant to be used for materials anyways. Note for more informations on the basics for a shader for Custom Render Textures, check the official Unity docs . From here, you can implement whatever logic you want to make the shader output whatever you want from the properties you pass as inputs. Shader \"Hidden/VRLabs/GeneratorShaders/MaskColorizer\" { Properties { _MainTex (\"Mask\", 2D) = \"white\" {} _BaseColor(\"Base Color\", Color) = (1, 1, 1, 1) _RedColor(\"Red Channel Color\", Color) = (1, 1, 1, 1) _GreenColor(\"Green Channel Color\", Color) = (1, 1, 1, 1) _BlueColor(\"Blue Channel Color\", Color) = (1, 1, 1, 1) _AlphaColor(\"Alpha Channel Color\", Color) = (1, 1, 1, 1) } SubShader { Lighting Off Blend One Zero Pass { CGPROGRAM #include \"UnityCustomRenderTexture.cginc\" #pragma vertex CustomRenderTextureVertexShader #pragma fragment frag #pragma target 3.0 UNITY_DECLARE_TEX2D(_MainTex); float4 _MainTex_ST; float4 _BaseColor, _RedColor, _GreenColor, _BlueColor, _AlphaColor; fixed4 frag (v2f_customrendertexture i) : SV_Target { float4 mask = UNITY_SAMPLE_TEX2D(_MainTex, i.localTexcoord.xy); float4 rgba = _BaseColor; rgba = lerp(rgba, _RedColor, mask.r); rgba = lerp(rgba, _GreenColor, mask.g); rgba = lerp(rgba, _BlueColor, mask.b); rgba = lerp(rgba, _AlphaColor, mask.a); return rgba; } ENDCG } } Creating the inspector for the generator shader Now that we have a shader, we can tell the generator to use this shader, and the generator will show a default inspector for the shader. But we can do better than that. The generator is smart enough to detect if the shader uses a custom ShaderGUI (it won't detect if it uses a custom MaterialEditor and will revert back to a default inspector in that case) and use said ShaderGUI to show up the properties. This means that you can customize the editor to whatever you want by just making a custom inspector. The library also provides a special type of inspector called TextureGeneratorShaderInspector to inherit from for texture generators, which will let the generator to pass on localization from the main shader inspector to the generator's shader inspector, making the localization of the generator shader dependent on the shader it's used from. using VRLabs.SimpleShaderInspectors; using VRLabs.SimpleShaderInspectors.Controls; namespace VRLabs.Examples { public class MaskColorizerInspector : TextureGeneratorShaderInspector { protected override void Start() { this.AddTextureControl(\"_MainTex\").WithAlias(\"Colorizer_Mask\"); this.AddSpaceControl(10); this.AddColorControl(\"_BaseColor\").WithAlias(\"Colorizer_BaseColor\"); this.AddColorControl(\"_RedColor\").WithAlias(\"Colorizer_RedColor\"); this.AddColorControl(\"_GreenColor\").WithAlias(\"Colorizer_GreenColor\"); this.AddColorControl(\"_BlueColor\").WithAlias(\"Colorizer_BlueColor\"); this.AddColorControl(\"_AlphaColor\").WithAlias(\"Colorizer_AlphaColor\"); } } } Now just add CustomEditor \"VRLabs.Examples.MaskColorizerInspector\" to the shader, with that the generator will use the custom inspector. Using the custom generator Now that we have both the shader and the inspector we can use the shader on our TextureGeneratorControl . The easiest way is to put the shader and inside an Editor/Resources folder, so what we can easily load them using Resources.Load , but you can use whatever method you want to load it. In this example the file will be inside a Editor/Resources/Shader folder. // inside the inspector Shader shader = Resources.Load<Shader>(\"Shader/maskColorizer\"); this.AddTextureGeneratorControl(shader, \"_TextureProperty\"); And now the generator is ready to go and be used, give it a try! Now this was a fairly simple example of a shader, but you can go with much much more complex shaders to do more advanced stuff."
  },
  "v0.1.0/api/index.html": {
    "href": "v0.1.0/api/index.html",
    "title": "Welcome to the API Section | Simple Shader Inspectors Documentation",
    "keywords": "Welcome to the API Section Here you will find the documentation of each publicly available classes within the API."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.CreatLocalizationArrayFromNames.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.CreatLocalizationArrayFromNames.html",
    "title": "Method CreatLocalizationArrayFromNames | Simple Shader Inspectors Documentation",
    "keywords": "Method CreatLocalizationArrayFromNames CreatLocalizationArrayFromNames(String[]) Declaration public static AdditionalLocalization[] CreatLocalizationArrayFromNames(string[] contentNames) Parameters Type Name Description String [] contentNames Returns Type Description AdditionalLocalization []"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.html",
    "title": "Class AdditionalContentExtensions | Simple Shader Inspectors Documentation",
    "keywords": "Class AdditionalContentExtensions Inheritance Object AdditionalContentExtensions Namespace : VRLabs.SimpleShaderInspectors Syntax public static class AdditionalContentExtensions Methods Name Description CreatLocalizationArrayFromNames(String[]) InizializeLocalizationWithNames(IAdditionalLocalization, String[])"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.InizializeLocalizationWithNames.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalContentExtensions.InizializeLocalizationWithNames.html",
    "title": "Method InizializeLocalizationWithNames | Simple Shader Inspectors Documentation",
    "keywords": "Method InizializeLocalizationWithNames InizializeLocalizationWithNames(IAdditionalLocalization, String[]) Declaration public static void InizializeLocalizationWithNames(this IAdditionalLocalization obj, string[] contentNames) Parameters Type Name Description IAdditionalLocalization obj String [] contentNames"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Content.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Content.html",
    "title": "Property Content | Simple Shader Inspectors Documentation",
    "keywords": "Property Content Content GUIContent containing the localized content. Declaration public GUIContent Content { get; set; } Property Value Type Description GUIContent"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.html",
    "title": "Class AdditionalLocalization | Simple Shader Inspectors Documentation",
    "keywords": "Class AdditionalLocalization This class is a simple class containing a Name used for finding the localization content and a GUIContent object containing said content. Inheritance Object AdditionalLocalization Namespace : VRLabs.SimpleShaderInspectors Syntax public class AdditionalLocalization Properties Name Description Content GUIContent containing the localized content. Name Name of the additional localized content."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Name.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalLocalization.Name.html",
    "title": "Property Name | Simple Shader Inspectors Documentation",
    "keywords": "Property Name Name Name of the additional localized content. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.-ctor.html",
    "title": "Constructor AdditionalProperty | Simple Shader Inspectors Documentation",
    "keywords": "Constructor AdditionalProperty AdditionalProperty(String) Default constructor of AdditionalProperty. Declaration public AdditionalProperty(string propertyName) Parameters Type Name Description String propertyName Name of the materialProperty to fetch."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.html",
    "title": "Class AdditionalProperty | Simple Shader Inspectors Documentation",
    "keywords": "Class AdditionalProperty This class defines an additional property. Inheritance Object AdditionalProperty Namespace : VRLabs.SimpleShaderInspectors Syntax public class AdditionalProperty Constructors Name Description AdditionalProperty(String) Default constructor of AdditionalProperty. Properties Name Description Property MaterialProperty containing the additional property needed by the control. PropertyName String containing the additional property name."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.Property.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.Property.html",
    "title": "Property Property | Simple Shader Inspectors Documentation",
    "keywords": "Property Property Property MaterialProperty containing the additional property needed by the control. Declaration public MaterialProperty Property { get; } Property Value Type Description MaterialProperty"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.PropertyName.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.AdditionalProperty.PropertyName.html",
    "title": "Property PropertyName | Simple Shader Inspectors Documentation",
    "keywords": "Property PropertyName PropertyName String containing the additional property name. Declaration public string PropertyName { get; } Property Value Type Description String"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.BaseControlExtensions.AddPropertyControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.BaseControlExtensions.AddPropertyControl.html",
    "title": "Method AddPropertyControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddPropertyControl AddPropertyControl(IControlContainer, String) Creates a new control of type PropertyControl and adds it to the current container. Declaration public static PropertyControl AddPropertyControl(this IControlContainer container, string propertyName) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String propertyName Material property name. Returns Type Description PropertyControl The PropertyControl object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.BaseControlExtensions.Alias.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.BaseControlExtensions.Alias.html",
    "title": "Method Alias | Simple Shader Inspectors Documentation",
    "keywords": "Method Alias Alias<T>(T, String) Set a custom alias for control localization. Declaration public static T Alias<T>(this T control, string alias) where T : SimpleControl Parameters Type Name Description T control The control this extension method is used on. String alias Name used for localization. Returns Type Description T The control modified. Type Parameters Name Description T Type of the control. Has to be child of SimpleControl."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.BaseControlExtensions.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.BaseControlExtensions.html",
    "title": "Class BaseControlExtensions | Simple Shader Inspectors Documentation",
    "keywords": "Class BaseControlExtensions Static class containing all control extension methods in the base namespace of Simple Shader Inspectors. Inheritance Object BaseControlExtensions Namespace : VRLabs.SimpleShaderInspectors Syntax public static class BaseControlExtensions Methods Name Description AddPropertyControl(IControlContainer, String) Creates a new control of type PropertyControl and adds it to the current container. Alias<T>(T, String) Set a custom alias for control localization. SetEnabled<T>(T, Boolean) Set if the control is enabled. SetVisibility<T>(T, Boolean) Set if the control is visible."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.BaseControlExtensions.SetEnabled.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.BaseControlExtensions.SetEnabled.html",
    "title": "Method SetEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Method SetEnabled SetEnabled<T>(T, Boolean) Set if the control is enabled. Declaration public static T SetEnabled<T>(this T control, bool enabled) where T : SimpleControl Parameters Type Name Description T control The control this extension method is used on. Boolean enabled If the control is enabled. Returns Type Description T The control modified. Type Parameters Name Description T Type of the control. Has to be child of SimpleControl."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.BaseControlExtensions.SetVisibility.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.BaseControlExtensions.SetVisibility.html",
    "title": "Method SetVisibility | Simple Shader Inspectors Documentation",
    "keywords": "Method SetVisibility SetVisibility<T>(T, Boolean) Set if the control is visible. Declaration public static T SetVisibility<T>(this T control, bool visible) where T : SimpleControl Parameters Type Name Description T control The control this extension method is used on. Boolean visible If the control is visible. Returns Type Description T The control modified. Type Parameters Name Description T Type of the control. Has to be child of SimpleControl."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.ComputeShaders.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.ComputeShaders.html",
    "title": "Class ComputeShaders | Simple Shader Inspectors Documentation",
    "keywords": "Class ComputeShaders Default compute shader assets and settings natively available in Simple Shader Inspectors. Inheritance Object ComputeShaders Namespace : VRLabs.SimpleShaderInspectors Syntax public static class ComputeShaders Properties Name Description RGBAPacker Compute shader that packs 4 texture channels into a single texture. RGBAPackerSettings default input settings for the RGBAPAcker compute shader."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.ComputeShaders.RGBAPacker.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.ComputeShaders.RGBAPacker.html",
    "title": "Property RGBAPacker | Simple Shader Inspectors Documentation",
    "keywords": "Property RGBAPacker RGBAPacker Compute shader that packs 4 texture channels into a single texture. Declaration public static ComputeShader RGBAPacker { get; } Property Value Type Description ComputeShader"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.ComputeShaders.RGBAPackerSettings.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.ComputeShaders.RGBAPackerSettings.html",
    "title": "Property RGBAPackerSettings | Simple Shader Inspectors Documentation",
    "keywords": "Property RGBAPackerSettings RGBAPackerSettings default input settings for the RGBAPAcker compute shader. Declaration public static string RGBAPackerSettings { get; } Property Value Type Description String"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.-ctor.html",
    "title": "Constructor ColorControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ColorControl ColorControl(String, Boolean) Default constructor of ColorControl Declaration public ColorControl(string propertyName, bool showAlphaValue = true) Parameters Type Name Description String propertyName Material property name. Boolean showAlphaValue Show alpha value in the color picker, Optional (default: true)."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.html",
    "title": "Class ColorControl | Simple Shader Inspectors Documentation",
    "keywords": "Class ColorControl Represents a control for a color property. Inheritance Object SimpleControl PropertyControl ColorControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class ColorControl : PropertyControl Constructors Name Description ColorControl(String, Boolean) Default constructor of ColorControl Properties Name Description ShowAlphaValue Boolan that determines if the color picker and the color field should show the alpha value. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean) ControlExtensions.SetShowAlphaValue<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.ShowAlphaValue.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ColorControl.ShowAlphaValue.html",
    "title": "Property ShowAlphaValue | Simple Shader Inspectors Documentation",
    "keywords": "Property ShowAlphaValue ShowAlphaValue Boolan that determines if the color picker and the color field should show the alpha value. Declaration public bool ShowAlphaValue { get; set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.Controls.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls under this control. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > Implements IControlContainer.Controls"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.-ctor.html",
    "title": "Constructor ControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ControlContainer ControlContainer() Default constructor of ControlContainer . Declaration public ControlContainer()"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlContainer.html",
    "title": "Class ControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Class ControlContainer Represents a group of conrols. Inheritance Object SimpleControl ControlContainer Implements IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class ControlContainer : SimpleControl, IControlContainer Constructors Name Description ControlContainer() Default constructor of ControlContainer . Properties Name Description Controls List of controls under this control. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.AddPropertyControl(IControlContainer, String) BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean) ControlExtensions.AddColorControl(IControlContainer, String, Boolean) ControlExtensions.AddControlContainer(IControlContainer) ControlExtensions.AddEnumControl<TEnum>(IControlContainer, String) ControlExtensions.AddGradientTextureControl(IControlContainer, String, String) ControlExtensions.AddKeywordToggleControl(IControlContainer, String) ControlExtensions.AddKeywordToggleListControl(IControlContainer, String) ControlExtensions.AddLabelControl(IControlContainer, String) ControlExtensions.AddLightmapEmissionControl(IControlContainer) ControlExtensions.AddSpaceControl(IControlContainer, Int32) ControlExtensions.AddTextureControl(IControlContainer, String, String, String) ControlExtensions.AddTextureGeneratorControl(IControlContainer, String, String, String) ControlExtensions.AddTilingAndOffsetControl(IControlContainer, String) ControlExtensions.AddToggleControl(IControlContainer, String, Single, Single) ControlExtensions.AddToggleListControl(IControlContainer, String, Single, Single) ControlExtensions.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) ControlExtensions.AddVertexStreamsControl(IControlContainer, String) SectionsControlExtensions.AddActivatableSection(IControlContainer, String, Single, Single) SectionsControlExtensions.AddPDActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) SectionControlExtensions.AddOrderedSectionGroup(IControlContainer, String) SectionControlExtensions.AddSection(IControlContainer, String) SectionControlExtensions.AddPDSection(IControlContainer, String, Single, Single)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddColorControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddColorControl.html",
    "title": "Method AddColorControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddColorControl AddColorControl(IControlContainer, String, Boolean) Creates a new control of type ColorControl and adds it to the current container. Declaration public static ColorControl AddColorControl(this IControlContainer container, string propertyName, bool showAlphaValue = true) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String propertyName Material property name. Boolean showAlphaValue Show alpha value in the color picker, Optional (default: true). Returns Type Description ColorControl The ColorControl object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddControlContainer.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddControlContainer.html",
    "title": "Method AddControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Method AddControlContainer AddControlContainer(IControlContainer) Creates a new control of type PropertyControl and adds it to the current container. Declaration public static ControlContainer AddControlContainer(this IControlContainer container) Parameters Type Name Description IControlContainer container Container of controls this method extends to. Returns Type Description ControlContainer The ControlContainer object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddEnumControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddEnumControl.html",
    "title": "Method AddEnumControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddEnumControl AddEnumControl<TEnum>(IControlContainer, String) Declaration public static EnumControl<TEnum> AddEnumControl<TEnum>(this IControlContainer container, string propertyName) where TEnum : Enum Parameters Type Name Description IControlContainer container String propertyName Returns Type Description EnumControl <TEnum> Type Parameters Name Description TEnum"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddGradientTextureControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddGradientTextureControl.html",
    "title": "Method AddGradientTextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddGradientTextureControl AddGradientTextureControl(IControlContainer, String, String) Creates a new control of type GradientTextureControl and adds it to the current container. Declaration public static GradientTextureControl AddGradientTextureControl(this IControlContainer container, string propertyName, string colorPropertyName = null) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String propertyName Gradient material property name. String colorPropertyName Gradient color property name. Returns Type Description GradientTextureControl The GradientTextureControl object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddKeywordToggleControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddKeywordToggleControl.html",
    "title": "Method AddKeywordToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddKeywordToggleControl AddKeywordToggleControl(IControlContainer, String) Creates a new control of type KeywordToggleControl and adds it to the current container. Declaration public static KeywordToggleControl AddKeywordToggleControl(this IControlContainer container, string keyword) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String keyword Keyword name. Returns Type Description KeywordToggleControl The KeywordToggleControl object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddKeywordToggleListControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddKeywordToggleListControl.html",
    "title": "Method AddKeywordToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddKeywordToggleListControl AddKeywordToggleListControl(IControlContainer, String) Creates a new control of type KeywordToggleListControl and adds it to the current container. Declaration public static KeywordToggleListControl AddKeywordToggleListControl(this IControlContainer container, string keyword) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String keyword Returns Type Description KeywordToggleListControl The KeywordToggleListControl object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddLabelControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddLabelControl.html",
    "title": "Method AddLabelControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddLabelControl AddLabelControl(IControlContainer, String) Creates a new control of type PropertyControl and adds it to the current container. Declaration public static LabelControl AddLabelControl(this IControlContainer container, string alias) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String alias Alias of the control. Returns Type Description LabelControl The LabelControl object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddLightmapEmissionControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddLightmapEmissionControl.html",
    "title": "Method AddLightmapEmissionControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddLightmapEmissionControl AddLightmapEmissionControl(IControlContainer) Creates a new control of type LightmapEmissionControl and adds it to the current container. Declaration public static LightmapEmissionControl AddLightmapEmissionControl(this IControlContainer container) Parameters Type Name Description IControlContainer container Returns Type Description LightmapEmissionControl The LightmapEmissionControl object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddSpaceControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddSpaceControl.html",
    "title": "Method AddSpaceControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddSpaceControl AddSpaceControl(IControlContainer, Int32) Creates a new control of type PropertyControl and adds it to the current container. Declaration public static SpaceControl AddSpaceControl(this IControlContainer container, int space = 0) Parameters Type Name Description IControlContainer container Container of controls this method extends to. Int32 space Space in pixels this control takes. Returns Type Description SpaceControl The object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddTextureControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddTextureControl.html",
    "title": "Method AddTextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddTextureControl AddTextureControl(IControlContainer, String, String, String) Creates a new control of type TextureControl and adds it to the current container. Declaration public static TextureControl AddTextureControl(this IControlContainer container, string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String propertyName Material property name. String extraPropertyName1 First additional material property name. Optional. String extraPropertyName2 Second additional material property name. Optional. Returns Type Description TextureControl The TextureControl object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddTextureGeneratorControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddTextureGeneratorControl.html",
    "title": "Method AddTextureGeneratorControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddTextureGeneratorControl AddTextureGeneratorControl(IControlContainer, String, String, String) Creates a new control of type TextureGeneratorControl and adds it to the current container. Declaration public static TextureGeneratorControl AddTextureGeneratorControl(this IControlContainer container, string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String propertyName Material property name. String extraPropertyName1 First additional material property name. Optional. String extraPropertyName2 Second additional material property name. Optional. Returns Type Description TextureGeneratorControl The TextureGeneratorControl object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddTilingAndOffsetControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddTilingAndOffsetControl.html",
    "title": "Method AddTilingAndOffsetControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddTilingAndOffsetControl AddTilingAndOffsetControl(IControlContainer, String) Creates a new control of type TilingAndOffsetControl and adds it to the current container. Declaration public static TilingAndOffsetControl AddTilingAndOffsetControl(this IControlContainer container, string propertyName) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String propertyName Material property name. Returns Type Description TilingAndOffsetControl The TilingAndOffsetControl object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddToggleControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddToggleControl.html",
    "title": "Method AddToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddToggleControl AddToggleControl(IControlContainer, String, Single, Single) Creates a new control of type ToggleControl and adds it to the current container. Declaration public static ToggleControl AddToggleControl(this IControlContainer container, string propertyName, float falseValue = 0F, float trueValue = 1F) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String propertyName Material property name. Single falseValue Float value that the material property will have if the checkbox is not checked. Optional (default: 0). Single trueValue Float value that the material property will have if the checkbox is checked. Optional (default: 1). Returns Type Description ToggleControl The ToggleControl object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddToggleListControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddToggleListControl.html",
    "title": "Method AddToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddToggleListControl AddToggleListControl(IControlContainer, String, Single, Single) Creates a new control of type ToggleListControl and adds it to the current container. Declaration public static ToggleListControl AddToggleListControl(this IControlContainer container, string propertyName, float falseValue = 0F, float trueValue = 1F) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String propertyName Material property name. Single falseValue Float value that the material property will have if the checkbox is not checked. Optional (default: 0). Single trueValue Float value that the material property will have if the checkbox is checked. Optional (default: 1). Returns Type Description ToggleListControl The ToggleListControl object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddVectorControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddVectorControl.html",
    "title": "Method AddVectorControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddVectorControl AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Creates a new control of type VectorControl and adds it to the current container. Declaration public static VectorControl AddVectorControl(this IControlContainer container, string propertyName, bool isXVisible = true, bool isYVisible = true, bool isZVisible = true, bool isWVisible = true) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String propertyName Material property name. Boolean isXVisible Shows the x component. Optional (Default true). Boolean isYVisible Shows the y component. Optional (Default true). Boolean isZVisible Shows the z component. Optional (Default true). Boolean isWVisible Shows the w component. Optional (Default true). Returns Type Description VectorControl The VectorControl object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddVertexStreamsControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.AddVertexStreamsControl.html",
    "title": "Method AddVertexStreamsControl | Simple Shader Inspectors Documentation",
    "keywords": "Method AddVertexStreamsControl AddVertexStreamsControl(IControlContainer, String) Declaration public static VertexStreamsControl AddVertexStreamsControl(this IControlContainer container, string alias) Parameters Type Name Description IControlContainer container String alias Returns Type Description VertexStreamsControl"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.html",
    "title": "Class ControlExtensions | Simple Shader Inspectors Documentation",
    "keywords": "Class ControlExtensions Inheritance Object ControlExtensions Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public static class ControlExtensions Methods Name Description AddColorControl(IControlContainer, String, Boolean) Creates a new control of type ColorControl and adds it to the current container. AddControlContainer(IControlContainer) Creates a new control of type PropertyControl and adds it to the current container. AddEnumControl<TEnum>(IControlContainer, String) AddGradientTextureControl(IControlContainer, String, String) Creates a new control of type GradientTextureControl and adds it to the current container. AddKeywordToggleControl(IControlContainer, String) Creates a new control of type KeywordToggleControl and adds it to the current container. AddKeywordToggleListControl(IControlContainer, String) Creates a new control of type KeywordToggleListControl and adds it to the current container. AddLabelControl(IControlContainer, String) Creates a new control of type PropertyControl and adds it to the current container. AddLightmapEmissionControl(IControlContainer) Creates a new control of type LightmapEmissionControl and adds it to the current container. AddSpaceControl(IControlContainer, Int32) Creates a new control of type PropertyControl and adds it to the current container. AddTextureControl(IControlContainer, String, String, String) Creates a new control of type TextureControl and adds it to the current container. AddTextureGeneratorControl(IControlContainer, String, String, String) Creates a new control of type TextureGeneratorControl and adds it to the current container. AddTilingAndOffsetControl(IControlContainer, String) Creates a new control of type TilingAndOffsetControl and adds it to the current container. AddToggleControl(IControlContainer, String, Single, Single) Creates a new control of type ToggleControl and adds it to the current container. AddToggleListControl(IControlContainer, String, Single, Single) Creates a new control of type ToggleListControl and adds it to the current container. AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) Creates a new control of type VectorControl and adds it to the current container. AddVertexStreamsControl(IControlContainer, String) SetGeneratorButtonColor<T>(T, Color) Sets up the generator toggle button color. SetGeneratorButtonStyle<T>(T, GUIStyle) Sets up the generator toggle button style. SetGeneratorColor<T>(T, Color) Sets up the style of the generator background color. SetGeneratorInputColor<T>(T, Color) Sets up the generator background color. SetGeneratorInputStyle<T>(T, GUIStyle) Sets up the generator's input background style. SetGeneratorSaveButtonColor<T>(T, Color) Sets up the generator texture save button color. SetGeneratorSaveButtonStyle<T>(T, GUIStyle) Sets up the generator save button style. SetGeneratorStyle<T>(T, GUIStyle) Sets up the generator background style. SetGradientButtonColor<T>(T, Color) Sets up the gradient editor toggle button color. SetGradientButtonStyle<T>(T, GUIStyle) Sets up the gradient editor toggle button. SetGradientEditorColor<T>(T, Color) Sets up the style of the gradient editor background color. SetGradientEditorStyle<T>(T, GUIStyle) Sets up the style of the gradient editor background. SetGradientSaveButtonColor<T>(T, Color) Sets up the gradient texture save button color. SetGradientSaveButtonStyle<T>(T, GUIStyle) Sets up the gradient texture save button. SetHasHDRColor<T>(T, Boolean) Sets up the HasHDRColor bool. SetLabelStyle<T>(T, GUIStyle) Sets up the color of the LabelStyle. SetShowAlphaValue<T>(T, Boolean) Sets up the generator background color. SetUVAreaColor<T>(T, Color) Sets up the additional uv tiling and offset area background color. SetUVAreaStyle<T>(T, GUIStyle) Sets up the additional uv tiling and offset area style. SetUVButtonColor<T>(T, Color) Sets up the uv button color. SetUVButtonStyle<T>(T, GUIStyle) Sets up the additional uv button style. SetUvOptions<T>(T, Boolean) Set if the additional tiling and offset button is visible"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorButtonColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorButtonColor.html",
    "title": "Method SetGeneratorButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorButtonColor SetGeneratorButtonColor<T>(T, Color) Sets up the generator toggle button color. Declaration public static T SetGeneratorButtonColor<T>(this T control, Color color) where T : TextureGeneratorControl Parameters Type Name Description T control Section this method extends to. Color color Color of the background. Returns Type Description T The TextureGeneratorControl Object that has been modified. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorButtonStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorButtonStyle.html",
    "title": "Method SetGeneratorButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorButtonStyle SetGeneratorButtonStyle<T>(T, GUIStyle) Sets up the generator toggle button style. Declaration public static T SetGeneratorButtonStyle<T>(this T control, GUIStyle style) where T : TextureGeneratorControl Parameters Type Name Description T control Control this method extends to. GUIStyle style Style to use. Returns Type Description T The TextureGeneratorControl Object that has been modified. Type Parameters Name Description T Type of the control it extends to"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorColor.html",
    "title": "Method SetGeneratorColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorColor SetGeneratorColor<T>(T, Color) Sets up the style of the generator background color. Declaration public static T SetGeneratorColor<T>(this T control, Color color) where T : TextureGeneratorControl Parameters Type Name Description T control Color color Color of the background. Returns Type Description T The TextureGeneratorControl Object that has been modified. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorInputColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorInputColor.html",
    "title": "Method SetGeneratorInputColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorInputColor SetGeneratorInputColor<T>(T, Color) Sets up the generator background color. Declaration public static T SetGeneratorInputColor<T>(this T control, Color color) where T : TextureGeneratorControl Parameters Type Name Description T control Section this method extends to. Color color Color of the background. Returns Type Description T The TextureGeneratorControl Object that has been modified. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorInputStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorInputStyle.html",
    "title": "Method SetGeneratorInputStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorInputStyle SetGeneratorInputStyle<T>(T, GUIStyle) Sets up the generator's input background style. Declaration public static T SetGeneratorInputStyle<T>(this T control, GUIStyle style) where T : TextureGeneratorControl Parameters Type Name Description T control Control this method extends to. GUIStyle style Style to use. Returns Type Description T The TextureGeneratorControl Object that has been modified. Type Parameters Name Description T Type of the control it extends to"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorSaveButtonColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorSaveButtonColor.html",
    "title": "Method SetGeneratorSaveButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorSaveButtonColor SetGeneratorSaveButtonColor<T>(T, Color) Sets up the generator texture save button color. Declaration public static T SetGeneratorSaveButtonColor<T>(this T control, Color color) where T : TextureGeneratorControl Parameters Type Name Description T control Section this method extends to. Color color Color of the background. Returns Type Description T The TextureGeneratorControl Object that has been modified. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorSaveButtonStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorSaveButtonStyle.html",
    "title": "Method SetGeneratorSaveButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorSaveButtonStyle SetGeneratorSaveButtonStyle<T>(T, GUIStyle) Sets up the generator save button style. Declaration public static T SetGeneratorSaveButtonStyle<T>(this T control, GUIStyle style) where T : TextureGeneratorControl Parameters Type Name Description T control Control this method extends to. GUIStyle style Style to use. Returns Type Description T The TextureGeneratorControl Object that has been modified. Type Parameters Name Description T Type of the control it extends to"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGeneratorStyle.html",
    "title": "Method SetGeneratorStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGeneratorStyle SetGeneratorStyle<T>(T, GUIStyle) Sets up the generator background style. Declaration public static T SetGeneratorStyle<T>(this T control, GUIStyle style) where T : TextureGeneratorControl Parameters Type Name Description T control Control this method extends to. GUIStyle style Style to use. Returns Type Description T The TextureGeneratorControl Object that has been modified. Type Parameters Name Description T Type of the control it extends to"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGradientButtonColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGradientButtonColor.html",
    "title": "Method SetGradientButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGradientButtonColor SetGradientButtonColor<T>(T, Color) Sets up the gradient editor toggle button color. Declaration public static T SetGradientButtonColor<T>(this T control, Color color) where T : GradientTextureControl Parameters Type Name Description T control Section this method extends to. Color color Color of the background. Returns Type Description T The GradientTextureControl Object that has been modified. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGradientButtonStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGradientButtonStyle.html",
    "title": "Method SetGradientButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGradientButtonStyle SetGradientButtonStyle<T>(T, GUIStyle) Sets up the gradient editor toggle button. Declaration public static T SetGradientButtonStyle<T>(this T control, GUIStyle buttonStyle) where T : GradientTextureControl Parameters Type Name Description T control Control this method extends to. GUIStyle buttonStyle Style with the background of the button. Returns Type Description T The GradientTextureControl Object that has been modified. Type Parameters Name Description T Type of the control it extends to"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGradientEditorColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGradientEditorColor.html",
    "title": "Method SetGradientEditorColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGradientEditorColor SetGradientEditorColor<T>(T, Color) Sets up the style of the gradient editor background color. Declaration public static T SetGradientEditorColor<T>(this T control, Color color) where T : GradientTextureControl Parameters Type Name Description T control Control this method extends to. Color color Color of the background. Returns Type Description T The GradientTextureControl Object that has been modified. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGradientEditorStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGradientEditorStyle.html",
    "title": "Method SetGradientEditorStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGradientEditorStyle SetGradientEditorStyle<T>(T, GUIStyle) Sets up the style of the gradient editor background. Declaration public static T SetGradientEditorStyle<T>(this T control, GUIStyle editorStyle) where T : GradientTextureControl Parameters Type Name Description T control Control this method extends to. GUIStyle editorStyle Style with the background of the gradient editor. Returns Type Description T The GradientTextureControl Object that has been modified. Type Parameters Name Description T Type of the control it extends to"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGradientSaveButtonColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGradientSaveButtonColor.html",
    "title": "Method SetGradientSaveButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGradientSaveButtonColor SetGradientSaveButtonColor<T>(T, Color) Sets up the gradient texture save button color. Declaration public static T SetGradientSaveButtonColor<T>(this T control, Color color) where T : GradientTextureControl Parameters Type Name Description T control Section this method extends to. Color color Color of the background. Returns Type Description T The GradientTextureControl Object that has been modified. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGradientSaveButtonStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetGradientSaveButtonStyle.html",
    "title": "Method SetGradientSaveButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetGradientSaveButtonStyle SetGradientSaveButtonStyle<T>(T, GUIStyle) Sets up the gradient texture save button. Declaration public static T SetGradientSaveButtonStyle<T>(this T control, GUIStyle buttonStyle) where T : GradientTextureControl Parameters Type Name Description T control Control this method extends to. GUIStyle buttonStyle Style with the background of the button. Returns Type Description T The GradientTextureControl Object that has been modified. Type Parameters Name Description T Type of the control it extends to"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetHasHDRColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetHasHDRColor.html",
    "title": "Method SetHasHDRColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetHasHDRColor SetHasHDRColor<T>(T, Boolean) Sets up the HasHDRColor bool. Declaration public static T SetHasHDRColor<T>(this T control, bool hasHDRColor) where T : TextureControl Parameters Type Name Description T control Control this method extends to. Boolean hasHDRColor bool. Returns Type Description T The TextureControl Object that has been modified. Type Parameters Name Description T Type of the control it extends to"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetLabelStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetLabelStyle.html",
    "title": "Method SetLabelStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetLabelStyle SetLabelStyle<T>(T, GUIStyle) Sets up the color of the LabelStyle. Declaration public static T SetLabelStyle<T>(this T label, GUIStyle labelStyle) where T : LabelControl Parameters Type Name Description T label GUIStyle labelStyle Control this method extends to. Returns Type Description T The LabelControl Object that has been modified. Type Parameters Name Description T Type of the control object this method extends to."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetShowAlphaValue.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetShowAlphaValue.html",
    "title": "Method SetShowAlphaValue | Simple Shader Inspectors Documentation",
    "keywords": "Method SetShowAlphaValue SetShowAlphaValue<T>(T, Boolean) Sets up the generator background color. Declaration public static T SetShowAlphaValue<T>(this T control, bool showAlpha) where T : ColorControl Parameters Type Name Description T control Control this method extends to. Boolean showAlpha Boolean indicating if you want to show the alpha channel in the color selector. Returns Type Description T The ColorControl Object that has been modified. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetUVAreaColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetUVAreaColor.html",
    "title": "Method SetUVAreaColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetUVAreaColor SetUVAreaColor<T>(T, Color) Sets up the additional uv tiling and offset area background color. Declaration public static T SetUVAreaColor<T>(this T control, Color color) where T : TextureGeneratorControl Parameters Type Name Description T control Color color Color of the background. Returns Type Description T The TextureControl Object that has been modified. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetUVAreaStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetUVAreaStyle.html",
    "title": "Method SetUVAreaStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetUVAreaStyle SetUVAreaStyle<T>(T, GUIStyle) Sets up the additional uv tiling and offset area style. Declaration public static T SetUVAreaStyle<T>(this T control, GUIStyle style) where T : TextureControl Parameters Type Name Description T control Control this method extends to. GUIStyle style Style to use. Returns Type Description T The TextureControl Object that has been modified. Type Parameters Name Description T Type of the control it extends to"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetUVButtonColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetUVButtonColor.html",
    "title": "Method SetUVButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetUVButtonColor SetUVButtonColor<T>(T, Color) Sets up the uv button color. Declaration public static T SetUVButtonColor<T>(this T control, Color color) where T : TextureGeneratorControl Parameters Type Name Description T control Color color Color of the background. Returns Type Description T The TextureControl Object that has been modified. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetUVButtonStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetUVButtonStyle.html",
    "title": "Method SetUVButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetUVButtonStyle SetUVButtonStyle<T>(T, GUIStyle) Sets up the additional uv button style. Declaration public static T SetUVButtonStyle<T>(this T control, GUIStyle style) where T : TextureControl Parameters Type Name Description T control Control this method extends to. GUIStyle style Style to use. Returns Type Description T The TextureControl Object that has been modified. Type Parameters Name Description T Type of the control it extends to"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetUvOptions.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ControlExtensions.SetUvOptions.html",
    "title": "Method SetUvOptions | Simple Shader Inspectors Documentation",
    "keywords": "Method SetUvOptions SetUvOptions<T>(T, Boolean) Set if the additional tiling and offset button is visible Declaration public static T SetUvOptions<T>(this T control, bool showUvOptions) where T : TextureControl Parameters Type Name Description T control Control this method extends to. Boolean showUvOptions Boolean value Returns Type Description T The TextureControl Object that has been modified. Type Parameters Name Description T Type of the control it extends to"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.-ctor.html",
    "title": "Constructor EnumControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor EnumControl EnumControl(String) Declaration public EnumControl(string propertyName) Parameters Type Name Description String propertyName"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.EnumControl-1.html",
    "title": "Class EnumControl<TEnum> | Simple Shader Inspectors Documentation",
    "keywords": "Class EnumControl<TEnum> Represents a control with options based on an enum Inheritance Object SimpleControl PropertyControl EnumControl<TEnum> Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class EnumControl<TEnum> : PropertyControl where TEnum : Enum Type Parameters TEnum Constructors Name Description EnumControl(String) Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.AdditionalContent.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.AdditionalContent.html",
    "title": "Property AdditionalContent | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalContent AdditionalContent Additional localization strings. Declaration public AdditionalLocalization[] AdditionalContent { get; set; } Property Value Type Description AdditionalLocalization [] Implements IAdditionalLocalization.AdditionalContent"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides TextureControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.-ctor.html",
    "title": "Constructor GradientTextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor GradientTextureControl GradientTextureControl(String, String) Default contructor. Declaration public GradientTextureControl(string propertyName, string colorPropertyName = null) Parameters Type Name Description String propertyName Name of the gradient texture property. String colorPropertyName Name of the relative color property (default: null)."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientButtonColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientButtonColor.html",
    "title": "Property GradientButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientButtonColor GradientButtonColor Background color for the gradient editor button. Declaration public Color GradientButtonColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientButtonStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientButtonStyle.html",
    "title": "Property GradientButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientButtonStyle GradientButtonStyle GUIStyle for the gradient editor button. Declaration public GUIStyle GradientButtonStyle { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientEditorColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientEditorColor.html",
    "title": "Property GradientEditorColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientEditorColor GradientEditorColor Background color for the gradient editor background. Declaration public Color GradientEditorColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientEditorStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientEditorStyle.html",
    "title": "Property GradientEditorStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientEditorStyle GradientEditorStyle GUIStyle for the gradient editor background. Declaration public GUIStyle GradientEditorStyle { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientSaveButtonColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientSaveButtonColor.html",
    "title": "Property GradientSaveButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientSaveButtonColor GradientSaveButtonColor Background color for the gradient editor save button. Declaration public Color GradientSaveButtonColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientSaveButtonStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.GradientSaveButtonStyle.html",
    "title": "Property GradientSaveButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GradientSaveButtonStyle GradientSaveButtonStyle GUIStyle for the gradient editor save button. Declaration public GUIStyle GradientSaveButtonStyle { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientTextureControl.html",
    "title": "Class GradientTextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Class GradientTextureControl Control that handles a gradient texture with a gradient editor included. Inheritance Object SimpleControl PropertyControl TextureControl GradientTextureControl Implements IAdditionalProperties IAdditionalLocalization Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class GradientTextureControl : TextureControl, IAdditionalProperties, IAdditionalLocalization Constructors Name Description GradientTextureControl(String, String) Default contructor. Properties Name Description AdditionalContent Additional localization strings. GradientButtonColor Background color for the gradient editor button. GradientButtonStyle GUIStyle for the gradient editor button. GradientEditorColor Background color for the gradient editor background. GradientEditorStyle GUIStyle for the gradient editor background. GradientSaveButtonColor Background color for the gradient editor save button. GradientSaveButtonStyle GUIStyle for the gradient editor save button. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods AdditionalContentExtensions.InizializeLocalizationWithNames(IAdditionalLocalization, String[]) BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean) ControlExtensions.SetGradientButtonStyle<T>(T, GUIStyle) ControlExtensions.SetGradientSaveButtonStyle<T>(T, GUIStyle) ControlExtensions.SetGradientEditorStyle<T>(T, GUIStyle) ControlExtensions.SetGradientButtonColor<T>(T, Color) ControlExtensions.SetGradientSaveButtonColor<T>(T, Color) ControlExtensions.SetGradientEditorColor<T>(T, Color) ControlExtensions.SetUvOptions<T>(T, Boolean) ControlExtensions.SetHasHDRColor<T>(T, Boolean) ControlExtensions.SetUVButtonStyle<T>(T, GUIStyle) ControlExtensions.SetUVAreaStyle<T>(T, GUIStyle)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientWidth.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.GradientWidth.html",
    "title": "Enum GradientWidth | Simple Shader Inspectors Documentation",
    "keywords": "Enum GradientWidth Supported gradient widths Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public enum GradientWidth Fields Name Description L_1024 M_512 S_256 XL_2048 XS_128 XXL_4096"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors.Controls | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors.Controls Classes ColorControl Represents a control for a color property. ControlContainer Represents a group of conrols. ControlExtensions EnumControl<TEnum> Represents a control with options based on an enum GradientTextureControl Control that handles a gradient texture with a gradient editor included. KeywordToggleControl Represents a control with a checkbox for setting a float property to 2 defined values. KeywordToggleListControl Represents a control with a checkbox for setting a keyword. Also shows and hides a list of controls based on its state. LabelControl Represents a label without any property. LightmapEmissionControl Control that handles THe lightmap Emission Property of the material. SpaceControl Represents a label without any property. TextureControl Represents a control for a texture property with possibility to inline 2 extra properties. TextureGeneratorControl Represents a control for a texture property with possibility to inline 2 extra properties. Also includes a texture generator. TextureGeneratorHelper Helper class for TextureGeneratorControl. TilingAndOffsetControl Represents a control for a texture tiling and offset field. ToggleControl Represents a control with a checkbox for setting a float property to 2 defined values. ToggleListControl Represents a control with a checkbox for setting a float property to 2 defined values. Also shows and hides a list of controls based on its state. VectorControl Represents a vector control. VertexStreamsControl Enums GradientWidth Supported gradient widths InputType Type of input for the texture generator. Resolution"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.InputType.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.InputType.html",
    "title": "Enum InputType | Simple Shader Inspectors Documentation",
    "keywords": "Enum InputType Type of input for the texture generator. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public enum InputType Fields Name Description Color Texture"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.-ctor.html",
    "title": "Constructor KeywordToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor KeywordToggleControl KeywordToggleControl(String) Default constructor of KeywordToggleControl Declaration public KeywordToggleControl(string keyword) Parameters Type Name Description String keyword Name of the keyword to toggle."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.HasKeywordUpdated.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.HasKeywordUpdated.html",
    "title": "Property HasKeywordUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasKeywordUpdated HasKeywordUpdated Boolean indicating if the keyword state has updated. Declaration public bool HasKeywordUpdated { get; protected set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.html",
    "title": "Class KeywordToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Class KeywordToggleControl Represents a control with a checkbox for setting a float property to 2 defined values. Inheritance Object SimpleControl KeywordToggleControl KeywordToggleListControl KeywordToggleListControl KeywordToggleListControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class KeywordToggleControl : SimpleControl Constructors Name Description KeywordToggleControl(String) Default constructor of KeywordToggleControl Fields Name Description keyword Properties Name Description HasKeywordUpdated Boolean indicating if the keyword state has updated. ToggleEnabled Boolean indicating if the toggle is enabled or not. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.keyword.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.keyword.html",
    "title": "Field keyword | Simple Shader Inspectors Documentation",
    "keywords": "Field keyword Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected readonly string keyword Returns String"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.ToggleEnabled.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleControl.ToggleEnabled.html",
    "title": "Property ToggleEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Property ToggleEnabled ToggleEnabled Boolean indicating if the toggle is enabled or not. Declaration public bool ToggleEnabled { get; protected set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides KeywordToggleControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.Controls.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls that can be hidden by this control. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > Implements IControlContainer.Controls"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.-ctor.html",
    "title": "Constructor KeywordToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor KeywordToggleListControl KeywordToggleListControl(String) Default constructor of KeywordToggleListControl Declaration public KeywordToggleListControl(string keyword) Parameters Type Name Description String keyword Keyword name."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.KeywordToggleListControl.html",
    "title": "Class KeywordToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Class KeywordToggleListControl Represents a control with a checkbox for setting a keyword. Also shows and hides a list of controls based on its state. Inheritance Object SimpleControl KeywordToggleControl KeywordToggleListControl Implements IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class KeywordToggleListControl : KeywordToggleControl, IControlContainer Constructors Name Description KeywordToggleListControl(String) Default constructor of KeywordToggleListControl Properties Name Description Controls List of controls that can be hidden by this control. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.AddPropertyControl(IControlContainer, String) BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean) ControlExtensions.AddColorControl(IControlContainer, String, Boolean) ControlExtensions.AddControlContainer(IControlContainer) ControlExtensions.AddEnumControl<TEnum>(IControlContainer, String) ControlExtensions.AddGradientTextureControl(IControlContainer, String, String) ControlExtensions.AddKeywordToggleControl(IControlContainer, String) ControlExtensions.AddKeywordToggleListControl(IControlContainer, String) ControlExtensions.AddLabelControl(IControlContainer, String) ControlExtensions.AddLightmapEmissionControl(IControlContainer) ControlExtensions.AddSpaceControl(IControlContainer, Int32) ControlExtensions.AddTextureControl(IControlContainer, String, String, String) ControlExtensions.AddTextureGeneratorControl(IControlContainer, String, String, String) ControlExtensions.AddTilingAndOffsetControl(IControlContainer, String) ControlExtensions.AddToggleControl(IControlContainer, String, Single, Single) ControlExtensions.AddToggleListControl(IControlContainer, String, Single, Single) ControlExtensions.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) ControlExtensions.AddVertexStreamsControl(IControlContainer, String) SectionsControlExtensions.AddActivatableSection(IControlContainer, String, Single, Single) SectionsControlExtensions.AddPDActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) SectionControlExtensions.AddOrderedSectionGroup(IControlContainer, String) SectionControlExtensions.AddSection(IControlContainer, String) SectionControlExtensions.AddPDSection(IControlContainer, String, Single, Single)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.-ctor.html",
    "title": "Constructor LabelControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor LabelControl LabelControl(String) Default constructor of LabelControl . Declaration public LabelControl(string alias) Parameters Type Name Description String alias Alias of the control."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.html",
    "title": "Class LabelControl | Simple Shader Inspectors Documentation",
    "keywords": "Class LabelControl Represents a label without any property. Inheritance Object SimpleControl LabelControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class LabelControl : SimpleControl Constructors Name Description LabelControl(String) Default constructor of LabelControl . Properties Name Description LabelStyle GUIStyle for the LabelStyle Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean) ControlExtensions.SetLabelStyle<T>(T, GUIStyle)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.LabelStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LabelControl.LabelStyle.html",
    "title": "Property LabelStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property LabelStyle LabelStyle GUIStyle for the LabelStyle Declaration public GUIStyle LabelStyle { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.-ctor.html",
    "title": "Constructor LightmapEmissionControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor LightmapEmissionControl LightmapEmissionControl() Default constructor of LightmapEmissionControl . Declaration public LightmapEmissionControl()"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.HasLightmapEmissionUpdated.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.HasLightmapEmissionUpdated.html",
    "title": "Property HasLightmapEmissionUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasLightmapEmissionUpdated HasLightmapEmissionUpdated Boolean indicating if the lightmap emission property has updated. Declaration public bool HasLightmapEmissionUpdated { get; protected set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.LightmapEmissionControl.html",
    "title": "Class LightmapEmissionControl | Simple Shader Inspectors Documentation",
    "keywords": "Class LightmapEmissionControl Control that handles THe lightmap Emission Property of the material. Inheritance Object SimpleControl LightmapEmissionControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class LightmapEmissionControl : SimpleControl Constructors Name Description LightmapEmissionControl() Default constructor of LightmapEmissionControl . Properties Name Description HasLightmapEmissionUpdated Boolean indicating if the lightmap emission property has updated. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Resolution.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Resolution.html",
    "title": "Enum Resolution | Simple Shader Inspectors Documentation",
    "keywords": "Enum Resolution Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public enum Resolution Fields Name Description L_1024x1024 M_512x512 S_256x256 XL_2048x2048 XS_128x128 XXL_4096x4096"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.AdditionalProperties.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.AdditionalProperties.html",
    "title": "Property AdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalProperties AdditionalProperties Extra properties array. Declaration public AdditionalProperty[] AdditionalProperties { get; set; } Property Value Type Description AdditionalProperty [] Implements IAdditionalProperties.AdditionalProperties"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides Section.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.-ctor.html",
    "title": "Constructor ActivatableSection | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ActivatableSection ActivatableSection(String, String, Single, Single, Single, Single) Constructor of ActivatableSection used when creating a property driven ActivatableSection. Declaration public ActivatableSection(string activatePropertyName, string showPropertyName, float enableValue = 1F, float disableValue = 0F, float hideValue = 0F, float showValue = 1F) Parameters Type Name Description String activatePropertyName Material property that will drive the section enable state String showPropertyName Material property that will drive the section open state Single enableValue Float value that the material property will have if the section is disabled, optional (default: 0). Single disableValue Float value that the material property will have if the section is enabled, optional (default: 1). Single hideValue Float value that the material property will have if the section is collapsed, optional (default: 0). Single showValue Float value that the material property will have if the section is visible, optional (default: 1). ActivatableSection(String, Single, Single) Default constructor of ActivatableSection . Declaration public ActivatableSection(string activatePropertyName, float enableValue = 1F, float disableValue = 0F) Parameters Type Name Description String activatePropertyName Material property that will drive the section enable state Single enableValue Float value that the material property will have if the section is disabled, optional (default: 0). Single disableValue Float value that the material property will have if the section is enabled, optional (default: 1)."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.disableValue.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.disableValue.html",
    "title": "Field disableValue | Simple Shader Inspectors Documentation",
    "keywords": "Field disableValue Float value that the Show bool gets converted if false. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected float disableValue Returns Single"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.Enabled.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.Enabled.html",
    "title": "Property Enabled | Simple Shader Inspectors Documentation",
    "keywords": "Property Enabled Enabled Boolean indicating if the section is enabled or not. Declaration public bool Enabled { get; protected set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.enableValue.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.enableValue.html",
    "title": "Field enableValue | Simple Shader Inspectors Documentation",
    "keywords": "Field enableValue Float value that the Show bool gets converted if true. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected float enableValue Returns Single"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.HasActivatePropertyUpdated.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.HasActivatePropertyUpdated.html",
    "title": "Property HasActivatePropertyUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasActivatePropertyUpdated HasActivatePropertyUpdated Has the property been updated this cycle? Declaration public bool HasActivatePropertyUpdated { get; protected set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.ActivatableSection.html",
    "title": "Class ActivatableSection | Simple Shader Inspectors Documentation",
    "keywords": "Class ActivatableSection Section that can be activated or deactivated thanks to a checkbox inside the header. Inheritance Object SimpleControl PropertyControl Section ActivatableSection Implements IControlContainer INonAnimatableProperty IAdditionalProperties Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class ActivatableSection : Section, IControlContainer, INonAnimatableProperty, IAdditionalProperties Constructors Name Description ActivatableSection(String, Single, Single) Default constructor of ActivatableSection . ActivatableSection(String, String, Single, Single, Single, Single) Constructor of ActivatableSection used when creating a property driven ActivatableSection. Fields Name Description disableValue Float value that the Show bool gets converted if false. enableValue Float value that the Show bool gets converted if true. Properties Name Description AdditionalProperties Extra properties array. Enabled Boolean indicating if the section is enabled or not. HasActivatePropertyUpdated Has the property been updated this cycle? Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.AddPropertyControl(IControlContainer, String) BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean) ControlExtensions.AddColorControl(IControlContainer, String, Boolean) ControlExtensions.AddControlContainer(IControlContainer) ControlExtensions.AddEnumControl<TEnum>(IControlContainer, String) ControlExtensions.AddGradientTextureControl(IControlContainer, String, String) ControlExtensions.AddKeywordToggleControl(IControlContainer, String) ControlExtensions.AddKeywordToggleListControl(IControlContainer, String) ControlExtensions.AddLabelControl(IControlContainer, String) ControlExtensions.AddLightmapEmissionControl(IControlContainer) ControlExtensions.AddSpaceControl(IControlContainer, Int32) ControlExtensions.AddTextureControl(IControlContainer, String, String, String) ControlExtensions.AddTextureGeneratorControl(IControlContainer, String, String, String) ControlExtensions.AddTilingAndOffsetControl(IControlContainer, String) ControlExtensions.AddToggleControl(IControlContainer, String, Single, Single) ControlExtensions.AddToggleListControl(IControlContainer, String, Single, Single) ControlExtensions.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) ControlExtensions.AddVertexStreamsControl(IControlContainer, String) SectionsControlExtensions.AddActivatableSection(IControlContainer, String, Single, Single) SectionsControlExtensions.AddPDActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) SectionControlExtensions.AddOrderedSectionGroup(IControlContainer, String) SectionControlExtensions.AddSection(IControlContainer, String) SectionControlExtensions.AddPDSection(IControlContainer, String, Single, Single) SectionControlExtensions.SetBackgroundColor<T>(T, Color) SectionControlExtensions.SetLabelStyle<T>(T, GUIStyle) SectionControlExtensions.SetBackGroundStyle<T>(T, GUIStyle) SectionControlExtensions.IncludeControlsInHeader<T>(T, Boolean) SectionControlExtensions.SetPropertyAnimatable<T>(T, Boolean) SectionControlExtensions.ShowFoldoutArrow<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors.Controls.Sections | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors.Controls.Sections Classes ActivatableSection Section that can be activated or deactivated thanks to a checkbox inside the header. OrderedSection Section that can be hidden and ordered when in groups. OrderedSectionGroup Control that contains a list of OrderedSections and controls thir lifecycle Section Represents a grouping of controls with an header that can be folded in and out. SectionControlExtensions SectionsControlExtensions"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.AdditionalProperties.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.AdditionalProperties.html",
    "title": "Property AdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalProperties AdditionalProperties Extra properties array. Declaration public AdditionalProperty[] AdditionalProperties { get; set; } Property Value Type Description AdditionalProperty [] Implements IAdditionalProperties.AdditionalProperties"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides Section.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.-ctor.html",
    "title": "Constructor OrderedSection | Simple Shader Inspectors Documentation",
    "keywords": "Constructor OrderedSection OrderedSection(String, String, Single, Single) Constructor of OrderedSection used when creating a property driven ActivatableSection. Declaration public OrderedSection(string activatePropertyName, string showPropertyName, float hideValue = 0F, float showValue = 1F) Parameters Type Name Description String activatePropertyName Material property that will drive the section enable state String showPropertyName Material property that will drive the section open state Single hideValue Float value that the material property will have if the section is collapsed, optional (default: 0). Single showValue Float value that the material property will have if the section is visible, optional (default: 1). OrderedSection(String) Default constructor of OrderedSection . Declaration public OrderedSection(string activatePropertyName) Parameters Type Name Description String activatePropertyName Material property that will drive the section enable state"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DeleteColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DeleteColor.html",
    "title": "Property DeleteColor | Simple Shader Inspectors Documentation",
    "keywords": "Property DeleteColor DeleteColor Color of Deleteicon. Declaration public Color DeleteColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DeleteIcon.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DeleteIcon.html",
    "title": "Property DeleteIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property DeleteIcon DeleteIcon GUIStyle for the DeleteIcon Declaration public GUIStyle DeleteIcon { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DownColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DownColor.html",
    "title": "Property DownColor | Simple Shader Inspectors Documentation",
    "keywords": "Property DownColor DownColor Color of Downicon. Declaration public Color DownColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DownIcon.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DownIcon.html",
    "title": "Property DownIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property DownIcon DownIcon GUIStyle for the DownIcon Declaration public GUIStyle DownIcon { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DrawSideButtons.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.DrawSideButtons.html",
    "title": "Method DrawSideButtons | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawSideButtons DrawSideButtons() Declaration protected void DrawSideButtons()"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.Enabled.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.Enabled.html",
    "title": "Property Enabled | Simple Shader Inspectors Documentation",
    "keywords": "Property Enabled Enabled Boolean indicating if the section is enabled or not. Declaration public bool Enabled { get; protected set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasActivatePropertyUpdated.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasActivatePropertyUpdated.html",
    "title": "Property HasActivatePropertyUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasActivatePropertyUpdated HasActivatePropertyUpdated Boolean indicating if the activate property has been updated this cycle. Declaration public bool HasActivatePropertyUpdated { get; protected set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasSectionTurnedOn.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.HasSectionTurnedOn.html",
    "title": "Property HasSectionTurnedOn | Simple Shader Inspectors Documentation",
    "keywords": "Property HasSectionTurnedOn HasSectionTurnedOn Boolean indicating if the section has turned on this cycle. Declaration public bool HasSectionTurnedOn { get; set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.html",
    "title": "Class OrderedSection | Simple Shader Inspectors Documentation",
    "keywords": "Class OrderedSection Section that can be hidden and ordered when in groups. Inheritance Object SimpleControl PropertyControl Section OrderedSection Implements IControlContainer INonAnimatableProperty IAdditionalProperties Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class OrderedSection : Section, IControlContainer, INonAnimatableProperty, IAdditionalProperties Constructors Name Description OrderedSection(String) Default constructor of OrderedSection . OrderedSection(String, String, Single, Single) Constructor of OrderedSection used when creating a property driven ActivatableSection. Fields Name Description PushState Properties Name Description AdditionalProperties Extra properties array. DeleteColor Color of Deleteicon. DeleteIcon GUIStyle for the DeleteIcon DownColor Color of Downicon. DownIcon GUIStyle for the DownIcon Enabled Boolean indicating if the section is enabled or not. HasActivatePropertyUpdated Boolean indicating if the activate property has been updated this cycle. HasSectionTurnedOn Boolean indicating if the section has turned on this cycle. UpColor Color of UpIcon. UpIcon GUIStyle for the UpIcon. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. DrawSideButtons() PredrawUpdate(MaterialEditor) Extension Methods BaseControlExtensions.AddPropertyControl(IControlContainer, String) BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean) ControlExtensions.AddColorControl(IControlContainer, String, Boolean) ControlExtensions.AddControlContainer(IControlContainer) ControlExtensions.AddEnumControl<TEnum>(IControlContainer, String) ControlExtensions.AddGradientTextureControl(IControlContainer, String, String) ControlExtensions.AddKeywordToggleControl(IControlContainer, String) ControlExtensions.AddKeywordToggleListControl(IControlContainer, String) ControlExtensions.AddLabelControl(IControlContainer, String) ControlExtensions.AddLightmapEmissionControl(IControlContainer) ControlExtensions.AddSpaceControl(IControlContainer, Int32) ControlExtensions.AddTextureControl(IControlContainer, String, String, String) ControlExtensions.AddTextureGeneratorControl(IControlContainer, String, String, String) ControlExtensions.AddTilingAndOffsetControl(IControlContainer, String) ControlExtensions.AddToggleControl(IControlContainer, String, Single, Single) ControlExtensions.AddToggleListControl(IControlContainer, String, Single, Single) ControlExtensions.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) ControlExtensions.AddVertexStreamsControl(IControlContainer, String) SectionsControlExtensions.AddActivatableSection(IControlContainer, String, Single, Single) SectionsControlExtensions.AddPDActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) SectionsControlExtensions.SetUpIcon<T>(T, GUIStyle, Color) SectionsControlExtensions.SetDownIcon<T>(T, GUIStyle, Color) SectionsControlExtensions.SetDeleteIcon<T>(T, GUIStyle, Color) SectionControlExtensions.AddOrderedSectionGroup(IControlContainer, String) SectionControlExtensions.AddSection(IControlContainer, String) SectionControlExtensions.AddPDSection(IControlContainer, String, Single, Single) SectionControlExtensions.SetBackgroundColor<T>(T, Color) SectionControlExtensions.SetLabelStyle<T>(T, GUIStyle) SectionControlExtensions.SetBackGroundStyle<T>(T, GUIStyle) SectionControlExtensions.IncludeControlsInHeader<T>(T, Boolean) SectionControlExtensions.SetPropertyAnimatable<T>(T, Boolean) SectionControlExtensions.ShowFoldoutArrow<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.PredrawUpdate.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.PredrawUpdate.html",
    "title": "Method PredrawUpdate | Simple Shader Inspectors Documentation",
    "keywords": "Method PredrawUpdate PredrawUpdate(MaterialEditor) Declaration public void PredrawUpdate(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.PushState.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.PushState.html",
    "title": "Field PushState | Simple Shader Inspectors Documentation",
    "keywords": "Field PushState Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public int PushState Returns Int32"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.UpColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.UpColor.html",
    "title": "Property UpColor | Simple Shader Inspectors Documentation",
    "keywords": "Property UpColor UpColor Color of UpIcon. Declaration public Color UpColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.UpIcon.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSection.UpIcon.html",
    "title": "Property UpIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property UpIcon UpIcon GUIStyle for the UpIcon. Declaration public GUIStyle UpIcon { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ButtonColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ButtonColor.html",
    "title": "Property ButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property ButtonColor ButtonColor Color of the add button. Declaration public Color ButtonColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ButtonStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ButtonStyle.html",
    "title": "Property ButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property ButtonStyle ButtonStyle GUIStyle for the add button Declaration public GUIStyle ButtonStyle { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the group of sections. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.Controls.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls LIst of controls. You can't use it normally. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > Implements IControlContainer.Controls"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.-ctor.html",
    "title": "Constructor OrderedSectionGroup | Simple Shader Inspectors Documentation",
    "keywords": "Constructor OrderedSectionGroup OrderedSectionGroup(String) Default contructor of OrderedSectionGroup . Declaration public OrderedSectionGroup(string alias) Parameters Type Name Description String alias Alias of the control"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.html",
    "title": "Class OrderedSectionGroup | Simple Shader Inspectors Documentation",
    "keywords": "Class OrderedSectionGroup Control that contains a list of OrderedSections and controls thir lifecycle Inheritance Object SimpleControl OrderedSectionGroup Implements IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class OrderedSectionGroup : SimpleControl, IControlContainer Constructors Name Description OrderedSectionGroup(String) Default contructor of OrderedSectionGroup . Properties Name Description ButtonColor Color of the add button. ButtonStyle GUIStyle for the add button Controls LIst of controls. You can't use it normally. Sections List of available Ordered Sections Methods Name Description ControlGUI(MaterialEditor) Draws the group of sections. Extension Methods BaseControlExtensions.AddPropertyControl(IControlContainer, String) BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean) ControlExtensions.AddColorControl(IControlContainer, String, Boolean) ControlExtensions.AddControlContainer(IControlContainer) ControlExtensions.AddEnumControl<TEnum>(IControlContainer, String) ControlExtensions.AddGradientTextureControl(IControlContainer, String, String) ControlExtensions.AddKeywordToggleControl(IControlContainer, String) ControlExtensions.AddKeywordToggleListControl(IControlContainer, String) ControlExtensions.AddLabelControl(IControlContainer, String) ControlExtensions.AddLightmapEmissionControl(IControlContainer) ControlExtensions.AddSpaceControl(IControlContainer, Int32) ControlExtensions.AddTextureControl(IControlContainer, String, String, String) ControlExtensions.AddTextureGeneratorControl(IControlContainer, String, String, String) ControlExtensions.AddTilingAndOffsetControl(IControlContainer, String) ControlExtensions.AddToggleControl(IControlContainer, String, Single, Single) ControlExtensions.AddToggleListControl(IControlContainer, String, Single, Single) ControlExtensions.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) ControlExtensions.AddVertexStreamsControl(IControlContainer, String) SectionsControlExtensions.AddActivatableSection(IControlContainer, String, Single, Single) SectionsControlExtensions.AddPDActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) SectionsControlExtensions.AddOrderedSection(OrderedSectionGroup, String) SectionsControlExtensions.AddPDOrderedSection(OrderedSectionGroup, String, String, Single, Single) SectionControlExtensions.AddOrderedSectionGroup(IControlContainer, String) SectionControlExtensions.AddSection(IControlContainer, String) SectionControlExtensions.AddPDSection(IControlContainer, String, Single, Single)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.Sections.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.OrderedSectionGroup.Sections.html",
    "title": "Property Sections | Simple Shader Inspectors Documentation",
    "keywords": "Property Sections Sections List of available Ordered Sections Declaration public List<OrderedSection> Sections { get; set; } Property Value Type Description List < OrderedSection >"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.AreControlsInside.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.AreControlsInside.html",
    "title": "Property AreControlsInside | Simple Shader Inspectors Documentation",
    "keywords": "Property AreControlsInside AreControlsInside Boolean indicating if child controls will be inside the header background. Declaration public bool AreControlsInside { get; set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.BackgroundColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.BackgroundColor.html",
    "title": "Property BackgroundColor | Simple Shader Inspectors Documentation",
    "keywords": "Property BackgroundColor BackgroundColor Background color of the header. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.BackgroundStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.BackgroundStyle.html",
    "title": "Property BackgroundStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property BackgroundStyle BackgroundStyle Style of the header background. Declaration public GUIStyle BackgroundStyle { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.Controls.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls inside this section. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > Implements IControlContainer.Controls"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.-ctor.html",
    "title": "Constructor Section | Simple Shader Inspectors Documentation",
    "keywords": "Constructor Section Section(String, Single, Single) Constructor of Section used when creating a property driven section Declaration public Section(string propertyName, float hideValue = 0F, float showValue = 1F) Parameters Type Name Description String propertyName Material property that will drive the section open state Single hideValue Float value that the material property will have if the section is collapsed, optional (default: 0). Single showValue Float value that the material property will have if the section is visible, optional (default: 1). Section() Default constructor of Section . Declaration public Section()"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.dictionaryKey.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.dictionaryKey.html",
    "title": "Field dictionaryKey | Simple Shader Inspectors Documentation",
    "keywords": "Field dictionaryKey String containing the key value that the section will use for the dictionary. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected string dictionaryKey Returns String"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.DrawControls.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.DrawControls.html",
    "title": "Method DrawControls | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawControls DrawControls(MaterialEditor) Draws the list of controls that can be hidden by this control. Declaration protected void DrawControls(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.firstCycle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.firstCycle.html",
    "title": "Field firstCycle | Simple Shader Inspectors Documentation",
    "keywords": "Field firstCycle Boolean indicating if it's the first ui update. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected bool firstCycle Returns Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.hideValue.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.hideValue.html",
    "title": "Field hideValue | Simple Shader Inspectors Documentation",
    "keywords": "Field hideValue Float value that the Show bool gets converted if false. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected readonly float hideValue Returns Single"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.html",
    "title": "Class Section | Simple Shader Inspectors Documentation",
    "keywords": "Class Section Represents a grouping of controls with an header that can be folded in and out. Inheritance Object SimpleControl PropertyControl Section ActivatableSection ActivatableSection ActivatableSection OrderedSection OrderedSection OrderedSection Implements IControlContainer INonAnimatableProperty Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public class Section : PropertyControl, IControlContainer, INonAnimatableProperty Constructors Name Description Section() Default constructor of Section . Section(String, Single, Single) Constructor of Section used when creating a property driven section Fields Name Description dictionaryKey String containing the key value that the section will use for the dictionary. firstCycle Boolean indicating if it's the first ui update. hideValue Float value that the Show bool gets converted if false. showValue Float value that the Show bool gets converted if true. useDictionary Boolean indicating if the section folding state is driven by an internal dictionary or not. It will be true in case you don't use a material property. Properties Name Description AreControlsInside Boolean indicating if child controls will be inside the header background. BackgroundColor Background color of the header. BackgroundStyle Style of the header background. Controls List of controls inside this section. IsPropertyAnimatable Boolean indicating if the folding state material property is animatable or not. LabelStyle Style of the header label. NonAnimatablePropertyChanged Boolean indicating if the folding state material property needs to be updated Show Bool indicating if the section is folded out or not. ShowFoldoutArrow Boolean indicating if the foldout arrow is enabled or not. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. DrawControls(MaterialEditor) Draws the list of controls that can be hidden by this control. SetupEnabled(MaterialEditor) Sets the Enabled boolean to the value currently in the source based on the settings of this control. Should only be used inside . UpdateEnabled(MaterialEditor) Updates the source of the Enabled boolean base on the settings of this control. UpdateNonAnimatableProperty(MaterialEditor) Updates properties that should not be animated Extension Methods BaseControlExtensions.AddPropertyControl(IControlContainer, String) BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean) ControlExtensions.AddColorControl(IControlContainer, String, Boolean) ControlExtensions.AddControlContainer(IControlContainer) ControlExtensions.AddEnumControl<TEnum>(IControlContainer, String) ControlExtensions.AddGradientTextureControl(IControlContainer, String, String) ControlExtensions.AddKeywordToggleControl(IControlContainer, String) ControlExtensions.AddKeywordToggleListControl(IControlContainer, String) ControlExtensions.AddLabelControl(IControlContainer, String) ControlExtensions.AddLightmapEmissionControl(IControlContainer) ControlExtensions.AddSpaceControl(IControlContainer, Int32) ControlExtensions.AddTextureControl(IControlContainer, String, String, String) ControlExtensions.AddTextureGeneratorControl(IControlContainer, String, String, String) ControlExtensions.AddTilingAndOffsetControl(IControlContainer, String) ControlExtensions.AddToggleControl(IControlContainer, String, Single, Single) ControlExtensions.AddToggleListControl(IControlContainer, String, Single, Single) ControlExtensions.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) ControlExtensions.AddVertexStreamsControl(IControlContainer, String) SectionsControlExtensions.AddActivatableSection(IControlContainer, String, Single, Single) SectionsControlExtensions.AddPDActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) SectionControlExtensions.AddOrderedSectionGroup(IControlContainer, String) SectionControlExtensions.AddSection(IControlContainer, String) SectionControlExtensions.AddPDSection(IControlContainer, String, Single, Single) SectionControlExtensions.SetBackgroundColor<T>(T, Color) SectionControlExtensions.SetLabelStyle<T>(T, GUIStyle) SectionControlExtensions.SetBackGroundStyle<T>(T, GUIStyle) SectionControlExtensions.IncludeControlsInHeader<T>(T, Boolean) SectionControlExtensions.SetPropertyAnimatable<T>(T, Boolean) SectionControlExtensions.ShowFoldoutArrow<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.IsPropertyAnimatable.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.IsPropertyAnimatable.html",
    "title": "Property IsPropertyAnimatable | Simple Shader Inspectors Documentation",
    "keywords": "Property IsPropertyAnimatable IsPropertyAnimatable Boolean indicating if the folding state material property is animatable or not. Declaration public bool IsPropertyAnimatable { get; set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.LabelStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.LabelStyle.html",
    "title": "Property LabelStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property LabelStyle LabelStyle Style of the header label. Declaration public GUIStyle LabelStyle { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.NonAnimatablePropertyChanged.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.NonAnimatablePropertyChanged.html",
    "title": "Property NonAnimatablePropertyChanged | Simple Shader Inspectors Documentation",
    "keywords": "Property NonAnimatablePropertyChanged NonAnimatablePropertyChanged Boolean indicating if the folding state material property needs to be updated Declaration public bool NonAnimatablePropertyChanged { get; set; } Property Value Type Description Boolean Implements INonAnimatableProperty.NonAnimatablePropertyChanged"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.SetupEnabled.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.SetupEnabled.html",
    "title": "Method SetupEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Method SetupEnabled SetupEnabled(MaterialEditor) Sets the Enabled boolean to the value currently in the source based on the settings of this control. Should only be used inside . Declaration protected void SetupEnabled(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.Show.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.Show.html",
    "title": "Property Show | Simple Shader Inspectors Documentation",
    "keywords": "Property Show Show Bool indicating if the section is folded out or not. Declaration public bool Show { get; protected set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ShowFoldoutArrow.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.ShowFoldoutArrow.html",
    "title": "Property ShowFoldoutArrow | Simple Shader Inspectors Documentation",
    "keywords": "Property ShowFoldoutArrow ShowFoldoutArrow Boolean indicating if the foldout arrow is enabled or not. Declaration public bool ShowFoldoutArrow { get; set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.showValue.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.showValue.html",
    "title": "Field showValue | Simple Shader Inspectors Documentation",
    "keywords": "Field showValue Float value that the Show bool gets converted if true. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected readonly float showValue Returns Single"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UpdateEnabled.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UpdateEnabled.html",
    "title": "Method UpdateEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateEnabled UpdateEnabled(MaterialEditor) Updates the source of the Enabled boolean base on the settings of this control. Declaration protected void UpdateEnabled(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UpdateNonAnimatableProperty.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.UpdateNonAnimatableProperty.html",
    "title": "Method UpdateNonAnimatableProperty | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateNonAnimatableProperty UpdateNonAnimatableProperty(MaterialEditor) Updates properties that should not be animated Declaration public virtual void UpdateNonAnimatableProperty(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Implements INonAnimatableProperty.UpdateNonAnimatableProperty(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.useDictionary.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.Section.useDictionary.html",
    "title": "Field useDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Field useDictionary Boolean indicating if the section folding state is driven by an internal dictionary or not. It will be true in case you don't use a material property. Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax protected readonly bool useDictionary Returns Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.AddOrderedSectionGroup.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.AddOrderedSectionGroup.html",
    "title": "Method AddOrderedSectionGroup | Simple Shader Inspectors Documentation",
    "keywords": "Method AddOrderedSectionGroup AddOrderedSectionGroup(IControlContainer, String) Creates a new control of type OrderedSectionGroup and adds it to the current container. Declaration public static OrderedSectionGroup AddOrderedSectionGroup(this IControlContainer container, string alias) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String alias Alias of the control Returns Type Description OrderedSectionGroup The OrderedSectionGroup object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.AddPDSection.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.AddPDSection.html",
    "title": "Method AddPDSection | Simple Shader Inspectors Documentation",
    "keywords": "Method AddPDSection AddPDSection(IControlContainer, String, Single, Single) Creates a new control of type Section that is driven by a property and adds it to the current container. Declaration public static Section AddPDSection(this IControlContainer container, string propertyName, float hideValue = 0F, float showValue = 1F) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String propertyName Material property that will drive the section open state Single hideValue Float value that the material property will have if the section is collapsed, optional (default: 0). Single showValue Float value that the material property will have if the section is visible, optional (default: 1). Returns Type Description Section The Section object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.AddSection.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.AddSection.html",
    "title": "Method AddSection | Simple Shader Inspectors Documentation",
    "keywords": "Method AddSection AddSection(IControlContainer, String) Creates a new control of type Section and adds it to the current container. Declaration public static Section AddSection(this IControlContainer container, string alias) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String alias Alias of the section. Returns Type Description Section The Section object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.html",
    "title": "Class SectionControlExtensions | Simple Shader Inspectors Documentation",
    "keywords": "Class SectionControlExtensions Inheritance Object SectionControlExtensions Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public static class SectionControlExtensions Methods Name Description AddOrderedSectionGroup(IControlContainer, String) Creates a new control of type OrderedSectionGroup and adds it to the current container. AddPDSection(IControlContainer, String, Single, Single) Creates a new control of type Section that is driven by a property and adds it to the current container. AddSection(IControlContainer, String) Creates a new control of type Section and adds it to the current container. IncludeControlsInHeader<T>(T, Boolean) Set if the background of the header will be extended to the child controls. SetBackgroundColor<T>(T, Color) Set the background color. SetBackGroundStyle<T>(T, GUIStyle) Set the style of the background of the section. SetLabelStyle<T>(T, GUIStyle) Set the style of the label. SetPropertyAnimatable<T>(T, Boolean) Set if the property driving the fold in and out of the section can be animated by the animation window. Does nothing if the section uses a dictionary for driving it's folding state. ShowFoldoutArrow<T>(T, Boolean) Set if the foldout arrow is visible."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.IncludeControlsInHeader.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.IncludeControlsInHeader.html",
    "title": "Method IncludeControlsInHeader | Simple Shader Inspectors Documentation",
    "keywords": "Method IncludeControlsInHeader IncludeControlsInHeader<T>(T, Boolean) Set if the background of the header will be extended to the child controls. Declaration public static T IncludeControlsInHeader<T>(this T section, bool areControlsInside) where T : Section Parameters Type Name Description T section Section this method extends to. Boolean areControlsInside Returns Type Description T The modified section. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.SetBackgroundColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.SetBackgroundColor.html",
    "title": "Method SetBackgroundColor | Simple Shader Inspectors Documentation",
    "keywords": "Method SetBackgroundColor SetBackgroundColor<T>(T, Color) Set the background color. Declaration public static T SetBackgroundColor<T>(this T section, Color backgroundColor) where T : Section Parameters Type Name Description T section Section this method extends to. Color backgroundColor Color of the background. Returns Type Description T The modified section. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.SetBackGroundStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.SetBackGroundStyle.html",
    "title": "Method SetBackGroundStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetBackGroundStyle SetBackGroundStyle<T>(T, GUIStyle) Set the style of the background of the section. Declaration public static T SetBackGroundStyle<T>(this T section, GUIStyle backgroundStyle) where T : Section Parameters Type Name Description T section Section this method extends to. GUIStyle backgroundStyle Style of the background. Returns Type Description T The modified section. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.SetLabelStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.SetLabelStyle.html",
    "title": "Method SetLabelStyle | Simple Shader Inspectors Documentation",
    "keywords": "Method SetLabelStyle SetLabelStyle<T>(T, GUIStyle) Set the style of the label. Declaration public static T SetLabelStyle<T>(this T section, GUIStyle labelStyle) where T : Section Parameters Type Name Description T section Section this method extends to. GUIStyle labelStyle Style of the label. Returns Type Description T The modified section. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.SetPropertyAnimatable.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.SetPropertyAnimatable.html",
    "title": "Method SetPropertyAnimatable | Simple Shader Inspectors Documentation",
    "keywords": "Method SetPropertyAnimatable SetPropertyAnimatable<T>(T, Boolean) Set if the property driving the fold in and out of the section can be animated by the animation window. Does nothing if the section uses a dictionary for driving it's folding state. Declaration public static T SetPropertyAnimatable<T>(this T section, bool isPropertyAnimatable) where T : Section Parameters Type Name Description T section Section this method extends to. Boolean isPropertyAnimatable If the property is animatable. Returns Type Description T The modified section. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.ShowFoldoutArrow.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionControlExtensions.ShowFoldoutArrow.html",
    "title": "Method ShowFoldoutArrow | Simple Shader Inspectors Documentation",
    "keywords": "Method ShowFoldoutArrow ShowFoldoutArrow<T>(T, Boolean) Set if the foldout arrow is visible. Declaration public static T ShowFoldoutArrow<T>(this T section, bool showFoldoutArrow) where T : Section Parameters Type Name Description T section Section this method extends to. Boolean showFoldoutArrow If the foldout arrow is visible. Returns Type Description T The modified section. Type Parameters Name Description T The type of this class."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.AddActivatableSection.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.AddActivatableSection.html",
    "title": "Method AddActivatableSection | Simple Shader Inspectors Documentation",
    "keywords": "Method AddActivatableSection AddActivatableSection(IControlContainer, String, Single, Single) Creates a new control of type Section and adds it to the current container. Declaration public static ActivatableSection AddActivatableSection(this IControlContainer container, string activatePropertyName, float enableValue = 1F, float disableValue = 0F) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String activatePropertyName Material property that will drive the section enable state Single enableValue Float value that the material property will have if the section is disabled, optional (default: 0). Single disableValue Float value that the material property will have if the section is enabled, optional (default: 1). Returns Type Description ActivatableSection The Section object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.AddOrderedSection.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.AddOrderedSection.html",
    "title": "Method AddOrderedSection | Simple Shader Inspectors Documentation",
    "keywords": "Method AddOrderedSection AddOrderedSection(OrderedSectionGroup, String) Creates a new control of type Section and adds it to the current container. Declaration public static OrderedSection AddOrderedSection(this OrderedSectionGroup container, string activatePropertyName) Parameters Type Name Description OrderedSectionGroup container Container of controls this method extends to. String activatePropertyName Material property that will drive the section enable state Returns Type Description OrderedSection The OrderedSection object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.AddPDActivatableSection.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.AddPDActivatableSection.html",
    "title": "Method AddPDActivatableSection | Simple Shader Inspectors Documentation",
    "keywords": "Method AddPDActivatableSection AddPDActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Creates a new control of type Section that is driven by a property and adds it to the current container. Declaration public static Section AddPDActivatableSection(this IControlContainer container, string activatePropertyName, string showPropertyName, float enableValue = 1F, float disableValue = 0F, float hideValue = 0F, float showValue = 1F) Parameters Type Name Description IControlContainer container Container of controls this method extends to. String activatePropertyName Material property that will drive the section enable state String showPropertyName Material property that will drive the section open state Single enableValue Float value that the material property will have if the section is disabled, optional (default: 0). Single disableValue Float value that the material property will have if the section is enabled, optional (default: 1). Single hideValue Float value that the material property will have if the section is collapsed, optional (default: 0). Single showValue Float value that the material property will have if the section is visible, optional (default: 1). Returns Type Description Section The Section object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.AddPDOrderedSection.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.AddPDOrderedSection.html",
    "title": "Method AddPDOrderedSection | Simple Shader Inspectors Documentation",
    "keywords": "Method AddPDOrderedSection AddPDOrderedSection(OrderedSectionGroup, String, String, Single, Single) Creates a new control of type Section that is driven by a property and adds it to the current container. Declaration public static OrderedSection AddPDOrderedSection(this OrderedSectionGroup container, string activatePropertyName, string showPropertyName, float hideValue = 0F, float showValue = 1F) Parameters Type Name Description OrderedSectionGroup container Container of controls this method extends to. String activatePropertyName Material property that will drive the section enable state String showPropertyName Material property that will drive the section open state Single hideValue Float value that the material property will have if the section is collapsed, optional (default: 0). Single showValue Float value that the material property will have if the section is visible, optional (default: 1). Returns Type Description OrderedSection The OrderedSection object that has been added."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.html",
    "title": "Class SectionsControlExtensions | Simple Shader Inspectors Documentation",
    "keywords": "Class SectionsControlExtensions Inheritance Object SectionsControlExtensions Namespace : VRLabs.SimpleShaderInspectors.Controls.Sections Syntax public static class SectionsControlExtensions Methods Name Description AddActivatableSection(IControlContainer, String, Single, Single) Creates a new control of type Section and adds it to the current container. AddOrderedSection(OrderedSectionGroup, String) Creates a new control of type Section and adds it to the current container. AddPDActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) Creates a new control of type Section that is driven by a property and adds it to the current container. AddPDOrderedSection(OrderedSectionGroup, String, String, Single, Single) Creates a new control of type Section that is driven by a property and adds it to the current container. SetDeleteIcon<T>(T, GUIStyle, Color) Sets up the color of the DeleteIcon. SetDownIcon<T>(T, GUIStyle, Color) Sets up the color of the DownIcon. SetUpIcon<T>(T, GUIStyle, Color) Sets up the color of the UpIcon."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.SetDeleteIcon.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.SetDeleteIcon.html",
    "title": "Method SetDeleteIcon | Simple Shader Inspectors Documentation",
    "keywords": "Method SetDeleteIcon SetDeleteIcon<T>(T, GUIStyle, Color) Sets up the color of the DeleteIcon. Declaration public static T SetDeleteIcon<T>(this T section, GUIStyle deleteIcon, Color color = default(Color)) where T : OrderedSection Parameters Type Name Description T section Section this method extends to. GUIStyle deleteIcon Style with the background of the delete icon. Color color Color of the icon. Returns Type Description T The OrderedSection Object that has been modified. Type Parameters Name Description T Type of the section object this method extends to."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.SetDownIcon.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.SetDownIcon.html",
    "title": "Method SetDownIcon | Simple Shader Inspectors Documentation",
    "keywords": "Method SetDownIcon SetDownIcon<T>(T, GUIStyle, Color) Sets up the color of the DownIcon. Declaration public static T SetDownIcon<T>(this T section, GUIStyle downIcon, Color color = default(Color)) where T : OrderedSection Parameters Type Name Description T section Section this method extends to. GUIStyle downIcon Style with the background of the down icon. Color color Color of the icon. Returns Type Description T The OrderedSection Object that has been modified. Type Parameters Name Description T Type of the section object this method extends to."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.SetUpIcon.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.Sections.SectionsControlExtensions.SetUpIcon.html",
    "title": "Method SetUpIcon | Simple Shader Inspectors Documentation",
    "keywords": "Method SetUpIcon SetUpIcon<T>(T, GUIStyle, Color) Sets up the color of the UpIcon. Declaration public static T SetUpIcon<T>(this T section, GUIStyle upIcon, Color color = default(Color)) where T : OrderedSection Parameters Type Name Description T section Section this method extends to. GUIStyle upIcon Style with the background of the up icon. Color color Color of the icon. Returns Type Description T The OrderedSection Object that has been modified. Type Parameters Name Description T Type of the section object this method extends to."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.-ctor.html",
    "title": "Constructor SpaceControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor SpaceControl SpaceControl(Int32) Default constructor of LabelControl . Declaration public SpaceControl(int space = 0) Parameters Type Name Description Int32 space"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.html",
    "title": "Class SpaceControl | Simple Shader Inspectors Documentation",
    "keywords": "Class SpaceControl Represents a label without any property. Inheritance Object SimpleControl SpaceControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class SpaceControl : SimpleControl Constructors Name Description SpaceControl(Int32) Default constructor of LabelControl . Properties Name Description Space Amount of space in pixels this control has. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.Space.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.SpaceControl.Space.html",
    "title": "Property Space | Simple Shader Inspectors Documentation",
    "keywords": "Property Space Space Amount of space in pixels this control has. Declaration public int Space { get; set; } Property Value Type Description Int32"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl._hasExtra1.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl._hasExtra1.html",
    "title": "Field _hasExtra1 | Simple Shader Inspectors Documentation",
    "keywords": "Field _hasExtra1 Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected bool _hasExtra1 Returns Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl._hasExtra2.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl._hasExtra2.html",
    "title": "Field _hasExtra2 | Simple Shader Inspectors Documentation",
    "keywords": "Field _hasExtra2 Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected bool _hasExtra2 Returns Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl._isUVButtonPressed.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl._isUVButtonPressed.html",
    "title": "Field _isUVButtonPressed | Simple Shader Inspectors Documentation",
    "keywords": "Field _isUVButtonPressed Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected bool _isUVButtonPressed Returns Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.AdditionalProperties.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.AdditionalProperties.html",
    "title": "Property AdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalProperties AdditionalProperties Extra properties array. In this control the properties instanced in the array are as foolows: [0] = first extra property. [1] = second extra property. Declaration public AdditionalProperty[] AdditionalProperties { get; set; } Property Value Type Description AdditionalProperty [] Implements IAdditionalProperties.AdditionalProperties"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.-ctor.html",
    "title": "Constructor TextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor TextureControl TextureControl(String, String, String) Default constructor of TextureControl Declaration public TextureControl(string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description String propertyName Material property name. String extraPropertyName1 First additional material property name. Optional. String extraPropertyName2 Second additional material property name. Optional."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.DrawTextureSingleLine.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.DrawTextureSingleLine.html",
    "title": "Method DrawTextureSingleLine | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawTextureSingleLine DrawTextureSingleLine(MaterialEditor) Declaration protected void DrawTextureSingleLine(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.HasHDRColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.HasHDRColor.html",
    "title": "Property HasHDRColor | Simple Shader Inspectors Documentation",
    "keywords": "Property HasHDRColor HasHDRColor Boolean that defines if the control needs to render the second material property as an hdr color field, only works if there is only one extra property and it's a color property. Declaration public bool HasHDRColor { get; set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.html",
    "title": "Class TextureControl | Simple Shader Inspectors Documentation",
    "keywords": "Class TextureControl Represents a control for a texture property with possibility to inline 2 extra properties. Inheritance Object SimpleControl PropertyControl TextureControl GradientTextureControl GradientTextureControl GradientTextureControl TextureGeneratorControl TextureGeneratorControl TextureGeneratorControl Implements IAdditionalProperties Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class TextureControl : PropertyControl, IAdditionalProperties Constructors Name Description TextureControl(String, String, String) Default constructor of TextureControl Fields Name Description _hasExtra1 _hasExtra2 _isUVButtonPressed Properties Name Description AdditionalProperties Extra properties array. In this control the properties instanced in the array are as foolows: [0] = first extra property. [1] = second extra property. HasHDRColor Boolean that defines if the control needs to render the second material property as an hdr color field, only works if there is only one extra property and it's a color property. ShowUvOptions Boolean that defines if the control will show up an additional button to have access to the texture tiling and offset options. UVAreaColor Background color for the uv button. UVAreaStyle GUIStyle for the uv options button. UVButtonColor Background color for the uv button. UVButtonStyle GUIStyle for the uv options button. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. DrawTextureSingleLine(MaterialEditor) Extension Methods BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean) ControlExtensions.SetUvOptions<T>(T, Boolean) ControlExtensions.SetHasHDRColor<T>(T, Boolean) ControlExtensions.SetUVButtonStyle<T>(T, GUIStyle) ControlExtensions.SetUVAreaStyle<T>(T, GUIStyle)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.ShowUvOptions.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.ShowUvOptions.html",
    "title": "Property ShowUvOptions | Simple Shader Inspectors Documentation",
    "keywords": "Property ShowUvOptions ShowUvOptions Boolean that defines if the control will show up an additional button to have access to the texture tiling and offset options. Declaration public bool ShowUvOptions { get; set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVAreaColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVAreaColor.html",
    "title": "Property UVAreaColor | Simple Shader Inspectors Documentation",
    "keywords": "Property UVAreaColor UVAreaColor Background color for the uv button. Declaration public Color UVAreaColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVAreaStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVAreaStyle.html",
    "title": "Property UVAreaStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property UVAreaStyle UVAreaStyle GUIStyle for the uv options button. Declaration public GUIStyle UVAreaStyle { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVButtonColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVButtonColor.html",
    "title": "Property UVButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property UVButtonColor UVButtonColor Background color for the uv button. Declaration public Color UVButtonColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVButtonStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureControl.UVButtonStyle.html",
    "title": "Property UVButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property UVButtonStyle UVButtonStyle GUIStyle for the uv options button. Declaration public GUIStyle UVButtonStyle { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.AdditionalContent.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.AdditionalContent.html",
    "title": "Property AdditionalContent | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalContent AdditionalContent Additional localization strings. Declaration public AdditionalLocalization[] AdditionalContent { get; set; } Property Value Type Description AdditionalLocalization [] Implements IAdditionalLocalization.AdditionalContent"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides TextureControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.-ctor.html",
    "title": "Constructor TextureGeneratorControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor TextureGeneratorControl TextureGeneratorControl(String, String, String) Default constructor of TextureGeneratorControl Declaration public TextureGeneratorControl(string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description String propertyName Material property name. String extraPropertyName1 First additional material property name. Optional. String extraPropertyName2 Second additional material property name. Optional. TextureGeneratorControl(ComputeShader, String, String, String, String) Default constructor of TextureGeneratorControl Declaration public TextureGeneratorControl(ComputeShader compute, string computeOptionsJson, string propertyName, string extraPropertyName1 = null, string extraPropertyName2 = null) Parameters Type Name Description ComputeShader compute String computeOptionsJson String propertyName Material property name. String extraPropertyName1 First additional material property name. Optional. String extraPropertyName2 Second additional material property name. Optional."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorButtonColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorButtonColor.html",
    "title": "Property GeneratorButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorButtonColor GeneratorButtonColor Background color for the gradient editor button. Declaration public Color GeneratorButtonColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorButtonStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorButtonStyle.html",
    "title": "Property GeneratorButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorButtonStyle GeneratorButtonStyle GUIStyle for the texture generator button. Declaration public GUIStyle GeneratorButtonStyle { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorColor.html",
    "title": "Property GeneratorColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorColor GeneratorColor Background color for the gradient editor button. Declaration public Color GeneratorColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorInputColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorInputColor.html",
    "title": "Property GeneratorInputColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorInputColor GeneratorInputColor Background color for the gradient editor button. Declaration public Color GeneratorInputColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorInputStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorInputStyle.html",
    "title": "Property GeneratorInputStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorInputStyle GeneratorInputStyle GUIStyle for the input background. Declaration public GUIStyle GeneratorInputStyle { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorSaveButtonColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorSaveButtonColor.html",
    "title": "Property GeneratorSaveButtonColor | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorSaveButtonColor GeneratorSaveButtonColor Background color for the gradient editor button. Declaration public Color GeneratorSaveButtonColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorSaveButtonStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorSaveButtonStyle.html",
    "title": "Property GeneratorSaveButtonStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorSaveButtonStyle GeneratorSaveButtonStyle GUIStyle for the texture generator save button. Declaration public GUIStyle GeneratorSaveButtonStyle { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorStyle.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.GeneratorStyle.html",
    "title": "Property GeneratorStyle | Simple Shader Inspectors Documentation",
    "keywords": "Property GeneratorStyle GeneratorStyle GUIStyle for the texture generator background. Declaration public GUIStyle GeneratorStyle { get; set; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorControl.html",
    "title": "Class TextureGeneratorControl | Simple Shader Inspectors Documentation",
    "keywords": "Class TextureGeneratorControl Represents a control for a texture property with possibility to inline 2 extra properties. Also includes a texture generator. Inheritance Object SimpleControl PropertyControl TextureControl TextureGeneratorControl Implements IAdditionalProperties IAdditionalLocalization Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class TextureGeneratorControl : TextureControl, IAdditionalProperties, IAdditionalLocalization Constructors Name Description TextureGeneratorControl(String, String, String) Default constructor of TextureGeneratorControl TextureGeneratorControl(ComputeShader, String, String, String, String) Default constructor of TextureGeneratorControl Properties Name Description AdditionalContent Additional localization strings. GeneratorButtonColor Background color for the gradient editor button. GeneratorButtonStyle GUIStyle for the texture generator button. GeneratorColor Background color for the gradient editor button. GeneratorInputColor Background color for the gradient editor button. GeneratorInputStyle GUIStyle for the input background. GeneratorSaveButtonColor Background color for the gradient editor button. GeneratorSaveButtonStyle GUIStyle for the texture generator save button. GeneratorStyle GUIStyle for the texture generator background. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods AdditionalContentExtensions.InizializeLocalizationWithNames(IAdditionalLocalization, String[]) BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean) ControlExtensions.SetUvOptions<T>(T, Boolean) ControlExtensions.SetHasHDRColor<T>(T, Boolean) ControlExtensions.SetUVButtonStyle<T>(T, GUIStyle) ControlExtensions.SetUVAreaStyle<T>(T, GUIStyle) ControlExtensions.SetUVButtonColor<T>(T, Color) ControlExtensions.SetUVAreaColor<T>(T, Color) ControlExtensions.SetGeneratorButtonStyle<T>(T, GUIStyle) ControlExtensions.SetGeneratorSaveButtonStyle<T>(T, GUIStyle) ControlExtensions.SetGeneratorStyle<T>(T, GUIStyle) ControlExtensions.SetGeneratorInputStyle<T>(T, GUIStyle) ControlExtensions.SetGeneratorButtonColor<T>(T, Color) ControlExtensions.SetGeneratorSaveButtonColor<T>(T, Color) ControlExtensions.SetGeneratorColor<T>(T, Color) ControlExtensions.SetGeneratorInputColor<T>(T, Color)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorHelper.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TextureGeneratorHelper.html",
    "title": "Class TextureGeneratorHelper | Simple Shader Inspectors Documentation",
    "keywords": "Class TextureGeneratorHelper Helper class for TextureGeneratorControl. Inheritance Object TextureGeneratorHelper Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public static class TextureGeneratorHelper"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.-ctor.html",
    "title": "Constructor TilingAndOffsetControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor TilingAndOffsetControl TilingAndOffsetControl(String) Default constructor of TilingAndOffsetControl Declaration public TilingAndOffsetControl(string propertyName) Parameters Type Name Description String propertyName Material property name."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.TilingAndOffsetControl.html",
    "title": "Class TilingAndOffsetControl | Simple Shader Inspectors Documentation",
    "keywords": "Class TilingAndOffsetControl Represents a control for a texture tiling and offset field. Inheritance Object SimpleControl PropertyControl TilingAndOffsetControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class TilingAndOffsetControl : PropertyControl Constructors Name Description TilingAndOffsetControl(String) Default constructor of TilingAndOffsetControl Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.-ctor.html",
    "title": "Constructor ToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ToggleControl ToggleControl(String, Single, Single) Default constructor of ToggleControl Declaration public ToggleControl(string propertyName, float falseValue = 0F, float trueValue = 1F) Parameters Type Name Description String propertyName Material property name. Single falseValue Float value that the material property will have if the checkbox is not checked. Optional (default: 0). Single trueValue Float value that the material property will have if the checkbox is checked. Optional (default: 1)."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.falseValue.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.falseValue.html",
    "title": "Field falseValue | Simple Shader Inspectors Documentation",
    "keywords": "Field falseValue Float value that the Enabled bool gets converted if false. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected readonly float falseValue Returns Single"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.html",
    "title": "Class ToggleControl | Simple Shader Inspectors Documentation",
    "keywords": "Class ToggleControl Represents a control with a checkbox for setting a float property to 2 defined values. Inheritance Object SimpleControl PropertyControl ToggleControl ToggleListControl ToggleListControl ToggleListControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class ToggleControl : PropertyControl Constructors Name Description ToggleControl(String, Single, Single) Default constructor of ToggleControl Fields Name Description falseValue Float value that the Enabled bool gets converted if false. trueValue Float value that the Enabled bool gets converted if true. Properties Name Description ToggleEnabled Boolean indicating if the toggle is enabled or not. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.ToggleEnabled.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.ToggleEnabled.html",
    "title": "Property ToggleEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Property ToggleEnabled ToggleEnabled Boolean indicating if the toggle is enabled or not. Declaration public bool ToggleEnabled { get; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.trueValue.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleControl.trueValue.html",
    "title": "Field trueValue | Simple Shader Inspectors Documentation",
    "keywords": "Field trueValue Float value that the Enabled bool gets converted if true. Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax protected readonly float trueValue Returns Single"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides ToggleControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.Controls.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls that can be hidden by this control. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > Implements IControlContainer.Controls"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.-ctor.html",
    "title": "Constructor ToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ToggleListControl ToggleListControl(String, Single, Single) Default constructor of ToggleListControl Declaration public ToggleListControl(string propertyName, float falseValue = 0F, float trueValue = 1F) Parameters Type Name Description String propertyName Material property name. Single falseValue Float value that the material property will have if the checkbox is not checked. Optional (default: 0). Single trueValue Float value that the material property will have if the checkbox is checked. Optional (default: 1)."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.ToggleListControl.html",
    "title": "Class ToggleListControl | Simple Shader Inspectors Documentation",
    "keywords": "Class ToggleListControl Represents a control with a checkbox for setting a float property to 2 defined values. Also shows and hides a list of controls based on its state. Inheritance Object SimpleControl PropertyControl ToggleControl ToggleListControl Implements IControlContainer Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class ToggleListControl : ToggleControl, IControlContainer Constructors Name Description ToggleListControl(String, Single, Single) Default constructor of ToggleListControl Properties Name Description Controls List of controls that can be hidden by this control. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.AddPropertyControl(IControlContainer, String) BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean) ControlExtensions.AddColorControl(IControlContainer, String, Boolean) ControlExtensions.AddControlContainer(IControlContainer) ControlExtensions.AddEnumControl<TEnum>(IControlContainer, String) ControlExtensions.AddGradientTextureControl(IControlContainer, String, String) ControlExtensions.AddKeywordToggleControl(IControlContainer, String) ControlExtensions.AddKeywordToggleListControl(IControlContainer, String) ControlExtensions.AddLabelControl(IControlContainer, String) ControlExtensions.AddLightmapEmissionControl(IControlContainer) ControlExtensions.AddSpaceControl(IControlContainer, Int32) ControlExtensions.AddTextureControl(IControlContainer, String, String, String) ControlExtensions.AddTextureGeneratorControl(IControlContainer, String, String, String) ControlExtensions.AddTilingAndOffsetControl(IControlContainer, String) ControlExtensions.AddToggleControl(IControlContainer, String, Single, Single) ControlExtensions.AddToggleListControl(IControlContainer, String, Single, Single) ControlExtensions.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) ControlExtensions.AddVertexStreamsControl(IControlContainer, String) SectionsControlExtensions.AddActivatableSection(IControlContainer, String, Single, Single) SectionsControlExtensions.AddPDActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) SectionControlExtensions.AddOrderedSectionGroup(IControlContainer, String) SectionControlExtensions.AddSection(IControlContainer, String) SectionControlExtensions.AddPDSection(IControlContainer, String, Single, Single)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides PropertyControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.-ctor.html",
    "title": "Constructor VectorControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor VectorControl VectorControl(String, Boolean, Boolean, Boolean, Boolean) Default constructor of VectorControl Declaration public VectorControl(string propertyName, bool isXVisible = true, bool isYVisible = true, bool isZVisible = true, bool isWVisible = true) Parameters Type Name Description String propertyName Material property name. Boolean isXVisible Shows the x component. Optional (Default true). Boolean isYVisible Shows the y component. Optional (Default true). Boolean isZVisible Shows the z component. Optional (Default true). Boolean isWVisible Shows the w component. Optional (Default true)."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.html",
    "title": "Class VectorControl | Simple Shader Inspectors Documentation",
    "keywords": "Class VectorControl Represents a vector control. Inheritance Object SimpleControl PropertyControl VectorControl Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class VectorControl : PropertyControl Constructors Name Description VectorControl(String, Boolean, Boolean, Boolean, Boolean) Default constructor of VectorControl Properties Name Description IsWVisible IsXVisible IsYVisible IsZVisible Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsWVisible.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsWVisible.html",
    "title": "Property IsWVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsWVisible IsWVisible Declaration public bool IsWVisible { get; protected set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsXVisible.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsXVisible.html",
    "title": "Property IsXVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsXVisible IsXVisible Declaration public bool IsXVisible { get; protected set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsYVisible.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsYVisible.html",
    "title": "Property IsYVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsYVisible IsYVisible Declaration public bool IsYVisible { get; protected set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsZVisible.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VectorControl.IsZVisible.html",
    "title": "Property IsZVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsZVisible IsZVisible Declaration public bool IsZVisible { get; protected set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.AdditionalContent.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.AdditionalContent.html",
    "title": "Property AdditionalContent | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalContent AdditionalContent Declaration public AdditionalLocalization[] AdditionalContent { get; set; } Property Value Type Description AdditionalLocalization [] Implements IAdditionalLocalization.AdditionalContent"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.AddVertexStream.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.AddVertexStream.html",
    "title": "Method AddVertexStream | Simple Shader Inspectors Documentation",
    "keywords": "Method AddVertexStream AddVertexStream(ParticleSystemVertexStream) Declaration public VertexStreamsControl AddVertexStream(ParticleSystemVertexStream stream) Parameters Type Name Description ParticleSystemVertexStream stream Returns Type Description VertexStreamsControl"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.-ctor.html",
    "title": "Constructor VertexStreamsControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor VertexStreamsControl VertexStreamsControl(String) Declaration public VertexStreamsControl(string alias) Parameters Type Name Description String alias"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.html",
    "title": "Class VertexStreamsControl | Simple Shader Inspectors Documentation",
    "keywords": "Class VertexStreamsControl Inheritance Object SimpleControl VertexStreamsControl Implements IAdditionalLocalization Namespace : VRLabs.SimpleShaderInspectors.Controls Syntax public class VertexStreamsControl : SimpleControl, IAdditionalLocalization Constructors Name Description VertexStreamsControl(String) Properties Name Description AdditionalContent Methods Name Description AddVertexStream(ParticleSystemVertexStream) ControlGUI(MaterialEditor) RemoveVertexStream(ParticleSystemVertexStream) Extension Methods AdditionalContentExtensions.InizializeLocalizationWithNames(IAdditionalLocalization, String[]) BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.RemoveVertexStream.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Controls.VertexStreamsControl.RemoveVertexStream.html",
    "title": "Method RemoveVertexStream | Simple Shader Inspectors Documentation",
    "keywords": "Method RemoveVertexStream RemoveVertexStream(ParticleSystemVertexStream) Declaration public VertexStreamsControl RemoveVertexStream(ParticleSystemVertexStream stream) Parameters Type Name Description ParticleSystemVertexStream stream Returns Type Description VertexStreamsControl"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors Classes AdditionalContentExtensions AdditionalLocalization This class is a simple class containing a Name used for finding the localization content and a GUIContent object containing said content. AdditionalProperty This class defines an additional property. BaseControlExtensions Static class containing all control extension methods in the base namespace of Simple Shader Inspectors. ComputeShaders Default compute shader assets and settings natively available in Simple Shader Inspectors. PropertyControl Represents a general purpose control for a property that will be drawn based on the property type. SimpleControl Base class of all controls used by Simple Shader Inspectors. SimpleShaderInspector Base class for creating new inspectors. SSIExtensions This class contains extension methods that are meant to be used inside a SimpleShaderInspector child class. SSIGUIHelper StaticDictionaries Static class containing dictionaries that can be used by controls for various needs. Styles Default styles available natively in SimpleShaderInspectors. Textures Default textures available natively in Simple Shader Inspectors. Interfaces IAdditionalLocalization Interface used to define the need for a control to use additional localization content IAdditionalProperties Interface used to define the need for additional material properties to handle. IControlContainer Interface that defines an object that contains a list of SimpleControls to draw. INonAnimatableProperty Interface that defines an object that has a property that shouldn't be animated by the animation window"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.IAdditionalLocalization.AdditionalContent.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.IAdditionalLocalization.AdditionalContent.html",
    "title": "Property AdditionalContent | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalContent AdditionalContent Array containing the additional localization elements needed by the control. Declaration AdditionalLocalization[] AdditionalContent { get; set; } Property Value Type Description AdditionalLocalization []"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.IAdditionalLocalization.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.IAdditionalLocalization.html",
    "title": "Interface IAdditionalLocalization | Simple Shader Inspectors Documentation",
    "keywords": "Interface IAdditionalLocalization Interface used to define the need for a control to use additional localization content Namespace : VRLabs.SimpleShaderInspectors Syntax public interface IAdditionalLocalization Properties Name Description AdditionalContent Array containing the additional localization elements needed by the control. Extension Methods AdditionalContentExtensions.InizializeLocalizationWithNames(IAdditionalLocalization, String[])"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.IAdditionalProperties.AdditionalProperties.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.IAdditionalProperties.AdditionalProperties.html",
    "title": "Property AdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Property AdditionalProperties AdditionalProperties Array containing all additional properties the control needs. Declaration AdditionalProperty[] AdditionalProperties { get; set; } Property Value Type Description AdditionalProperty []"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.IAdditionalProperties.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.IAdditionalProperties.html",
    "title": "Interface IAdditionalProperties | Simple Shader Inspectors Documentation",
    "keywords": "Interface IAdditionalProperties Interface used to define the need for additional material properties to handle. Namespace : VRLabs.SimpleShaderInspectors Syntax public interface IAdditionalProperties Properties Name Description AdditionalProperties Array containing all additional properties the control needs."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.IControlContainer.Controls.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.IControlContainer.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls the class implementing this interface will have. Declaration List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl >"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.IControlContainer.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.IControlContainer.html",
    "title": "Interface IControlContainer | Simple Shader Inspectors Documentation",
    "keywords": "Interface IControlContainer Interface that defines an object that contains a list of SimpleControls to draw. Namespace : VRLabs.SimpleShaderInspectors Syntax public interface IControlContainer Properties Name Description Controls List of controls the class implementing this interface will have. Extension Methods BaseControlExtensions.AddPropertyControl(IControlContainer, String) ControlExtensions.AddColorControl(IControlContainer, String, Boolean) ControlExtensions.AddControlContainer(IControlContainer) ControlExtensions.AddEnumControl<TEnum>(IControlContainer, String) ControlExtensions.AddGradientTextureControl(IControlContainer, String, String) ControlExtensions.AddKeywordToggleControl(IControlContainer, String) ControlExtensions.AddKeywordToggleListControl(IControlContainer, String) ControlExtensions.AddLabelControl(IControlContainer, String) ControlExtensions.AddLightmapEmissionControl(IControlContainer) ControlExtensions.AddSpaceControl(IControlContainer, Int32) ControlExtensions.AddTextureControl(IControlContainer, String, String, String) ControlExtensions.AddTextureGeneratorControl(IControlContainer, String, String, String) ControlExtensions.AddTilingAndOffsetControl(IControlContainer, String) ControlExtensions.AddToggleControl(IControlContainer, String, Single, Single) ControlExtensions.AddToggleListControl(IControlContainer, String, Single, Single) ControlExtensions.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) ControlExtensions.AddVertexStreamsControl(IControlContainer, String) SectionsControlExtensions.AddActivatableSection(IControlContainer, String, Single, Single) SectionsControlExtensions.AddPDActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) SectionControlExtensions.AddOrderedSectionGroup(IControlContainer, String) SectionControlExtensions.AddSection(IControlContainer, String) SectionControlExtensions.AddPDSection(IControlContainer, String, Single, Single)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.html",
    "title": "Interface INonAnimatableProperty | Simple Shader Inspectors Documentation",
    "keywords": "Interface INonAnimatableProperty Interface that defines an object that has a property that shouldn't be animated by the animation window Namespace : VRLabs.SimpleShaderInspectors Syntax public interface INonAnimatableProperty Properties Name Description NonAnimatablePropertyChanged Boolean indicating if a non animatable material property need to be updated. Methods Name Description UpdateNonAnimatableProperty(MaterialEditor) Updates the value of the non animatable property"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.NonAnimatablePropertyChanged.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.NonAnimatablePropertyChanged.html",
    "title": "Property NonAnimatablePropertyChanged | Simple Shader Inspectors Documentation",
    "keywords": "Property NonAnimatablePropertyChanged NonAnimatablePropertyChanged Boolean indicating if a non animatable material property need to be updated. Declaration bool NonAnimatablePropertyChanged { get; set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.UpdateNonAnimatableProperty.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.INonAnimatableProperty.UpdateNonAnimatableProperty.html",
    "title": "Method UpdateNonAnimatableProperty | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateNonAnimatableProperty UpdateNonAnimatableProperty(MaterialEditor) Updates the value of the non animatable property Declaration void UpdateNonAnimatableProperty(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.PropertyControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.PropertyControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Draws the control represented by this object. Declaration protected override void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor. Overrides SimpleControl.ControlGUI(MaterialEditor)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.PropertyControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.PropertyControl.-ctor.html",
    "title": "Constructor PropertyControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor PropertyControl PropertyControl(String) Default constructor of PropertyControl . Declaration public PropertyControl(string propertyName) Parameters Type Name Description String propertyName Material property name."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.PropertyControl.HasPropertyUpdated.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.PropertyControl.HasPropertyUpdated.html",
    "title": "Property HasPropertyUpdated | Simple Shader Inspectors Documentation",
    "keywords": "Property HasPropertyUpdated HasPropertyUpdated Boolean indicating if this control updated its property value Declaration public bool HasPropertyUpdated { get; protected set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.PropertyControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.PropertyControl.html",
    "title": "Class PropertyControl | Simple Shader Inspectors Documentation",
    "keywords": "Class PropertyControl Represents a general purpose control for a property that will be drawn based on the property type. Inheritance Object SimpleControl PropertyControl ColorControl ColorControl ColorControl VRLabs.SimpleShaderInspectors.Controls.ConditionalControlContainer EnumControl<TEnum> EnumControl<TEnum> EnumControl<TEnum> VRLabs.SimpleShaderInspectors.Controls.RGBASelectorControl Section Section Section TextureControl TextureControl TextureControl TilingAndOffsetControl TilingAndOffsetControl TilingAndOffsetControl ToggleControl ToggleControl ToggleControl VectorControl VectorControl VectorControl Namespace : VRLabs.SimpleShaderInspectors Syntax public class PropertyControl : SimpleControl Constructors Name Description PropertyControl(String) Default constructor of PropertyControl . Properties Name Description HasPropertyUpdated Boolean indicating if this control updated its property value Property MaterialProperty related to the property shown by this control. PropertyName Name of the property shown by this control. Methods Name Description ControlGUI(MaterialEditor) Draws the control represented by this object. Extension Methods BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.PropertyControl.Property.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.PropertyControl.Property.html",
    "title": "Property Property | Simple Shader Inspectors Documentation",
    "keywords": "Property Property Property MaterialProperty related to the property shown by this control. Declaration public MaterialProperty Property { get; protected set; } Property Value Type Description MaterialProperty"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.PropertyControl.PropertyName.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.PropertyControl.PropertyName.html",
    "title": "Property PropertyName | Simple Shader Inspectors Documentation",
    "keywords": "Property PropertyName PropertyName Name of the property shown by this control. Declaration public string PropertyName { get; protected set; } Property Value Type Description String"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.Content.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.Content.html",
    "title": "Property Content | Simple Shader Inspectors Documentation",
    "keywords": "Property Content Content GuiContent set by the inspector. Declaration public GUIContent Content { get; set; } Property Value Type Description GUIContent"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.ControlAlias.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.ControlAlias.html",
    "title": "Property ControlAlias | Simple Shader Inspectors Documentation",
    "keywords": "Property ControlAlias ControlAlias Name used for localization. Declaration public string ControlAlias { get; set; } Property Value Type Description String"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.ControlGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.ControlGUI.html",
    "title": "Method ControlGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method ControlGUI ControlGUI(MaterialEditor) Content of tha control that is drawn. Declaration protected abstract void ControlGUI(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.-ctor.html",
    "title": "Constructor SimpleControl | Simple Shader Inspectors Documentation",
    "keywords": "Constructor SimpleControl SimpleControl(String) Default constructor of SimpleControl Declaration protected SimpleControl(string alias) Parameters Type Name Description String alias Material property name."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.DrawControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.DrawControl.html",
    "title": "Method DrawControl | Simple Shader Inspectors Documentation",
    "keywords": "Method DrawControl DrawControl(MaterialEditor) Content of tha control that is drawn. Declaration public void DrawControl(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor Material editor."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.html",
    "title": "Class SimpleControl | Simple Shader Inspectors Documentation",
    "keywords": "Class SimpleControl Base class of all controls used by Simple Shader Inspectors. Inheritance Object SimpleControl ControlContainer ControlContainer ControlContainer VRLabs.SimpleShaderInspectors.Controls.HelpBoxControl VRLabs.SimpleShaderInspectors.Controls.HorizontalContainer KeywordToggleControl KeywordToggleControl KeywordToggleControl LabelControl LabelControl LabelControl LightmapEmissionControl LightmapEmissionControl LightmapEmissionControl OrderedSectionGroup OrderedSectionGroup OrderedSectionGroup SpaceControl SpaceControl SpaceControl VertexStreamsControl VertexStreamsControl VertexStreamsControl PropertyControl PropertyControl PropertyControl Namespace : VRLabs.SimpleShaderInspectors Syntax public abstract class SimpleControl Constructors Name Description SimpleControl(String) Default constructor of SimpleControl Properties Name Description Content GuiContent set by the inspector. ControlAlias Name used for localization. IsEnabled Boolean that defines if the control is enabled. IsVisible Boolean that defines if the control is visible. Methods Name Description ControlGUI(MaterialEditor) Content of tha control that is drawn. DrawControl(MaterialEditor) Content of tha control that is drawn. Extension Methods BaseControlExtensions.Alias<T>(T, String) BaseControlExtensions.SetVisibility<T>(T, Boolean) BaseControlExtensions.SetEnabled<T>(T, Boolean)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.IsEnabled.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.IsEnabled.html",
    "title": "Property IsEnabled | Simple Shader Inspectors Documentation",
    "keywords": "Property IsEnabled IsEnabled Boolean that defines if the control is enabled. Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.IsVisible.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleControl.IsVisible.html",
    "title": "Property IsVisible | Simple Shader Inspectors Documentation",
    "keywords": "Property IsVisible IsVisible Boolean that defines if the control is visible. Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.CheckChanges.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.CheckChanges.html",
    "title": "Method CheckChanges | Simple Shader Inspectors Documentation",
    "keywords": "Method CheckChanges CheckChanges(MaterialEditor) Check changes happened to properties. Declaration protected virtual void CheckChanges(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor material editor that uses this GUI."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Controls.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Controls.html",
    "title": "Property Controls | Simple Shader Inspectors Documentation",
    "keywords": "Property Controls Controls List of controls. Declaration public List<SimpleControl> Controls { get; set; } Property Value Type Description List < SimpleControl > Implements IControlContainer.Controls"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.CustomLocalizationShaderName.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.CustomLocalizationShaderName.html",
    "title": "Property CustomLocalizationShaderName | Simple Shader Inspectors Documentation",
    "keywords": "Property CustomLocalizationShaderName CustomLocalizationShaderName String containing a custom folder name for localization of shaders. Declaration protected string CustomLocalizationShaderName { get; set; } Property Value Type Description String"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.DefaultBgColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.DefaultBgColor.html",
    "title": "Property DefaultBgColor | Simple Shader Inspectors Documentation",
    "keywords": "Property DefaultBgColor DefaultBgColor Default gui background color. Declaration public static Color DefaultBgColor { get; set; } Property Value Type Description Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Footer.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Footer.html",
    "title": "Method Footer | Simple Shader Inspectors Documentation",
    "keywords": "Method Footer Footer() Draw method that is used after drawing controls in the inspector. Declaration protected virtual void Footer()"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.GetTextureDestinationPath.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.GetTextureDestinationPath.html",
    "title": "Method GetTextureDestinationPath | Simple Shader Inspectors Documentation",
    "keywords": "Method GetTextureDestinationPath GetTextureDestinationPath(Material, String) Get a path to save a texture relative to the material. Declaration public static string GetTextureDestinationPath(Material mat, string name) Parameters Type Name Description Material mat Material. String name Name of the texture. Returns Type Description String A path for the texture to save."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.HasNonAnimatableProperties.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.HasNonAnimatableProperties.html",
    "title": "Property HasNonAnimatableProperties | Simple Shader Inspectors Documentation",
    "keywords": "Property HasNonAnimatableProperties HasNonAnimatableProperties Boolean value that defines if the inspector should check for non animatable properties. Declaration protected bool HasNonAnimatableProperties { get; set; } Property Value Type Description Boolean"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Header.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Header.html",
    "title": "Method Header | Simple Shader Inspectors Documentation",
    "keywords": "Method Header Header() Draw method that is used before drawing controls in the inspector. Declaration protected virtual void Header()"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.html",
    "title": "Class SimpleShaderInspector | Simple Shader Inspectors Documentation",
    "keywords": "Class SimpleShaderInspector Base class for creating new inspectors. Inheritance Object ShaderGUI SimpleShaderInspector Implements IControlContainer Namespace : VRLabs.SimpleShaderInspectors Syntax public abstract class SimpleShaderInspector : ShaderGUI, IControlContainer Properties Name Description Controls List of controls. CustomLocalizationShaderName String containing a custom folder name for localization of shaders. DefaultBgColor Default gui background color. HasNonAnimatableProperties Boolean value that defines if the inspector should check for non animatable properties. Materials Array of selected materials Methods Name Description CheckChanges(MaterialEditor) Check changes happened to properties. Footer() Draw method that is used after drawing controls in the inspector. GetTextureDestinationPath(Material, String) Get a path to save a texture relative to the material. Header() Draw method that is used before drawing controls in the inspector. OnGUI(MaterialEditor, MaterialProperty[]) Method called when updating UI. Cannot be overridden in child classes, leave it alone. SaveAndGetTexture(Texture2D, String, TextureWrapMode) Saves a texture to a specified path, and returns a reference of the new asset. SaveTexture(Texture2D, String, TextureWrapMode) Saves a texture to a specified path. SetTextureImporterAlpha(Texture2D, Boolean) SetTextureImporterReadable(Texture2D, Boolean) Set the texture readable state. Start() Inizialization method where all the controls are instanced. You need to override it. StartChecks(MaterialEditor) Checks done on the first cycle before UI is drawn. Extension Methods BaseControlExtensions.AddPropertyControl(IControlContainer, String) ControlExtensions.AddColorControl(IControlContainer, String, Boolean) ControlExtensions.AddControlContainer(IControlContainer) ControlExtensions.AddEnumControl<TEnum>(IControlContainer, String) ControlExtensions.AddGradientTextureControl(IControlContainer, String, String) ControlExtensions.AddKeywordToggleControl(IControlContainer, String) ControlExtensions.AddKeywordToggleListControl(IControlContainer, String) ControlExtensions.AddLabelControl(IControlContainer, String) ControlExtensions.AddLightmapEmissionControl(IControlContainer) ControlExtensions.AddSpaceControl(IControlContainer, Int32) ControlExtensions.AddTextureControl(IControlContainer, String, String, String) ControlExtensions.AddTextureGeneratorControl(IControlContainer, String, String, String) ControlExtensions.AddTilingAndOffsetControl(IControlContainer, String) ControlExtensions.AddToggleControl(IControlContainer, String, Single, Single) ControlExtensions.AddToggleListControl(IControlContainer, String, Single, Single) ControlExtensions.AddVectorControl(IControlContainer, String, Boolean, Boolean, Boolean, Boolean) ControlExtensions.AddVertexStreamsControl(IControlContainer, String) SectionsControlExtensions.AddActivatableSection(IControlContainer, String, Single, Single) SectionsControlExtensions.AddPDActivatableSection(IControlContainer, String, String, Single, Single, Single, Single) SectionControlExtensions.AddOrderedSectionGroup(IControlContainer, String) SectionControlExtensions.AddSection(IControlContainer, String) SectionControlExtensions.AddPDSection(IControlContainer, String, Single, Single)"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Materials.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Materials.html",
    "title": "Property Materials | Simple Shader Inspectors Documentation",
    "keywords": "Property Materials Materials Array of selected materials Declaration public Material[] Materials { get; set; } Property Value Type Description Material []"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.OnGUI.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.OnGUI.html",
    "title": "Method OnGUI | Simple Shader Inspectors Documentation",
    "keywords": "Method OnGUI OnGUI(MaterialEditor, MaterialProperty[]) Method called when updating UI. Cannot be overridden in child classes, leave it alone. Declaration public sealed override void OnGUI(MaterialEditor materialEditor, MaterialProperty[] properties) Parameters Type Name Description MaterialEditor materialEditor material editor that uses this GUI. MaterialProperty [] properties List of MaterialProperties currently available on the selected shader. Overrides ShaderGUI.OnGUI(MaterialEditor, MaterialProperty[])"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.SaveAndGetTexture.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.SaveAndGetTexture.html",
    "title": "Method SaveAndGetTexture | Simple Shader Inspectors Documentation",
    "keywords": "Method SaveAndGetTexture SaveAndGetTexture(Texture2D, String, TextureWrapMode) Saves a texture to a specified path, and returns a reference of the new asset. Declaration public static Texture2D SaveAndGetTexture(Texture2D texture, string path, TextureWrapMode mode = TextureWrapMode.Repeat) Parameters Type Name Description Texture2D texture Texture to save. String path path where you want to save the texture. TextureWrapMode mode Texture wrap mode (default: Repeat). Returns Type Description Texture2D A Texture2D that references the newly created asset."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.SaveTexture.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.SaveTexture.html",
    "title": "Method SaveTexture | Simple Shader Inspectors Documentation",
    "keywords": "Method SaveTexture SaveTexture(Texture2D, String, TextureWrapMode) Saves a texture to a specified path. Declaration public static void SaveTexture(Texture2D texture, string path, TextureWrapMode mode = TextureWrapMode.Repeat) Parameters Type Name Description Texture2D texture Texture to save. String path path where you want to save the texture. TextureWrapMode mode Texture wrap mode (default: Repeat)."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.SetTextureImporterAlpha.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.SetTextureImporterAlpha.html",
    "title": "Method SetTextureImporterAlpha | Simple Shader Inspectors Documentation",
    "keywords": "Method SetTextureImporterAlpha SetTextureImporterAlpha(Texture2D, Boolean) Declaration public static void SetTextureImporterAlpha(Texture2D texture, bool alphaIsTransparency) Parameters Type Name Description Texture2D texture Boolean alphaIsTransparency"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.SetTextureImporterReadable.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.SetTextureImporterReadable.html",
    "title": "Method SetTextureImporterReadable | Simple Shader Inspectors Documentation",
    "keywords": "Method SetTextureImporterReadable SetTextureImporterReadable(Texture2D, Boolean) Set the texture readable state. Declaration public static void SetTextureImporterReadable(Texture2D texture, bool isReadable) Parameters Type Name Description Texture2D texture Texture Boolean isReadable Does the texture need to be readable."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Start.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.Start.html",
    "title": "Method Start | Simple Shader Inspectors Documentation",
    "keywords": "Method Start Start() Inizialization method where all the controls are instanced. You need to override it. Declaration protected abstract void Start()"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.StartChecks.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SimpleShaderInspector.StartChecks.html",
    "title": "Method StartChecks | Simple Shader Inspectors Documentation",
    "keywords": "Method StartChecks StartChecks(MaterialEditor) Checks done on the first cycle before UI is drawn. Declaration protected virtual void StartChecks(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor material editor that uses this GUI."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.html",
    "title": "Class SSIExtensions | Simple Shader Inspectors Documentation",
    "keywords": "Class SSIExtensions This class contains extension methods that are meant to be used inside a SimpleShaderInspector child class. Inheritance Object SSIExtensions Namespace : VRLabs.SimpleShaderInspectors Syntax public static class SSIExtensions Methods Name Description IsKeywordMixedValue(Material[], String) Gets the mixed value state of a keyword on the materials array SetInt(Material[], String, Int32) Set int to all materials in the array. SetKeyword(Material[], String, Boolean) Sets a keyword state to all materials in the array. SetOverrideTag(Material[], String, String) Set override tag to all materials in the array. SetRenderQueue(Material[], Int32) Set render queue to all materials in the array. SetVector(Material[], String, Vector4) Set vector to all materials in the array."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.IsKeywordMixedValue.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.IsKeywordMixedValue.html",
    "title": "Method IsKeywordMixedValue | Simple Shader Inspectors Documentation",
    "keywords": "Method IsKeywordMixedValue IsKeywordMixedValue(Material[], String) Gets the mixed value state of a keyword on the materials array Declaration public static bool IsKeywordMixedValue(this Material[] materials, string keyword) Parameters Type Name Description Material [] materials Material array this method extends to. String keyword The keyword to check against. Returns Type Description Boolean True if the keyword has mixed values, false otherwise."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.SetInt.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.SetInt.html",
    "title": "Method SetInt | Simple Shader Inspectors Documentation",
    "keywords": "Method SetInt SetInt(Material[], String, Int32) Set int to all materials in the array. Declaration public static void SetInt(this Material[] materials, string name, int value) Parameters Type Name Description Material [] materials Material array this method extends to. String name Name of the int. Int32 value Value of the int."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.SetKeyword.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.SetKeyword.html",
    "title": "Method SetKeyword | Simple Shader Inspectors Documentation",
    "keywords": "Method SetKeyword SetKeyword(Material[], String, Boolean) Sets a keyword state to all materials in the array. Declaration public static void SetKeyword(this Material[] materials, string keyword, bool state) Parameters Type Name Description Material [] materials Material array this method extends to. String keyword The keyword that is being toggled. Boolean state Toggle value."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.SetOverrideTag.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.SetOverrideTag.html",
    "title": "Method SetOverrideTag | Simple Shader Inspectors Documentation",
    "keywords": "Method SetOverrideTag SetOverrideTag(Material[], String, String) Set override tag to all materials in the array. Declaration public static void SetOverrideTag(this Material[] materials, string tagName, string value) Parameters Type Name Description Material [] materials Material array this method extends to. String tagName Name of the tag. String value Value of the tag."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.SetRenderQueue.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.SetRenderQueue.html",
    "title": "Method SetRenderQueue | Simple Shader Inspectors Documentation",
    "keywords": "Method SetRenderQueue SetRenderQueue(Material[], Int32) Set render queue to all materials in the array. Declaration public static void SetRenderQueue(this Material[] materials, int queue) Parameters Type Name Description Material [] materials Material array this method extends to. Int32 queue Render queue value."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.SetVector.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIExtensions.SetVector.html",
    "title": "Method SetVector | Simple Shader Inspectors Documentation",
    "keywords": "Method SetVector SetVector(Material[], String, Vector4) Set vector to all materials in the array. Declaration public static void SetVector(this Material[] materials, string name, Vector4 value) Parameters Type Name Description Material [] materials Material array this method extends to. String name Name of the Vector4. Vector4 value Value of the Vector4."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.GetControlRectForSingleLine.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.GetControlRectForSingleLine.html",
    "title": "Method GetControlRectForSingleLine | Simple Shader Inspectors Documentation",
    "keywords": "Method GetControlRectForSingleLine GetControlRectForSingleLine() Declaration public static Rect GetControlRectForSingleLine() Returns Type Description Rect"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.html",
    "title": "Class SSIGUIHelper | Simple Shader Inspectors Documentation",
    "keywords": "Class SSIGUIHelper Inheritance Object SSIGUIHelper Namespace : VRLabs.SimpleShaderInspectors Syntax public static class SSIGUIHelper Methods Name Description GetControlRectForSingleLine() TexturePropertyWithHDRColorFixed(MaterialEditor, GUIContent, MaterialProperty, MaterialProperty, Boolean) Draw a texture property with an HDR color field, it's the same as MaterialEditor.TexturePropertyWithHDRColor but it adds a fix for usage under indentation that would normally break it."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.TexturePropertyWithHDRColorFixed.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.SSIGUIHelper.TexturePropertyWithHDRColorFixed.html",
    "title": "Method TexturePropertyWithHDRColorFixed | Simple Shader Inspectors Documentation",
    "keywords": "Method TexturePropertyWithHDRColorFixed TexturePropertyWithHDRColorFixed(MaterialEditor, GUIContent, MaterialProperty, MaterialProperty, Boolean) Draw a texture property with an HDR color field, it's the same as MaterialEditor.TexturePropertyWithHDRColor but it adds a fix for usage under indentation that would normally break it. Declaration public static Rect TexturePropertyWithHDRColorFixed(this MaterialEditor editor, GUIContent label, MaterialProperty textureProp, MaterialProperty colorProperty, bool showAlpha) Parameters Type Name Description MaterialEditor editor material editor GUIContent label label to show MaterialProperty textureProp texture material property MaterialProperty colorProperty color material property Boolean showAlpha show alpha channel Returns Type Description Rect"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.StaticDictionaries.BoolDictionary.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.StaticDictionaries.BoolDictionary.html",
    "title": "Property BoolDictionary | Simple Shader Inspectors Documentation",
    "keywords": "Property BoolDictionary BoolDictionary Dictionary containing boolean values. Declaration public static Dictionary<string, bool> BoolDictionary { get; set; } Property Value Type Description Dictionary < String , Boolean >"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.StaticDictionaries.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.StaticDictionaries.html",
    "title": "Class StaticDictionaries | Simple Shader Inspectors Documentation",
    "keywords": "Class StaticDictionaries Static class containing dictionaries that can be used by controls for various needs. Inheritance Object StaticDictionaries Namespace : VRLabs.SimpleShaderInspectors Syntax public static class StaticDictionaries Properties Name Description BoolDictionary Dictionary containing boolean values."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.BoldCenter.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.BoldCenter.html",
    "title": "Property BoldCenter | Simple Shader Inspectors Documentation",
    "keywords": "Property BoldCenter BoldCenter Style of a bold label with a center anchor. Declaration public static GUIStyle BoldCenter { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.BoldLeft.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.BoldLeft.html",
    "title": "Property BoldLeft | Simple Shader Inspectors Documentation",
    "keywords": "Property BoldLeft BoldLeft Style of a bold label with a left anchor. Declaration public static GUIStyle BoldLeft { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.Box.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.Box.html",
    "title": "Property Box | Simple Shader Inspectors Documentation",
    "keywords": "Property Box Box Box-like Style. Declaration public static GUIStyle Box { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.BoxHeavyBorder.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.BoxHeavyBorder.html",
    "title": "Property BoxHeavyBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property BoxHeavyBorder BoxHeavyBorder Style for a box. The border is less transparent than background. Declaration public static GUIStyle BoxHeavyBorder { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.BoxLightBorder.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.BoxLightBorder.html",
    "title": "Property BoxLightBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property BoxLightBorder BoxLightBorder Style for a box. The border is more transparent than background. Declaration public static GUIStyle BoxLightBorder { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.Bubble.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.Bubble.html",
    "title": "Property Bubble | Simple Shader Inspectors Documentation",
    "keywords": "Property Bubble Bubble Style that uses the same background of a button. Declaration public static GUIStyle Bubble { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.CenterLabel.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.CenterLabel.html",
    "title": "Property CenterLabel | Simple Shader Inspectors Documentation",
    "keywords": "Property CenterLabel CenterLabel Style of a label with a center anchor. Declaration public static GUIStyle CenterLabel { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.CreateStyleFromSprite.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.CreateStyleFromSprite.html",
    "title": "Method CreateStyleFromSprite | Simple Shader Inspectors Documentation",
    "keywords": "Method CreateStyleFromSprite CreateStyleFromSprite(String, String, String, String) Creates a GUIStyle using the given sprite names. Declaration public static GUIStyle CreateStyleFromSprite(string normal, string active = null, string focused = null, string hover = null) Parameters Type Name Description String normal Sprite to use on normal state. String active Sprite to use on active state. String focused Sprite to use on focused state. String hover Sprite to use on hover state. Returns Type Description GUIStyle The generated GUIStyle CreateStyleFromSprite(RectOffset, String, String, String, String) Creates a GUIStyle using the given sprite names and padding. Declaration public static GUIStyle CreateStyleFromSprite(RectOffset padding, string normal, string active = null, string focused = null, string hover = null) Parameters Type Name Description RectOffset padding Padding of the GUIStyle. String normal Sprite to use on normal state. String active Sprite to use on active state. String focused Sprite to use on focused state. String hover Sprite to use on hover state. Returns Type Description GUIStyle The generated GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.DeleteIcon.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.DeleteIcon.html",
    "title": "Property DeleteIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property DeleteIcon DeleteIcon Style for a delete button. Declaration public static GUIStyle DeleteIcon { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.DownIcon.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.DownIcon.html",
    "title": "Property DownIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property DownIcon DownIcon Style for a down button. Declaration public static GUIStyle DownIcon { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.GearIcon.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.GearIcon.html",
    "title": "Property GearIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property GearIcon GearIcon Style for a gear icon. Declaration public static GUIStyle GearIcon { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.html",
    "title": "Class Styles | Simple Shader Inspectors Documentation",
    "keywords": "Class Styles Default styles available natively in SimpleShaderInspectors. Inheritance Object Styles Namespace : VRLabs.SimpleShaderInspectors Syntax public static class Styles Properties Name Description BoldCenter Style of a bold label with a center anchor. BoldLeft Style of a bold label with a left anchor. Box Box-like Style. BoxHeavyBorder Style for a box. The border is less transparent than background. BoxLightBorder Style for a box. The border is more transparent than background. Bubble Style that uses the same background of a button. CenterLabel Style of a label with a center anchor. DeleteIcon Style for a delete button. DownIcon Style for a down button. GearIcon Style for a gear icon. MultilineLabel Style of a label that can take multiple lines. RightLabel Style of a label with a right anchor. SSILogoDark Simple Shader Inspectors logo for dark theme. SSILogoLight Simple Shader Inspectors logo for light theme. TextureBoxHeavyBorder Style for a box pointing to a texture upwards. The border is less transparent than background. TextureBoxLightBorder Style for a box pointing to a texture upwards. The border is more transparent than background. UpIcon Style for a up button. Methods Name Description CreateStyleFromSprite(String, String, String, String) Creates a GUIStyle using the given sprite names. CreateStyleFromSprite(RectOffset, String, String, String, String) Creates a GUIStyle using the given sprite names and padding."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.MultilineLabel.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.MultilineLabel.html",
    "title": "Property MultilineLabel | Simple Shader Inspectors Documentation",
    "keywords": "Property MultilineLabel MultilineLabel Style of a label that can take multiple lines. Declaration public static GUIStyle MultilineLabel { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.RightLabel.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.RightLabel.html",
    "title": "Property RightLabel | Simple Shader Inspectors Documentation",
    "keywords": "Property RightLabel RightLabel Style of a label with a right anchor. Declaration public static GUIStyle RightLabel { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.SSILogoDark.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.SSILogoDark.html",
    "title": "Property SSILogoDark | Simple Shader Inspectors Documentation",
    "keywords": "Property SSILogoDark SSILogoDark Simple Shader Inspectors logo for dark theme. Declaration public static Texture2D SSILogoDark { get; } Property Value Type Description Texture2D"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.SSILogoLight.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.SSILogoLight.html",
    "title": "Property SSILogoLight | Simple Shader Inspectors Documentation",
    "keywords": "Property SSILogoLight SSILogoLight Simple Shader Inspectors logo for light theme. Declaration public static Texture2D SSILogoLight { get; } Property Value Type Description Texture2D"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.TextureBoxHeavyBorder.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.TextureBoxHeavyBorder.html",
    "title": "Property TextureBoxHeavyBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property TextureBoxHeavyBorder TextureBoxHeavyBorder Style for a box pointing to a texture upwards. The border is less transparent than background. Declaration public static GUIStyle TextureBoxHeavyBorder { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.TextureBoxLightBorder.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.TextureBoxLightBorder.html",
    "title": "Property TextureBoxLightBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property TextureBoxLightBorder TextureBoxLightBorder Style for a box pointing to a texture upwards. The border is more transparent than background. Declaration public static GUIStyle TextureBoxLightBorder { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.UpIcon.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Styles.UpIcon.html",
    "title": "Property UpIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property UpIcon UpIcon Style for a up button. Declaration public static GUIStyle UpIcon { get; } Property Value Type Description GUIStyle"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Textures.ColorIcon.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Textures.ColorIcon.html",
    "title": "Property ColorIcon | Simple Shader Inspectors Documentation",
    "keywords": "Property ColorIcon ColorIcon Texture used for a color selector internal part. Declaration public static Texture2D ColorIcon { get; } Property Value Type Description Texture2D"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Textures.ColorIconBorder.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Textures.ColorIconBorder.html",
    "title": "Property ColorIconBorder | Simple Shader Inspectors Documentation",
    "keywords": "Property ColorIconBorder ColorIconBorder Texture used for a color selector border. Declaration public static Texture2D ColorIconBorder { get; } Property Value Type Description Texture2D"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Textures.ColorIconBorderSelected.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Textures.ColorIconBorderSelected.html",
    "title": "Property ColorIconBorderSelected | Simple Shader Inspectors Documentation",
    "keywords": "Property ColorIconBorderSelected ColorIconBorderSelected Texture used for a color selector border when selected. Declaration public static Texture2D ColorIconBorderSelected { get; } Property Value Type Description Texture2D"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Textures.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Textures.html",
    "title": "Class Textures | Simple Shader Inspectors Documentation",
    "keywords": "Class Textures Default textures available natively in Simple Shader Inspectors. Inheritance Object Textures Namespace : VRLabs.SimpleShaderInspectors Syntax public static class Textures Properties Name Description ColorIcon Texture used for a color selector internal part. ColorIconBorder Texture used for a color selector border. ColorIconBorderSelected Texture used for a color selector border when selected."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Tools.EmbedLibraryEditor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Tools.EmbedLibraryEditor.html",
    "title": "Class EmbedLibraryEditor | Simple Shader Inspectors Documentation",
    "keywords": "Class EmbedLibraryEditor Editor window that embeds the Simple Shader Inspectors library into any custom editor folder with customized namespace. Inheritance Object Object ScriptableObject EditorWindow EmbedLibraryEditor Namespace : VRLabs.SimpleShaderInspectors.Tools Syntax public class EmbedLibraryEditor : EditorWindow"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Tools.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Tools.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors.Tools | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors.Tools Classes EmbedLibraryEditor Editor window that embeds the Simple Shader Inspectors library into any custom editor folder with customized namespace. LocalizationEditorWindow Editor window that enables the user to modify json localization data."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Tools.LocalizationEditorWindow.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Tools.LocalizationEditorWindow.html",
    "title": "Class LocalizationEditorWindow | Simple Shader Inspectors Documentation",
    "keywords": "Class LocalizationEditorWindow Editor window that enables the user to modify json localization data. Inheritance Object Object ScriptableObject EditorWindow LocalizationEditorWindow Namespace : VRLabs.SimpleShaderInspectors.Tools Syntax public class LocalizationEditorWindow : EditorWindow"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientBlendMode.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientBlendMode.html",
    "title": "Enum GradientBlendMode | Simple Shader Inspectors Documentation",
    "keywords": "Enum GradientBlendMode Enum indicating the blend mode of the gradient texture. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax public enum GradientBlendMode Fields Name Description Fixed Linear"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.AddKey.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.AddKey.html",
    "title": "Method AddKey | Simple Shader Inspectors Documentation",
    "keywords": "Method AddKey AddKey(Color, Single) Adds a new key, and removes any key that is in the same time. Declaration public int AddKey(Color color, float time) Parameters Type Name Description Color color Color of the key Single time Time of the key Returns Type Description Int32 The key index"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.BlendMode.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.BlendMode.html",
    "title": "Field BlendMode | Simple Shader Inspectors Documentation",
    "keywords": "Field BlendMode Blend mode between keys. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax public GradientBlendMode BlendMode Returns GradientBlendMode"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.Color.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.Color.html",
    "title": "Field Color | Simple Shader Inspectors Documentation",
    "keywords": "Field Color Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax [SerializeField] public Color Color Returns Color"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.-ctor.html",
    "title": "Constructor ColorKey | Simple Shader Inspectors Documentation",
    "keywords": "Constructor ColorKey ColorKey(Color, Single) Default constructor of GradientTexture.ColorKey Declaration public ColorKey(Color color, float time) Parameters Type Name Description Color color Color of the key. Single time Time of the key."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.html",
    "title": "Struct GradientTexture.ColorKey | Simple Shader Inspectors Documentation",
    "keywords": "Struct GradientTexture.ColorKey Structure containing a color and a float indicating at which time the color is. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax [Serializable] public struct ColorKey Constructors Name Description ColorKey(Color, Single) Default constructor of GradientTexture.ColorKey Fields Name Description Color Time"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.Time.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.ColorKey.Time.html",
    "title": "Field Time | Simple Shader Inspectors Documentation",
    "keywords": "Field Time Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax [SerializeField] public float Time Returns Single"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.-ctor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.-ctor.html",
    "title": "Constructor GradientTexture | Simple Shader Inspectors Documentation",
    "keywords": "Constructor GradientTexture GradientTexture(Int32) Default constructor. Declaration public GradientTexture(int width) Parameters Type Name Description Int32 width With of the result gradient texture."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.Evaluate.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.Evaluate.html",
    "title": "Method Evaluate | Simple Shader Inspectors Documentation",
    "keywords": "Method Evaluate Evaluate(Single) Returns a color at the specified time. Declaration public Color Evaluate(float time) Parameters Type Name Description Single time Time of the color to sample. Returns Type Description Color Color at selected time."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.GetTexture.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.GetTexture.html",
    "title": "Method GetTexture | Simple Shader Inspectors Documentation",
    "keywords": "Method GetTexture GetTexture() Get gradient texture. Declaration public Texture2D GetTexture() Returns Type Description Texture2D Texture of the gradient."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.html",
    "title": "Class GradientTexture | Simple Shader Inspectors Documentation",
    "keywords": "Class GradientTexture Utility class used when creating gradient editors. Inheritance Object GradientTexture Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax public class GradientTexture Constructors Name Description GradientTexture(Int32) Default constructor. Fields Name Description BlendMode Blend mode between keys. Keys List of gradient keys. Methods Name Description AddKey(Color, Single) Adds a new key, and removes any key that is in the same time. Evaluate(Single) Returns a color at the specified time. GetTexture() Get gradient texture. RemoveKey(Int32) Removes a key at the selected index. UpdateKeyColor(Int32, Color) Updates the key color. UpdateKeyTime(Int32, Single) Updates the key time position. UpdateTexture() Updates the internal gradient Texture. UpdateTextureWidth(Int32) Updates the width of the result texture."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.Keys.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.Keys.html",
    "title": "Field Keys | Simple Shader Inspectors Documentation",
    "keywords": "Field Keys List of gradient keys. Namespace : VRLabs.SimpleShaderInspectors.Utility Syntax [SerializeField] public List<GradientTexture.ColorKey> Keys Returns List < GradientTexture.ColorKey >"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.RemoveKey.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.RemoveKey.html",
    "title": "Method RemoveKey | Simple Shader Inspectors Documentation",
    "keywords": "Method RemoveKey RemoveKey(Int32) Removes a key at the selected index. Declaration public void RemoveKey(int index) Parameters Type Name Description Int32 index Index of the key to remove."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateKeyColor.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateKeyColor.html",
    "title": "Method UpdateKeyColor | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateKeyColor UpdateKeyColor(Int32, Color) Updates the key color. Declaration public void UpdateKeyColor(int index, Color col) Parameters Type Name Description Int32 index Index of the key. Color col Color of the key."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateKeyTime.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateKeyTime.html",
    "title": "Method UpdateKeyTime | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateKeyTime UpdateKeyTime(Int32, Single) Updates the key time position. Declaration public int UpdateKeyTime(int index, float time) Parameters Type Name Description Int32 index Index of the key to update. Single time New time. Returns Type Description Int32 The new index of the key."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateTexture.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateTexture.html",
    "title": "Method UpdateTexture | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateTexture UpdateTexture() Updates the internal gradient Texture. Declaration public void UpdateTexture()"
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateTextureWidth.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.GradientTexture.UpdateTextureWidth.html",
    "title": "Method UpdateTextureWidth | Simple Shader Inspectors Documentation",
    "keywords": "Method UpdateTextureWidth UpdateTextureWidth(Int32) Updates the width of the result texture. Declaration public void UpdateTextureWidth(int width) Parameters Type Name Description Int32 width Width."
  },
  "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.html": {
    "href": "v0.1.0/api/VRLabs.SimpleShaderInspectors.Utility.html",
    "title": "Namespace VRLabs.SimpleShaderInspectors.Utility | Simple Shader Inspectors Documentation",
    "keywords": "Namespace VRLabs.SimpleShaderInspectors.Utility Classes GradientTexture Utility class used when creating gradient editors. Structs GradientTexture.ColorKey Structure containing a color and a float indicating at which time the color is. Enums GradientBlendMode Enum indicating the blend mode of the gradient texture."
  },
  "v0.1.0/guides/index.html": {
    "href": "v0.1.0/guides/index.html",
    "title": "| Simple Shader Inspectors Documentation",
    "keywords": "Seems like at this point there weren't any guide available, try to look a more up to date version"
  }
}