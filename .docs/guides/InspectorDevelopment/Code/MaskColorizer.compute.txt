#pragma kernel MaskColorizer

// Default variables needed by the TextureGeneratorControl.
RWTexture2D<float4> Result;
float width;
float height;

struct TextureMetadata
{
    float Width;
    float Height;
    float SelectedChannel;
    float Reverse;
    float Gamma;
};

StructuredBuffer<TextureMetadata> TexturesMeta;
StructuredBuffer<float4> Colors;

// User defined Textures
Texture2D<float4> Mask;

// Converts gamma space to linear space
inline float GammaToLinearSpaceExact (float value)
{
    if (value <= 0.04045F)
    return value / 12.92F;
    else if (value < 1.0F)
    return pow(abs((value + 0.055F))/1.055F, 2.4F);
    else
    return pow(abs(value), 2.2F);
}

// Converts linear space to gamma space
inline float LinearToGammaSpaceExact (float value)
{
    if (value <= 0.0F)
    return 0.0F;
    else if (value <= 0.0031308F)
    return 12.92F * value;
    else if (value < 1.0F)
    return 1.055F * pow(abs(value), 0.4166667F) - 0.055F;
    else
    return pow(abs(value), 0.45454545F);
}

// Select the right channel from the float4
float SelectChannel(float4 tex, float channel)
{
    if(channel == 0) return tex.r;
    if(channel == 1) return tex.g;
    if(channel == 2) return tex.b;
    return tex.a;
}

// If is needed, do the color space correction
float DoColorCorrectionIfNeeded(float gamma, float value)
{
    if(gamma == 1)
        return LinearToGammaSpaceExact(value);
    else
        return value;
}

// Reverse the value if needed
float DoReverseIfNeeded(float reverse, float value)
{
    if(reverse == 1)
        return 1 - value;
    else
        return value;
}

[numthreads(16,16,1)]
void MaskColorizer (uint3 id : SV_DispatchThreadID)
{
    // Get the right uv coordinates based on texture size
    float2 uv = float2(id.x * TexturesMeta[0].Width / width, id.y * TexturesMeta[0].Height / height);

    // get fragment mask
    float4 fragmentMask = DoColorCorrectionIfNeeded(TexturesMeta[0].Gamma, Mask[uv]); 

    // applying colors
    float4 finalColor = Colors[0];
    finalColor = lerp(finalColor, Colors[1], fragmentMask.r);
    finalColor = lerp(finalColor, Colors[2], fragmentMask.g);
    finalColor = lerp(finalColor, Colors[3], fragmentMask.b);
    finalColor = lerp(finalColor, Colors[4], fragmentMask.a);

    // Return fragment
    Result[id.xy] = finalColor;
}